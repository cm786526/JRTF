// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tAOValues_h___
#define ___tAOValues_h___

#include "tOutTimerValues.h"

namespace nAO {
   using namespace nOutTimer;
   typedef enum {
      kBipolar                           = 1,
   } tAO_Bipolar_t;

   typedef enum {
      kGate_Disabled                     = 0,
      kGate_PFI0                         = 1,
      kGate_PFI1                         = 2,
      kGate_PFI2                         = 3,
      kGate_PFI3                         = 4,
      kGate_PFI4                         = 5,
      kGate_PFI5                         = 6,
      kGate_PFI6                         = 7,
      kGate_PFI7                         = 8,
      kGate_PFI8                         = 9,
      kGate_PFI9                         = 10,
      kGate_RTSI0                        = 11,
      kGate_RTSI1                        = 12,
      kGate_RTSI2                        = 13,
      kGate_RTSI3                        = 14,
      kGate_RTSI4                        = 15,
      kGate_RTSI5                        = 16,
      kGate_RTSI6                        = 17,
      kGate_PXIe_DStarA                  = 18,
      kGate_PXIe_DStarB                  = 19,
      kGate_Star_Trigger                 = 20,
      kGate_PFI10                        = 21,
      kGate_PFI11                        = 22,
      kGate_PFI12                        = 23,
      kGate_PFI13                        = 24,
      kGate_PFI14                        = 25,
      kGate_PFI15                        = 26,
      kGate_RTSI7                        = 27,
      kGate_Analog_Trigger               = 30,
      kGate_Low                          = 31,
      kGate_G0_Out                       = 32,
      kGate_G1_Out                       = 33,
      kGate_G2_Out                       = 34,
      kGate_G3_Out                       = 35,
      kGate_G0_Gate                      = 36,
      kGate_G1_Gate                      = 37,
      kGate_G2_Gate                      = 38,
      kGate_G3_Gate                      = 39,
      kGate_AI_Gate                      = 40,
      kGate_DI_Gate                      = 41,
      kGate_DO_Gate                      = 44,
      kGate_IntTriggerA0                 = 53,
      kGate_IntTriggerA1                 = 54,
      kGate_IntTriggerA2                 = 55,
      kGate_IntTriggerA3                 = 56,
      kGate_IntTriggerA4                 = 57,
      kGate_IntTriggerA5                 = 58,
      kGate_IntTriggerA6                 = 59,
      kGate_IntTriggerA7                 = 60,
   } tAO_External_Gate_Select_t;

   typedef enum {
      kRising_Edge                       = 0,
      kFalling_Edge                      = 1,
   } tAO_Polarity_t;

   typedef enum {
      kStart1_Pulse                      = 0,
      kStart1_PFI0                       = 1,
      kStart1_PFI1                       = 2,
      kStart1_PFI2                       = 3,
      kStart1_PFI3                       = 4,
      kStart1_PFI4                       = 5,
      kStart1_PFI5                       = 6,
      kStart1_PFI6                       = 7,
      kStart1_PFI7                       = 8,
      kStart1_PFI8                       = 9,
      kStart1_PFI9                       = 10,
      kStart1_RTSI0                      = 11,
      kStart1_RTSI1                      = 12,
      kStart1_RTSI2                      = 13,
      kStart1_RTSI3                      = 14,
      kStart1_RTSI4                      = 15,
      kStart1_RTSI5                      = 16,
      kStart1_RTSI6                      = 17,
      kStart1_AI_Start2                  = 18,
      kStart1_AI_Start1                  = 19,
      kStart1_Star_Trigger               = 20,
      kStart1_PFI10                      = 21,
      kStart1_PFI11                      = 22,
      kStart1_PFI12                      = 23,
      kStart1_PFI13                      = 24,
      kStart1_PFI14                      = 25,
      kStart1_PFI15                      = 26,
      kStart1_RTSI7                      = 27,
      kStart1_PXIe_DStarA                = 28,
      kStart1_PXIe_DStarB                = 29,
      kStart1_Analog_Trigger             = 30,
      kStart1_Low                        = 31,
      kStart1_G0_Out                     = 32,
      kStart1_G1_Out                     = 33,
      kStart1_G2_Out                     = 34,
      kStart1_G3_Out                     = 35,
      kStart1_DIO_ChgDetect              = 36,
      kStart1_DI_Start1                  = 37,
      kStart1_DI_Start2                  = 38,
      kStart1_DO_Start1                  = 43,
      kStart1_IntTriggerA0               = 53,
      kStart1_IntTriggerA1               = 54,
      kStart1_IntTriggerA2               = 55,
      kStart1_IntTriggerA3               = 56,
      kStart1_IntTriggerA4               = 57,
      kStart1_IntTriggerA5               = 58,
      kStart1_IntTriggerA6               = 59,
      kStart1_IntTriggerA7               = 60,
      kStart1_FifoCondition              = 61,
   } tAO_START1_Select_t;

   typedef enum {
      kUpdate_UI_TC                      = 0,
      kUpdate_PFI0                       = 1,
      kUpdate_PFI1                       = 2,
      kUpdate_PFI2                       = 3,
      kUpdate_PFI3                       = 4,
      kUpdate_PFI4                       = 5,
      kUpdate_PFI5                       = 6,
      kUpdate_PFI6                       = 7,
      kUpdate_PFI7                       = 8,
      kUpdate_PFI8                       = 9,
      kUpdate_PFI9                       = 10,
      kUpdate_RTSI0                      = 11,
      kUpdate_RTSI1                      = 12,
      kUpdate_RTSI2                      = 13,
      kUpdate_RTSI3                      = 14,
      kUpdate_RTSI4                      = 15,
      kUpdate_RTSI5                      = 16,
      kUpdate_RTSI6                      = 17,
      kUpdate_G0_Out                     = 18,
      kUpdate_G1_Out                     = 19,
      kUpdate_Star_Trigger               = 20,
      kUpdate_PFI10                      = 21,
      kUpdate_PFI11                      = 22,
      kUpdate_PFI12                      = 23,
      kUpdate_PFI13                      = 24,
      kUpdate_PFI14                      = 25,
      kUpdate_PFI15                      = 26,
      kUpdate_RTSI7                      = 27,
      kUpdate_G2_Out                     = 28,
      kUpdate_G3_Out                     = 29,
      kUpdate_Analog_Trigger             = 30,
      kUpdate_Low                        = 31,
      kUpdate_PXIe_DStarA                = 32,
      kUpdate_PXIe_DStarB                = 33,
      kUpdate_DIO_ChgDetect              = 34,
      kUpdate_G0_SampleClk               = 35,
      kUpdate_G1_SampleClk               = 36,
      kUpdate_G2_SampleClk               = 37,
      kUpdate_G3_SampleClk               = 38,
      kUpdate_AI_Convert                 = 39,
      kUpdate_AI_Start                   = 40,
      kUpdate_DI_Convert                 = 41,
      kUpdate_DO_Update                  = 44,
      kUpdate_IntTriggerA0               = 53,
      kUpdate_IntTriggerA1               = 54,
      kUpdate_IntTriggerA2               = 55,
      kUpdate_IntTriggerA3               = 56,
      kUpdate_IntTriggerA4               = 57,
      kUpdate_IntTriggerA5               = 58,
      kUpdate_IntTriggerA6               = 59,
      kUpdate_IntTriggerA7               = 60,
      kUpdate_AutoUpdate                 = 61,
   } tAO_UPDATE_Source_Select_t;

   typedef enum {
      kImmediate                         = 0,
      kTimed                             = 1,
   } tAO_Update_Mode_t;

   namespace nAO_Config_Bank_t {
      namespace nAO_Offset {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nAO_Reference {
         enum {
            kMask = 0x38,
            kOffset = 0x3,
         };
      }

      namespace nAO_Update_Mode {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nAO_Bipolar {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

   }

   namespace nAO_DacShadow_t {
      namespace nAO_DacShadow_Bitfield {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nAO_Direct_Data_t {
      namespace nAO_Direct_Data_Bitfield {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nAO_Order_Config_Data_Register {
      namespace nAO_Waveform_Bitfield_Order {
         enum {
            kMask = 0xf,
            kOffset = 0,
         };
      }

   }

   namespace nAO_Config_Control_Register {
      namespace nAO_Waveform_Order_Clear {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

   }

   namespace nAO_Trigger_Select_Register {
      namespace nAO_External_Gate_Enable {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nAO_External_Gate_Polarity {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nAO_External_Gate_Select {
         enum {
            kMask = 0xfc00,
            kOffset = 0xa,
         };
      }

      namespace nAO_START1_Edge {
         enum {
            kMask = 0x10000,
            kOffset = 0x10,
         };
      }

      namespace nAO_START1_Polarity {
         enum {
            kMask = 0x20000,
            kOffset = 0x11,
         };
      }

      namespace nAO_START1_Select {
         enum {
            kMask = 0xfc0000,
            kOffset = 0x12,
         };
      }

      namespace nAO_UPDATE_Source_Polarity {
         enum {
            kMask = 0x2000000,
            kOffset = 0x19,
         };
      }

      namespace nAO_UPDATE_Source_Select {
         enum {
            kMask = 0xfc000000,
            kOffset = 0x1a,
         };
      }

   }

   namespace nAO_FIFO_Data_Register {
      namespace nAO_FIFO_Data {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nAO_FIFO_Status_Register {
      namespace nAO_FIFO_Status {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   using namespace nAO_Config_Bank_t;
   using namespace nAO_DacShadow_t;
   using namespace nAO_Direct_Data_t;
   using namespace nAO_Order_Config_Data_Register;
   using namespace nAO_Config_Control_Register;
   using namespace nAO_Trigger_Select_Register;
   using namespace nAO_FIFO_Data_Register;
   using namespace nAO_FIFO_Status_Register;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

