// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tBrdServices_h___
#define ___tBrdServices_h___

// includes
#include "osiTypes.h"
#include "osiBus.h"

#ifndef ___tBrdServicesValues_h___
#include "tBrdServicesValues.h"
#endif

#ifndef nNIMXRegisterMap120_mBuildFieldId

// Algorithm:
//    Move lowermost 5 bits (4 through 0) of field id to uppermost 5 bits (31
//          through 27)
//    Move bit 5 of field id to bit 26
//    Move bit 6 of field id to bit 25
//    OR in the register id (which is allowed the remaining bits)
//
// Why not move the lowermost 7 bits directly to the uppermost 7 bits? Because
// we originally moved only the lowermost 5, and for backwards compatibility,
// we can't change where those 5 bits end up.
//
// For future expansion purposes, the bits beyond the first 5 are put in reverse
// order in the resulting combined id.
#define nNIMXRegisterMap120_mBuildFieldId(fieldId, regId) \
   ( \
     ((fieldId) << 27) | \
     ((((fieldId) >> 5) & 0x1) << 26) | \
     ((((fieldId) >> 6) & 0x1) << 25) | \
     (regId) \
   )

#endif

#ifndef nNIMXRegisterMap120_mExtractFieldId

// Algorithm: (basically the reverse of mBuildFieldId)
//    Move uppermost 5 bits (31 through 27) to lowermost 5 bits (4 through 0)
//    Move 26th bit to bit 5 (right-shifting by (26 - 5) is like right-shifting
//          by 26 then left-shifting by 5, but it's more efficient)
//    Move 25th bit to bit 6
#define nNIMXRegisterMap120_mExtractFieldId(id) \
   (unsigned int) \
   ( \
     (((id) >> 27) & 0x1F) | \
     (((id) & (0x1 << 26)) >> (26 - 5)) | \
     (((id) & (0x1 << 25)) >> (25 - 6)) \
   )

#endif

class tBrdServices
{
public:
   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg8IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u8 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u8 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg16IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u16 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u16 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   //---------------------------------------------------------------------------
   // Gen_Interrupt1_Register
   //---------------------------------------------------------------------------
   class tGen_Interrupt1_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x70,
         kId     = 0
      };
      tGen_Interrupt1_Register();


      typedef enum {
         kRegisterId                          = 0,
         kWDT_TriggerIRQ_EnableId          = 1,
         kPLL_OutOfLockIRQ_EnableId        = 2,
         kWDT_TriggerIRQ_AckId             = 4,
         kPLL_OutOfLockIRQ_AckId           = 5,
         kMaxFieldId                          = 5
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeWDT_TriggerIRQ_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writePLL_OutOfLockIRQ_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeWDT_TriggerIRQ_Ack(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writePLL_OutOfLockIRQ_Ack(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tGen_Interrupt1_Register(const tGen_Interrupt1_Register&);
      tGen_Interrupt1_Register& operator=(const tGen_Interrupt1_Register&);

   };

   //---------------------------------------------------------------------------
   // Gen_Interrupt2_Register
   //---------------------------------------------------------------------------
   class tGen_Interrupt2_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x74,
         kId     = 1
      };
      tGen_Interrupt2_Register();


      typedef enum {
         kRegisterId                          = 0,
         kWDT_TriggerIRQ_DisableId         = 1,
         kPLL_OutOfLockIRQ_DisableId       = 2,
         kWDT_TriggerIRQ_Ack2Id            = 4,
         kPLL_OutOfLockIRQ_Ack2Id          = 5,
         kMaxFieldId                          = 5
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeWDT_TriggerIRQ_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writePLL_OutOfLockIRQ_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeWDT_TriggerIRQ_Ack2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writePLL_OutOfLockIRQ_Ack2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tGen_Interrupt2_Register(const tGen_Interrupt2_Register&);
      tGen_Interrupt2_Register& operator=(const tGen_Interrupt2_Register&);

   };

   //---------------------------------------------------------------------------
   // ScratchPadRegister
   //---------------------------------------------------------------------------
   class tScratchPadRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x4,
         kId     = 2
      };
      tScratchPadRegister();


      typedef enum {
         kRegisterId                          = 0,
         kScratch_PadId                    = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tScratchPadRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tScratchPadRegister& setScratch_Pad(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getScratch_Pad(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeScratch_Pad(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readScratch_Pad(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tScratchPadRegister(const tScratchPadRegister&);
      tScratchPadRegister& operator=(const tScratchPadRegister&);

   };

   //---------------------------------------------------------------------------
   // Signature_Register
   //---------------------------------------------------------------------------
   class tSignature_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x60,
         kId     = 3
      };
      tSignature_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSTC3_RevisionId                  = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tSignature_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tSignature_Register& setSTC3_Revision(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getSTC3_Revision(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readSTC3_Revision(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tSignature_Register(const tSignature_Register&);
      tSignature_Register& operator=(const tSignature_Register&);

   };

   //---------------------------------------------------------------------------
   // Joint_Reset_Register
   //---------------------------------------------------------------------------
   class tJoint_Reset_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x64,
         kId     = 4
      };
      tJoint_Reset_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSoftware_ResetId                 = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeSoftware_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tJoint_Reset_Register(const tJoint_Reset_Register&);
      tJoint_Reset_Register& operator=(const tJoint_Reset_Register&);

   };

   //---------------------------------------------------------------------------
   // TimeSincePowerUpRegister
   //---------------------------------------------------------------------------
   class tTimeSincePowerUpRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x64,
         kId     = 5
      };
      tTimeSincePowerUpRegister();


      typedef enum {
         kRegisterId                          = 0,
         kTimeSincePowerUpValueId          = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tTimeSincePowerUpRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tTimeSincePowerUpRegister& setTimeSincePowerUpValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getTimeSincePowerUpValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readTimeSincePowerUpValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tTimeSincePowerUpRegister(const tTimeSincePowerUpRegister&);
      tTimeSincePowerUpRegister& operator=(const tTimeSincePowerUpRegister&);

   };

   //---------------------------------------------------------------------------
   // GenPwmPageSpec_i
   //---------------------------------------------------------------------------
   class tGenPwmPageSpec_i : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      const u32 kOffset;
      const u32 kId;

      tGenPwmPageSpec_i(u32 offset, u32 id);
      tGenPwmPageSpec_i();
      void initialize(u32 offset, u32 id);


      typedef enum {
         kRegisterId                          = 0,
         kGenPwmNumPagesSpec_iId           = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tGenPwmPageSpec_i& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tGenPwmPageSpec_i& setGenPwmNumPagesSpec_i(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getGenPwmNumPagesSpec_i(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeGenPwmNumPagesSpec_i(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readGenPwmNumPagesSpec_i(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tGenPwmPageSpec_i(const tGenPwmPageSpec_i&);
      tGenPwmPageSpec_i& operator=(const tGenPwmPageSpec_i&);

   };

   //---------------------------------------------------------------------------
   // Gen_PWM_i
   //---------------------------------------------------------------------------
   class tGen_PWM_i : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      const u32 kOffset;
      const u32 kId;

      tGen_PWM_i(u32 offset, u32 id);
      tGen_PWM_i();
      void initialize(u32 offset, u32 id);


      typedef enum {
         kRegisterId                          = 0,
         kGen_PWM_i_Duty_CycleId           = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tGen_PWM_i& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tGen_PWM_i& setGen_PWM_i_Duty_Cycle(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getGen_PWM_i_Duty_Cycle(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeGen_PWM_i_Duty_Cycle(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readGen_PWM_i_Duty_Cycle(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tGen_PWM_i(const tGen_PWM_i&);
      tGen_PWM_i& operator=(const tGen_PWM_i&);

   };

   //---------------------------------------------------------------------------
   // SCXI_Serial_Data_In_Register
   //---------------------------------------------------------------------------
   class tSCXI_Serial_Data_In_Register : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x10,
         kId     = 20
      };
      tSCXI_Serial_Data_In_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSCXI_Data_InId                   = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tSCXI_Serial_Data_In_Register& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tSCXI_Serial_Data_In_Register& setSCXI_Data_In(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_Data_In(nMDBG::tStatus2* statusChain = NULL) const;

      inline u8 readSCXI_Data_In(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tSCXI_Serial_Data_In_Register(const tSCXI_Serial_Data_In_Register&);
      tSCXI_Serial_Data_In_Register& operator=(const tSCXI_Serial_Data_In_Register&);

   };

   //---------------------------------------------------------------------------
   // SCXI_Serial_Data_Out_Register
   //---------------------------------------------------------------------------
   class tSCXI_Serial_Data_Out_Register : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x10,
         kId     = 21
      };
      tSCXI_Serial_Data_Out_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSCXI_Data_OutId                  = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeSCXI_Data_Out(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tSCXI_Serial_Data_Out_Register(const tSCXI_Serial_Data_Out_Register&);
      tSCXI_Serial_Data_Out_Register& operator=(const tSCXI_Serial_Data_Out_Register&);

   };

   //---------------------------------------------------------------------------
   // SCXI_Control_Register
   //---------------------------------------------------------------------------
   class tSCXI_Control_Register : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x12,
         kId     = 22
      };
      tSCXI_Control_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSCXI_SW_SPIClkId                 = 1,
         kSCXI_Back_Plane_MISO_EnableId    = 2,
         kSCXI_Front_Panel_MISO_EnableId   = 3,
         kSCXI_IntrId                      = 4,
         kSCXI_D_AId                       = 5,
         kSCXI_HW_Serial_TimebaseId        = 6,
         kSCXI_HW_Serial_StartId           = 7,
         kSCXI_HW_Serial_EnableId          = 8,
         kMaxFieldId                          = 8
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tSCXI_Control_Register& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tSCXI_Control_Register& setSCXI_SW_SPIClk(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_SW_SPIClk(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_SW_SPIClk(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_SW_SPIClk(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_Control_Register& setSCXI_Back_Plane_MISO_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_Back_Plane_MISO_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_Back_Plane_MISO_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_Back_Plane_MISO_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_Control_Register& setSCXI_Front_Panel_MISO_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_Front_Panel_MISO_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_Front_Panel_MISO_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_Front_Panel_MISO_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_Control_Register& setSCXI_Intr(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_Intr(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_Intr(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_Intr(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_Control_Register& setSCXI_D_A(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_D_A(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_D_A(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_D_A(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_Control_Register& setSCXI_HW_Serial_Timebase(nBrdServices::tBrdSrv_SCXI_HW_Serial_Timebase_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nBrdServices::tBrdSrv_SCXI_HW_Serial_Timebase_t getSCXI_HW_Serial_Timebase(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_HW_Serial_Timebase(nBrdServices::tBrdSrv_SCXI_HW_Serial_Timebase_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nBrdServices::tBrdSrv_SCXI_HW_Serial_Timebase_t readSCXI_HW_Serial_Timebase(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_Control_Register& setSCXI_HW_Serial_Start(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_HW_Serial_Start(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_HW_Serial_Start(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_HW_Serial_Start(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_Control_Register& setSCXI_HW_Serial_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_HW_Serial_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_HW_Serial_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_HW_Serial_Enable(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tSCXI_Control_Register(const tSCXI_Control_Register&);
      tSCXI_Control_Register& operator=(const tSCXI_Control_Register&);

   };

   //---------------------------------------------------------------------------
   // SCXI_Output_Enable_Register
   //---------------------------------------------------------------------------
   class tSCXI_Output_Enable_Register : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x14,
         kId     = 23
      };
      tSCXI_Output_Enable_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSCXI_Dedicated_Output_EnableId   = 1,
         kSCXI_Trig1_Output_EnableId       = 2,
         kSCXI_Trig0_Output_EnableId       = 3,
         kSCXI_Trig1_Output_SelectId       = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tSCXI_Output_Enable_Register& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tSCXI_Output_Enable_Register& setSCXI_Dedicated_Output_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_Dedicated_Output_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_Dedicated_Output_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_Dedicated_Output_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_Output_Enable_Register& setSCXI_Trig1_Output_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_Trig1_Output_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_Trig1_Output_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_Trig1_Output_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_Output_Enable_Register& setSCXI_Trig0_Output_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_Trig0_Output_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_Trig0_Output_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_Trig0_Output_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_Output_Enable_Register& setSCXI_Trig1_Output_Select(nBrdServices::tBrdSrv_SCXI_Trig1_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nBrdServices::tBrdSrv_SCXI_Trig1_Output_Select_t getSCXI_Trig1_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_Trig1_Output_Select(nBrdServices::tBrdSrv_SCXI_Trig1_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nBrdServices::tBrdSrv_SCXI_Trig1_Output_Select_t readSCXI_Trig1_Output_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tSCXI_Output_Enable_Register(const tSCXI_Output_Enable_Register&);
      tSCXI_Output_Enable_Register& operator=(const tSCXI_Output_Enable_Register&);

   };

   //---------------------------------------------------------------------------
   // SCXI_Status_Register
   //---------------------------------------------------------------------------
   class tSCXI_Status_Register : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x16,
         kId     = 24
      };
      tSCXI_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSCXI_Shift_In_ProgId             = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tSCXI_Status_Register& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tSCXI_Status_Register& setSCXI_Shift_In_Prog(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_Shift_In_Prog(nMDBG::tStatus2* statusChain = NULL) const;

      inline u8 readSCXI_Shift_In_Prog(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tSCXI_Status_Register(const tSCXI_Status_Register&);
      tSCXI_Status_Register& operator=(const tSCXI_Status_Register&);

   };

   //---------------------------------------------------------------------------
   // SCXI_Mux_Clock_Register
   //---------------------------------------------------------------------------
   class tSCXI_Mux_Clock_Register : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x16,
         kId     = 25
      };
      tSCXI_Mux_Clock_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSCXI_Force_AI_EXTMUX_CLK_WidthId   = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tSCXI_Mux_Clock_Register& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tSCXI_Mux_Clock_Register& setSCXI_Force_AI_EXTMUX_CLK_Width(nBrdServices::tBrdSrv_SCXI_Force_AI_EXTMUX_CLK_Width_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nBrdServices::tBrdSrv_SCXI_Force_AI_EXTMUX_CLK_Width_t getSCXI_Force_AI_EXTMUX_CLK_Width(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_Force_AI_EXTMUX_CLK_Width(nBrdServices::tBrdSrv_SCXI_Force_AI_EXTMUX_CLK_Width_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nBrdServices::tBrdSrv_SCXI_Force_AI_EXTMUX_CLK_Width_t readSCXI_Force_AI_EXTMUX_CLK_Width(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tSCXI_Mux_Clock_Register(const tSCXI_Mux_Clock_Register&);
      tSCXI_Mux_Clock_Register& operator=(const tSCXI_Mux_Clock_Register&);

   };

   //---------------------------------------------------------------------------
   // WatchdogStatusRegister
   //---------------------------------------------------------------------------
   class tWatchdogStatusRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x68,
         kId     = 26
      };
      tWatchdogStatusRegister();


      typedef enum {
         kRegisterId                          = 0,
         kWatchdogSM_StateId               = 1,
         kWatchdogExpiredCntId             = 3,
         kMaxFieldId                          = 3
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tWatchdogStatusRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tWatchdogStatusRegister& setWatchdogSM_State(nBrdServices::tBrdSrv_WatchdogTimerStateMachineSt_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nBrdServices::tBrdSrv_WatchdogTimerStateMachineSt_t getWatchdogSM_State(nMDBG::tStatus2* statusChain = NULL) const;

      inline nBrdServices::tBrdSrv_WatchdogTimerStateMachineSt_t readWatchdogSM_State(nMDBG::tStatus2* statusChain = NULL);

      inline tWatchdogStatusRegister& setWatchdogExpiredCnt(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getWatchdogExpiredCnt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readWatchdogExpiredCnt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogStatusRegister(const tWatchdogStatusRegister&);
      tWatchdogStatusRegister& operator=(const tWatchdogStatusRegister&);

   };

   //---------------------------------------------------------------------------
   // WatchdogTimeoutRegister
   //---------------------------------------------------------------------------
   class tWatchdogTimeoutRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x68,
         kId     = 27
      };
      tWatchdogTimeoutRegister();


      typedef enum {
         kRegisterId                          = 0,
         kWatchdogTimeoutValueId           = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tWatchdogTimeoutRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tWatchdogTimeoutRegister& setWatchdogTimeoutValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getWatchdogTimeoutValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeWatchdogTimeoutValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readWatchdogTimeoutValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogTimeoutRegister(const tWatchdogTimeoutRegister&);
      tWatchdogTimeoutRegister& operator=(const tWatchdogTimeoutRegister&);

   };

   //---------------------------------------------------------------------------
   // WatchdogConfiguration
   //---------------------------------------------------------------------------
   class tWatchdogConfiguration : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x6c,
         kId     = 28
      };
      tWatchdogConfiguration();


      typedef enum {
         kRegisterId                          = 0,
         kWatchdogExtTrigSelId             = 1,
         kWatchdogExtTrigPolId             = 3,
         kWatchdogExtTrigEnId              = 4,
         kWatchdogIntTrigEnId              = 5,
         kMaxFieldId                          = 5
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tWatchdogConfiguration& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tWatchdogConfiguration& setWatchdogExtTrigSel(nBrdServices::tBrdSrv_WatchdogTimerExtSrcSel_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nBrdServices::tBrdSrv_WatchdogTimerExtSrcSel_t getWatchdogExtTrigSel(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeWatchdogExtTrigSel(nBrdServices::tBrdSrv_WatchdogTimerExtSrcSel_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nBrdServices::tBrdSrv_WatchdogTimerExtSrcSel_t readWatchdogExtTrigSel(nMDBG::tStatus2* statusChain = NULL);

      inline tWatchdogConfiguration& setWatchdogExtTrigPol(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getWatchdogExtTrigPol(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeWatchdogExtTrigPol(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readWatchdogExtTrigPol(nMDBG::tStatus2* statusChain = NULL);

      inline tWatchdogConfiguration& setWatchdogExtTrigEn(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getWatchdogExtTrigEn(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeWatchdogExtTrigEn(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readWatchdogExtTrigEn(nMDBG::tStatus2* statusChain = NULL);

      inline tWatchdogConfiguration& setWatchdogIntTrigEn(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getWatchdogIntTrigEn(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeWatchdogIntTrigEn(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readWatchdogIntTrigEn(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogConfiguration(const tWatchdogConfiguration&);
      tWatchdogConfiguration& operator=(const tWatchdogConfiguration&);

   };

   //---------------------------------------------------------------------------
   // WatchdogControl
   //---------------------------------------------------------------------------
   class tWatchdogControl : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBrdServices tRegisterMap;

      enum {
         kOffset = 0x6e,
         kId     = 29
      };
      tWatchdogControl();


      typedef enum {
         kRegisterId                          = 0,
         kWatchdogCommandId                = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeWatchdogCommand(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogControl(const tWatchdogControl&);
      tWatchdogControl& operator=(const tWatchdogControl&);

   };

   //----------------------------------------
   // Register Array Sizes
   //----------------------------------------
   enum {
      kGenPwmPageSpec_iArraySize = 7,
      kGen_PWM_iArraySize = 7
   };

   //---------------------------------------------------------------------------
   // Gen_Interrupt1_Register
   //---------------------------------------------------------------------------
   tGen_Interrupt1_Register Gen_Interrupt1_Register;

   //---------------------------------------------------------------------------
   // Gen_Interrupt2_Register
   //---------------------------------------------------------------------------
   tGen_Interrupt2_Register Gen_Interrupt2_Register;

   //---------------------------------------------------------------------------
   // ScratchPadRegister
   //---------------------------------------------------------------------------
   tScratchPadRegister ScratchPadRegister;

   //---------------------------------------------------------------------------
   // Signature_Register
   //---------------------------------------------------------------------------
   tSignature_Register Signature_Register;

   //---------------------------------------------------------------------------
   // Joint_Reset_Register
   //---------------------------------------------------------------------------
   tJoint_Reset_Register Joint_Reset_Register;

   //---------------------------------------------------------------------------
   // TimeSincePowerUpRegister
   //---------------------------------------------------------------------------
   tTimeSincePowerUpRegister TimeSincePowerUpRegister;

   //---------------------------------------------------------------------------
   // GenPwmPageSpec_i
   //---------------------------------------------------------------------------
   tGenPwmPageSpec_i GenPwmPageSpec_i[kGenPwmPageSpec_iArraySize];

   //---------------------------------------------------------------------------
   // Gen_PWM_i
   //---------------------------------------------------------------------------
   tGen_PWM_i Gen_PWM_i[kGen_PWM_iArraySize];

   //---------------------------------------------------------------------------
   // SCXI_Serial_Data_In_Register
   //---------------------------------------------------------------------------
   tSCXI_Serial_Data_In_Register SCXI_Serial_Data_In_Register;

   //---------------------------------------------------------------------------
   // SCXI_Serial_Data_Out_Register
   //---------------------------------------------------------------------------
   tSCXI_Serial_Data_Out_Register SCXI_Serial_Data_Out_Register;

   //---------------------------------------------------------------------------
   // SCXI_Control_Register
   //---------------------------------------------------------------------------
   tSCXI_Control_Register SCXI_Control_Register;

   //---------------------------------------------------------------------------
   // SCXI_Output_Enable_Register
   //---------------------------------------------------------------------------
   tSCXI_Output_Enable_Register SCXI_Output_Enable_Register;

   //---------------------------------------------------------------------------
   // SCXI_Status_Register
   //---------------------------------------------------------------------------
   tSCXI_Status_Register SCXI_Status_Register;

   //---------------------------------------------------------------------------
   // SCXI_Mux_Clock_Register
   //---------------------------------------------------------------------------
   tSCXI_Mux_Clock_Register SCXI_Mux_Clock_Register;

   //---------------------------------------------------------------------------
   // WatchdogStatusRegister
   //---------------------------------------------------------------------------
   tWatchdogStatusRegister WatchdogStatusRegister;

   //---------------------------------------------------------------------------
   // WatchdogTimeoutRegister
   //---------------------------------------------------------------------------
   tWatchdogTimeoutRegister WatchdogTimeoutRegister;

   //---------------------------------------------------------------------------
   // WatchdogConfiguration
   //---------------------------------------------------------------------------
   tWatchdogConfiguration WatchdogConfiguration;

   //---------------------------------------------------------------------------
   // WatchdogControl
   //---------------------------------------------------------------------------
   tWatchdogControl WatchdogControl;

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kGen_Interrupt1_RegisterId        = 0,
      kWDT_TriggerIRQ_EnableId          = nNIMXRegisterMap120_mBuildFieldId(tGen_Interrupt1_Register::kWDT_TriggerIRQ_EnableId, kGen_Interrupt1_RegisterId),
      kPLL_OutOfLockIRQ_EnableId        = nNIMXRegisterMap120_mBuildFieldId(tGen_Interrupt1_Register::kPLL_OutOfLockIRQ_EnableId, kGen_Interrupt1_RegisterId),
      kWDT_TriggerIRQ_AckId             = nNIMXRegisterMap120_mBuildFieldId(tGen_Interrupt1_Register::kWDT_TriggerIRQ_AckId, kGen_Interrupt1_RegisterId),
      kPLL_OutOfLockIRQ_AckId           = nNIMXRegisterMap120_mBuildFieldId(tGen_Interrupt1_Register::kPLL_OutOfLockIRQ_AckId, kGen_Interrupt1_RegisterId),

      kGen_Interrupt2_RegisterId        = 1,
      kWDT_TriggerIRQ_DisableId         = nNIMXRegisterMap120_mBuildFieldId(tGen_Interrupt2_Register::kWDT_TriggerIRQ_DisableId, kGen_Interrupt2_RegisterId),
      kPLL_OutOfLockIRQ_DisableId       = nNIMXRegisterMap120_mBuildFieldId(tGen_Interrupt2_Register::kPLL_OutOfLockIRQ_DisableId, kGen_Interrupt2_RegisterId),
      kWDT_TriggerIRQ_Ack2Id            = nNIMXRegisterMap120_mBuildFieldId(tGen_Interrupt2_Register::kWDT_TriggerIRQ_Ack2Id, kGen_Interrupt2_RegisterId),
      kPLL_OutOfLockIRQ_Ack2Id          = nNIMXRegisterMap120_mBuildFieldId(tGen_Interrupt2_Register::kPLL_OutOfLockIRQ_Ack2Id, kGen_Interrupt2_RegisterId),

      kScratchPadRegisterId             = 2,
      kScratch_PadId                    = nNIMXRegisterMap120_mBuildFieldId(tScratchPadRegister::kScratch_PadId, kScratchPadRegisterId),

      kSignature_RegisterId             = 3,
      kSTC3_RevisionId                  = nNIMXRegisterMap120_mBuildFieldId(tSignature_Register::kSTC3_RevisionId, kSignature_RegisterId),

      kJoint_Reset_RegisterId           = 4,
      kSoftware_ResetId                 = nNIMXRegisterMap120_mBuildFieldId(tJoint_Reset_Register::kSoftware_ResetId, kJoint_Reset_RegisterId),

      kTimeSincePowerUpRegisterId       = 5,
      kTimeSincePowerUpValueId          = nNIMXRegisterMap120_mBuildFieldId(tTimeSincePowerUpRegister::kTimeSincePowerUpValueId, kTimeSincePowerUpRegisterId),

      kGenPwmPageSpec_i0Id              = 6,
      kGenPwmPageSpec0GenPwmNumPagesSpec_iId        = nNIMXRegisterMap120_mBuildFieldId(tGenPwmPageSpec_i::kGenPwmNumPagesSpec_iId, kGenPwmPageSpec_i0Id),

      kGenPwmPageSpec_i1Id              = 7,
      kGenPwmPageSpec1GenPwmNumPagesSpec_iId        = nNIMXRegisterMap120_mBuildFieldId(tGenPwmPageSpec_i::kGenPwmNumPagesSpec_iId, kGenPwmPageSpec_i1Id),

      kGenPwmPageSpec_i2Id              = 8,
      kGenPwmPageSpec2GenPwmNumPagesSpec_iId        = nNIMXRegisterMap120_mBuildFieldId(tGenPwmPageSpec_i::kGenPwmNumPagesSpec_iId, kGenPwmPageSpec_i2Id),

      kGenPwmPageSpec_i3Id              = 9,
      kGenPwmPageSpec3GenPwmNumPagesSpec_iId        = nNIMXRegisterMap120_mBuildFieldId(tGenPwmPageSpec_i::kGenPwmNumPagesSpec_iId, kGenPwmPageSpec_i3Id),

      kGenPwmPageSpec_i4Id              = 10,
      kGenPwmPageSpec4GenPwmNumPagesSpec_iId        = nNIMXRegisterMap120_mBuildFieldId(tGenPwmPageSpec_i::kGenPwmNumPagesSpec_iId, kGenPwmPageSpec_i4Id),

      kGenPwmPageSpec_i5Id              = 11,
      kGenPwmPageSpec5GenPwmNumPagesSpec_iId        = nNIMXRegisterMap120_mBuildFieldId(tGenPwmPageSpec_i::kGenPwmNumPagesSpec_iId, kGenPwmPageSpec_i5Id),

      kGenPwmPageSpec_i6Id              = 12,
      kGenPwmPageSpec6GenPwmNumPagesSpec_iId        = nNIMXRegisterMap120_mBuildFieldId(tGenPwmPageSpec_i::kGenPwmNumPagesSpec_iId, kGenPwmPageSpec_i6Id),

      kGen_PWM_i0Id                     = 13,
      kPWM0Gen_PWM_i_Duty_CycleId       = nNIMXRegisterMap120_mBuildFieldId(tGen_PWM_i::kGen_PWM_i_Duty_CycleId, kGen_PWM_i0Id),

      kGen_PWM_i1Id                     = 14,
      kPWM1Gen_PWM_i_Duty_CycleId       = nNIMXRegisterMap120_mBuildFieldId(tGen_PWM_i::kGen_PWM_i_Duty_CycleId, kGen_PWM_i1Id),

      kGen_PWM_i2Id                     = 15,
      kPWM2Gen_PWM_i_Duty_CycleId       = nNIMXRegisterMap120_mBuildFieldId(tGen_PWM_i::kGen_PWM_i_Duty_CycleId, kGen_PWM_i2Id),

      kGen_PWM_i3Id                     = 16,
      kPWM3Gen_PWM_i_Duty_CycleId       = nNIMXRegisterMap120_mBuildFieldId(tGen_PWM_i::kGen_PWM_i_Duty_CycleId, kGen_PWM_i3Id),

      kGen_PWM_i4Id                     = 17,
      kPWM4Gen_PWM_i_Duty_CycleId       = nNIMXRegisterMap120_mBuildFieldId(tGen_PWM_i::kGen_PWM_i_Duty_CycleId, kGen_PWM_i4Id),

      kGen_PWM_i5Id                     = 18,
      kPWM5Gen_PWM_i_Duty_CycleId       = nNIMXRegisterMap120_mBuildFieldId(tGen_PWM_i::kGen_PWM_i_Duty_CycleId, kGen_PWM_i5Id),

      kGen_PWM_i6Id                     = 19,
      kPWM6Gen_PWM_i_Duty_CycleId       = nNIMXRegisterMap120_mBuildFieldId(tGen_PWM_i::kGen_PWM_i_Duty_CycleId, kGen_PWM_i6Id),

      kSCXI_Serial_Data_In_RegisterId   = 20,
      kSCXI_Data_InId                   = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Serial_Data_In_Register::kSCXI_Data_InId, kSCXI_Serial_Data_In_RegisterId),

      kSCXI_Serial_Data_Out_RegisterId  = 21,
      kSCXI_Data_OutId                  = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Serial_Data_Out_Register::kSCXI_Data_OutId, kSCXI_Serial_Data_Out_RegisterId),

      kSCXI_Control_RegisterId          = 22,
      kSCXI_SW_SPIClkId                 = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Control_Register::kSCXI_SW_SPIClkId, kSCXI_Control_RegisterId),
      kSCXI_Back_Plane_MISO_EnableId    = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Control_Register::kSCXI_Back_Plane_MISO_EnableId, kSCXI_Control_RegisterId),
      kSCXI_Front_Panel_MISO_EnableId   = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Control_Register::kSCXI_Front_Panel_MISO_EnableId, kSCXI_Control_RegisterId),
      kSCXI_IntrId                      = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Control_Register::kSCXI_IntrId, kSCXI_Control_RegisterId),
      kSCXI_D_AId                       = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Control_Register::kSCXI_D_AId, kSCXI_Control_RegisterId),
      kSCXI_HW_Serial_TimebaseId        = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Control_Register::kSCXI_HW_Serial_TimebaseId, kSCXI_Control_RegisterId),
      kSCXI_HW_Serial_StartId           = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Control_Register::kSCXI_HW_Serial_StartId, kSCXI_Control_RegisterId),
      kSCXI_HW_Serial_EnableId          = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Control_Register::kSCXI_HW_Serial_EnableId, kSCXI_Control_RegisterId),

      kSCXI_Output_Enable_RegisterId    = 23,
      kSCXI_Dedicated_Output_EnableId   = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Output_Enable_Register::kSCXI_Dedicated_Output_EnableId, kSCXI_Output_Enable_RegisterId),
      kSCXI_Trig1_Output_EnableId       = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Output_Enable_Register::kSCXI_Trig1_Output_EnableId, kSCXI_Output_Enable_RegisterId),
      kSCXI_Trig0_Output_EnableId       = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Output_Enable_Register::kSCXI_Trig0_Output_EnableId, kSCXI_Output_Enable_RegisterId),
      kSCXI_Trig1_Output_SelectId       = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Output_Enable_Register::kSCXI_Trig1_Output_SelectId, kSCXI_Output_Enable_RegisterId),

      kSCXI_Status_RegisterId           = 24,
      kSCXI_Shift_In_ProgId             = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Status_Register::kSCXI_Shift_In_ProgId, kSCXI_Status_RegisterId),

      kSCXI_Mux_Clock_RegisterId        = 25,
      kSCXI_Force_AI_EXTMUX_CLK_WidthId   = nNIMXRegisterMap120_mBuildFieldId(tSCXI_Mux_Clock_Register::kSCXI_Force_AI_EXTMUX_CLK_WidthId, kSCXI_Mux_Clock_RegisterId),

      kWatchdogStatusRegisterId         = 26,
      kWatchdogSM_StateId               = nNIMXRegisterMap120_mBuildFieldId(tWatchdogStatusRegister::kWatchdogSM_StateId, kWatchdogStatusRegisterId),
      kWatchdogExpiredCntId             = nNIMXRegisterMap120_mBuildFieldId(tWatchdogStatusRegister::kWatchdogExpiredCntId, kWatchdogStatusRegisterId),

      kWatchdogTimeoutRegisterId        = 27,
      kWatchdogTimeoutValueId           = nNIMXRegisterMap120_mBuildFieldId(tWatchdogTimeoutRegister::kWatchdogTimeoutValueId, kWatchdogTimeoutRegisterId),

      kWatchdogConfigurationId          = 28,
      kWatchdogExtTrigSelId             = nNIMXRegisterMap120_mBuildFieldId(tWatchdogConfiguration::kWatchdogExtTrigSelId, kWatchdogConfigurationId),
      kWatchdogExtTrigPolId             = nNIMXRegisterMap120_mBuildFieldId(tWatchdogConfiguration::kWatchdogExtTrigPolId, kWatchdogConfigurationId),
      kWatchdogExtTrigEnId              = nNIMXRegisterMap120_mBuildFieldId(tWatchdogConfiguration::kWatchdogExtTrigEnId, kWatchdogConfigurationId),
      kWatchdogIntTrigEnId              = nNIMXRegisterMap120_mBuildFieldId(tWatchdogConfiguration::kWatchdogIntTrigEnId, kWatchdogConfigurationId),

      kWatchdogControlId                = 29,
      kWatchdogCommandId                = nNIMXRegisterMap120_mBuildFieldId(tWatchdogControl::kWatchdogCommandId, kWatchdogControlId),


      kMaxRegisterId = 29

   } tId;

   tBrdServices(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   tBrdServices();
   void initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tBrdServices();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline tBoolean isDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(tId id, nMDBG::tStatus2* statusChain = NULL);

   inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(nMDBG::tStatus2* statusChain = NULL);

private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   u32 _addressOffset;
   u8 _dirtyVector[30];

};

#ifndef ___tBrdServices_ipp___
#ifndef ___tBrdServices_h_no_inline___
#include "tBrdServices.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

