// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tBrdServicesValues_h___
#define ___tBrdServicesValues_h___

namespace nBrdServices {
   typedef enum {
      kSTC3_RevBSignature                = 134546689,
      kSTC3_RevASignature                = 134546697,
   } tSTC3_Signature_t;

   typedef enum {
      kAI_ExtMux_Clk_250ns               = 0,
      kAI_ExtMux_Clk_500ns               = 1,
   } tBrdSrv_SCXI_Force_AI_EXTMUX_CLK_Width_t;

   typedef enum {
      kScxiSrc_100kHz                    = 0,
      kScxiSrc_FastTB                    = 1,
   } tBrdSrv_SCXI_HW_Serial_Timebase_t;

   typedef enum {
      kScxiTrig1_Out_PFI0                = 0,
      kScxiTrig1_Out_PFI1                = 1,
      kScxiTrig1_Out_PFI2                = 2,
      kScxiTrig1_Out_PFI3                = 3,
      kScxiTrig1_Out_PFI4                = 4,
      kScxiTrig1_Out_PFI5                = 5,
      kScxiTrig1_Out_PFI6                = 6,
      kScxiTrig1_Out_PFI7                = 7,
      kScxiTrig1_Out_PFI8                = 8,
      kScxiTrig1_Out_PFI9                = 9,
      kScxiTrig1_Out_PFI10               = 10,
      kScxiTrig1_Out_PFI11               = 11,
      kScxiTrig1_Out_PFI12               = 12,
      kScxiTrig1_Out_PFI13               = 13,
      kScxiTrig1_Out_PFI14               = 14,
      kScxiTrig1_Out_PFI15               = 15,
      kScxiTrig1_Out_RTSI0               = 16,
      kScxiTrig1_Out_RTSI1               = 17,
      kScxiTrig1_Out_RTSI2               = 18,
      kScxiTrig1_Out_RTSI3               = 19,
      kScxiTrig1_Out_RTSI4               = 20,
      kScxiTrig1_Out_RTSI5               = 21,
      kScxiTrig1_Out_RTSI6               = 22,
      kScxiTrig1_Out_RTSI7               = 23,
      kScxiTrig1_Out_AI_Start            = 24,
      kScxiTrig1_Out_Low                 = 31,
   } tBrdSrv_SCXI_Trig1_Output_Select_t;

   typedef enum {
      kWdtSrc_RTSI0                      = 0,
      kWdtSrc_RTSI1                      = 1,
      kWdtSrc_RTSI2                      = 2,
      kWdtSrc_RTSI3                      = 3,
      kWdtSrc_RTSI4                      = 4,
      kWdtSrc_RTSI5                      = 5,
      kWdtSrc_RTSI6                      = 6,
      kWdtSrc_RTSI7                      = 7,
   } tBrdSrv_WatchdogTimerExtSrcSel_t;

   typedef enum {
      kWdtSt_SynchReset                  = 0,
      kWdtSt_CountDownFeed               = 1,
      kWdtSt_CountDownFood               = 2,
      kWdtSt_Sleeping                    = 3,
      kWdtSt_ExpiredPulse                = 5,
      kWdtSt_Expired                     = 6,
   } tBrdSrv_WatchdogTimerStateMachineSt_t;

   namespace nGen_Interrupt1_Register {
      namespace nWDT_TriggerIRQ_Enable {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nPLL_OutOfLockIRQ_Enable {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nWDT_TriggerIRQ_Ack {
         enum {
            kMask = 0x10000,
            kOffset = 0x10,
         };
      }

      namespace nPLL_OutOfLockIRQ_Ack {
         enum {
            kMask = 0x20000,
            kOffset = 0x11,
         };
      }

   }

   namespace nGen_Interrupt2_Register {
      namespace nWDT_TriggerIRQ_Disable {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nPLL_OutOfLockIRQ_Disable {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nWDT_TriggerIRQ_Ack2 {
         enum {
            kMask = 0x10000,
            kOffset = 0x10,
         };
      }

      namespace nPLL_OutOfLockIRQ_Ack2 {
         enum {
            kMask = 0x20000,
            kOffset = 0x11,
         };
      }

   }

   namespace nScratchPadRegister {
      namespace nScratch_Pad {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nSignature_Register {
      namespace nSTC3_Revision {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nJoint_Reset_Register {
      namespace nSoftware_Reset {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

   }

   namespace nTimeSincePowerUpRegister {
      namespace nTimeSincePowerUpValue {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGenPwmPageSpec_i {
      namespace nGenPwmNumPagesSpec_i {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   namespace nGen_PWM_i {
      namespace nGen_PWM_i_Duty_Cycle {
         enum {
            kMask = 0xffff,
            kOffset = 0,
         };
      }

   }

   namespace nSCXI_Serial_Data_In_Register {
      namespace nSCXI_Data_In {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   namespace nSCXI_Serial_Data_Out_Register {
      namespace nSCXI_Data_Out {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   namespace nSCXI_Control_Register {
      namespace nSCXI_SW_SPIClk {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nSCXI_Back_Plane_MISO_Enable {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nSCXI_Front_Panel_MISO_Enable {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nSCXI_Intr {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nSCXI_D_A {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nSCXI_HW_Serial_Timebase {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nSCXI_HW_Serial_Start {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nSCXI_HW_Serial_Enable {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

   }

   namespace nSCXI_Output_Enable_Register {
      namespace nSCXI_Dedicated_Output_Enable {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nSCXI_Trig1_Output_Enable {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nSCXI_Trig0_Output_Enable {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nSCXI_Trig1_Output_Select {
         enum {
            kMask = 0xf8,
            kOffset = 0x3,
         };
      }

   }

   namespace nSCXI_Status_Register {
      namespace nSCXI_Shift_In_Prog {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

   }

   namespace nSCXI_Mux_Clock_Register {
      namespace nSCXI_Force_AI_EXTMUX_CLK_Width {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

   }

   namespace nWatchdogStatusRegister {
      namespace nWatchdogSM_State {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nWatchdogExpiredCnt {
         enum {
            kMask = 0xff00,
            kOffset = 0x8,
         };
      }

   }

   namespace nWatchdogTimeoutRegister {
      namespace nWatchdogTimeoutValue {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nWatchdogConfiguration {
      namespace nWatchdogExtTrigSel {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nWatchdogExtTrigPol {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nWatchdogExtTrigEn {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nWatchdogIntTrigEn {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

   }

   namespace nWatchdogControl {
      namespace nWatchdogCommand {
         enum {
            kMask = 0xffff,
            kOffset = 0,
         };
      }

   }

   using namespace nGen_Interrupt1_Register;
   using namespace nGen_Interrupt2_Register;
   using namespace nScratchPadRegister;
   using namespace nSignature_Register;
   using namespace nJoint_Reset_Register;
   using namespace nTimeSincePowerUpRegister;
   using namespace nGenPwmPageSpec_i;
   using namespace nGen_PWM_i;
   using namespace nSCXI_Serial_Data_In_Register;
   using namespace nSCXI_Serial_Data_Out_Register;
   using namespace nSCXI_Control_Register;
   using namespace nSCXI_Output_Enable_Register;
   using namespace nSCXI_Status_Register;
   using namespace nSCXI_Mux_Clock_Register;
   using namespace nWatchdogStatusRegister;
   using namespace nWatchdogTimeoutRegister;
   using namespace nWatchdogConfiguration;
   using namespace nWatchdogControl;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

