// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tBusInterface_h___
#define ___tBusInterface_h___

// includes
#include "osiTypes.h"
#include "osiBus.h"
#include "tBusInterfaceValues.h"


#ifndef ___tBusInterfaceValues_h___
#include "tBusInterfaceValues.h"
#endif

#ifndef nNIMXRegisterMap120_mBuildFieldId

// Algorithm:
//    Move lowermost 5 bits (4 through 0) of field id to uppermost 5 bits (31
//          through 27)
//    Move bit 5 of field id to bit 26
//    Move bit 6 of field id to bit 25
//    OR in the register id (which is allowed the remaining bits)
//
// Why not move the lowermost 7 bits directly to the uppermost 7 bits? Because
// we originally moved only the lowermost 5, and for backwards compatibility,
// we can't change where those 5 bits end up.
//
// For future expansion purposes, the bits beyond the first 5 are put in reverse
// order in the resulting combined id.
#define nNIMXRegisterMap120_mBuildFieldId(fieldId, regId) \
   ( \
     ((fieldId) << 27) | \
     ((((fieldId) >> 5) & 0x1) << 26) | \
     ((((fieldId) >> 6) & 0x1) << 25) | \
     (regId) \
   )

#endif

#ifndef nNIMXRegisterMap120_mExtractFieldId

// Algorithm: (basically the reverse of mBuildFieldId)
//    Move uppermost 5 bits (31 through 27) to lowermost 5 bits (4 through 0)
//    Move 26th bit to bit 5 (right-shifting by (26 - 5) is like right-shifting
//          by 26 then left-shifting by 5, but it's more efficient)
//    Move 25th bit to bit 6
#define nNIMXRegisterMap120_mExtractFieldId(id) \
   (unsigned int) \
   ( \
     (((id) >> 27) & 0x1F) | \
     (((id) & (0x1 << 26)) >> (26 - 5)) | \
     (((id) & (0x1 << 25)) >> (25 - 6)) \
   )

#endif

class tBusInterface
{
public:
   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg16IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u16 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u16 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   //---------------------------------------------------------------------------
   // GlobalInterruptStatus_Register
   //---------------------------------------------------------------------------
   class tGlobalInterruptStatus_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBusInterface tRegisterMap;

      enum {
         kOffset = 0x70,
         kId     = 0
      };
      tGlobalInterruptStatus_Register();


      typedef enum {
         kRegisterId                          = 0,
         kAI_Interrupt_StatusId            = 1,
         kAO_Interrupt_StatusId            = 2,
         kG0_Interrupt_StatusId            = 3,
         kG1_Interrupt_StatusId            = 4,
         kG2_Interrupt_StatusId            = 5,
         kG3_Interrupt_StatusId            = 6,
         kDI_Interrupt_StatusId            = 7,
         kDO_Interrupt_StatusId            = 8,
         kGen_Interrupt_StatusId           = 11,
         kMaxFieldId                          = 11
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tGlobalInterruptStatus_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tGlobalInterruptStatus_Register& setAI_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      inline tGlobalInterruptStatus_Register& setAO_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAO_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAO_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      inline tGlobalInterruptStatus_Register& setG0_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      inline tGlobalInterruptStatus_Register& setG1_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      inline tGlobalInterruptStatus_Register& setG2_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG2_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG2_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      inline tGlobalInterruptStatus_Register& setG3_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG3_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG3_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      inline tGlobalInterruptStatus_Register& setDI_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      inline tGlobalInterruptStatus_Register& setDO_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDO_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDO_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      inline tGlobalInterruptStatus_Register& setGen_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getGen_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readGen_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tGlobalInterruptStatus_Register(const tGlobalInterruptStatus_Register&);
      tGlobalInterruptStatus_Register& operator=(const tGlobalInterruptStatus_Register&);

   };

   //---------------------------------------------------------------------------
   // AI_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   class tAI_Interrupt_Status_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBusInterface tRegisterMap;

      enum {
         kOffset = 0x72,
         kId     = 1
      };
      tAI_Interrupt_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kAI_OverflowIrqStId               = 2,
         kAI_SC_PreWaitRollOverStId        = 3,
         kAI_ScanOverrunIrqStId            = 4,
         kAI_SC_TC_IrqStId                 = 5,
         kAI_Start1IrqStId                 = 6,
         kAI_Start2IrqStId                 = 7,
         kAI_StartIrqStId                  = 8,
         kAI_StopIrqStId                   = 9,
         kAI_OverrunIrqStId                = 10,
         kAI_FifoIrqStId                   = 11,
         kMaxFieldId                          = 11
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tAI_Interrupt_Status_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tAI_Interrupt_Status_Register& setAI_OverflowIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_OverflowIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_OverflowIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAI_Interrupt_Status_Register& setAI_SC_PreWaitRollOverSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_SC_PreWaitRollOverSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_SC_PreWaitRollOverSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAI_Interrupt_Status_Register& setAI_ScanOverrunIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_ScanOverrunIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_ScanOverrunIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAI_Interrupt_Status_Register& setAI_SC_TC_IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_SC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_SC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAI_Interrupt_Status_Register& setAI_Start1IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_Start1IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_Start1IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAI_Interrupt_Status_Register& setAI_Start2IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_Start2IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_Start2IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAI_Interrupt_Status_Register& setAI_StartIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_StartIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_StartIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAI_Interrupt_Status_Register& setAI_StopIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_StopIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_StopIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAI_Interrupt_Status_Register& setAI_OverrunIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_OverrunIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_OverrunIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAI_Interrupt_Status_Register& setAI_FifoIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAI_FifoIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAI_FifoIrqSt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tAI_Interrupt_Status_Register(const tAI_Interrupt_Status_Register&);
      tAI_Interrupt_Status_Register& operator=(const tAI_Interrupt_Status_Register&);

   };

   //---------------------------------------------------------------------------
   // AO_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   class tAO_Interrupt_Status_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBusInterface tRegisterMap;

      enum {
         kOffset = 0x74,
         kId     = 2
      };
      tAO_Interrupt_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kAO_WriteTooFastIrqStId           = 2,
         kAO_BC_TC_IrqStId                 = 3,
         kAO_Start1IrqStId                 = 4,
         kAO_UpdateIrqStId                 = 5,
         kAO_ErrorIrqStId                  = 6,
         kAO_UC_TC_IrqStId                 = 7,
         kAO_FifoIrqStId                   = 8,
         kMaxFieldId                          = 8
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tAO_Interrupt_Status_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tAO_Interrupt_Status_Register& setAO_WriteTooFastIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAO_WriteTooFastIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAO_WriteTooFastIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAO_Interrupt_Status_Register& setAO_BC_TC_IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAO_BC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAO_BC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAO_Interrupt_Status_Register& setAO_Start1IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAO_Start1IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAO_Start1IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAO_Interrupt_Status_Register& setAO_UpdateIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAO_UpdateIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAO_UpdateIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAO_Interrupt_Status_Register& setAO_ErrorIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAO_ErrorIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAO_ErrorIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAO_Interrupt_Status_Register& setAO_UC_TC_IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAO_UC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAO_UC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tAO_Interrupt_Status_Register& setAO_FifoIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAO_FifoIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAO_FifoIrqSt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tAO_Interrupt_Status_Register(const tAO_Interrupt_Status_Register&);
      tAO_Interrupt_Status_Register& operator=(const tAO_Interrupt_Status_Register&);

   };

   //---------------------------------------------------------------------------
   // TIO_Interrupt_Status_Register_t
   //---------------------------------------------------------------------------
   class tTIO_Interrupt_Status_Register_t : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBusInterface tRegisterMap;

      const u32 kOffset;
      const u32 kId;

      tTIO_Interrupt_Status_Register_t(u32 offset, u32 id);
      tTIO_Interrupt_Status_Register_t();
      void initialize(u32 offset, u32 id);


      typedef enum {
         kRegisterId                          = 0,
         kTIO_DmaIrqStId                   = 1,
         kTIO_GateIrqStId                  = 2,
         kTIO_TC_IrqStId                   = 3,
         kTIO_SampleClkErrorStId           = 4,
         kTIO_GateErrorIrqStId             = 5,
         kTIO_TC_ErrorIrqStId              = 6,
         kTIO_DMA_ErrorIrqStId             = 7,
         kTIO_WritesTooFastId              = 8,
         kTIO_GateSwitchErrorIrqStId       = 9,
         kSampleClockIrqStId               = 10,
         kDisarmEventIrqStId               = 11,
         kAuxCtrTC_IrqStId                 = 12,
         kAuxCtrTC_ErrorIrqStId            = 13,
         kMaxFieldId                          = 13
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tTIO_Interrupt_Status_Register_t& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tTIO_Interrupt_Status_Register_t& setTIO_DmaIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTIO_DmaIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readTIO_DmaIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setTIO_GateIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTIO_GateIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readTIO_GateIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setTIO_TC_IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTIO_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readTIO_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setTIO_SampleClkErrorSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTIO_SampleClkErrorSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readTIO_SampleClkErrorSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setTIO_GateErrorIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTIO_GateErrorIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readTIO_GateErrorIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setTIO_TC_ErrorIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTIO_TC_ErrorIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readTIO_TC_ErrorIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setTIO_DMA_ErrorIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTIO_DMA_ErrorIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readTIO_DMA_ErrorIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setTIO_WritesTooFast(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTIO_WritesTooFast(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readTIO_WritesTooFast(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setTIO_GateSwitchErrorIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTIO_GateSwitchErrorIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readTIO_GateSwitchErrorIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setSampleClockIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getSampleClockIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readSampleClockIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setDisarmEventIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDisarmEventIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDisarmEventIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setAuxCtrTC_IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAuxCtrTC_IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAuxCtrTC_IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tTIO_Interrupt_Status_Register_t& setAuxCtrTC_ErrorIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAuxCtrTC_ErrorIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readAuxCtrTC_ErrorIrqSt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tTIO_Interrupt_Status_Register_t(const tTIO_Interrupt_Status_Register_t&);
      tTIO_Interrupt_Status_Register_t& operator=(const tTIO_Interrupt_Status_Register_t&);

   };

   //---------------------------------------------------------------------------
   // GlobalInterruptEnable_Register
   //---------------------------------------------------------------------------
   class tGlobalInterruptEnable_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tBusInterface tRegisterMap;

      enum {
         kOffset = 0x78,
         kId     = 7
      };
      tGlobalInterruptEnable_Register();


      typedef enum {
         kRegisterId                          = 0,
         kAI_Interrupt_EnableId            = 1,
         kAO_Interrupt_EnableId            = 2,
         kG0_Interrupt_EnableId            = 3,
         kG1_Interrupt_EnableId            = 4,
         kG2_Interrupt_EnableId            = 5,
         kG3_Interrupt_EnableId            = 6,
         kDI_Interrupt_EnableId            = 7,
         kDO_Interrupt_EnableId            = 8,
         kGen_Interrupt_EnableId           = 11,
         kAI_Interrupt_DisableId           = 13,
         kAO_Interrupt_DisableId           = 14,
         kG0_Interrupt_DisableId           = 15,
         kG1_Interrupt_DisableId           = 16,
         kG2_Interrupt_DisableId           = 17,
         kG3_Interrupt_DisableId           = 18,
         kDI_Interrupt_DisableId           = 19,
         kDO_Interrupt_DisableId           = 20,
         kGen_Interrupt_DisableId          = 23,
         kMaxFieldId                          = 23
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeAI_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeAO_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeG0_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeG1_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeG2_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeG3_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeDI_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeDO_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeGen_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeAI_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeAO_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeG0_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeG1_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeG2_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeG3_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeDI_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeDO_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeGen_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tGlobalInterruptEnable_Register(const tGlobalInterruptEnable_Register&);
      tGlobalInterruptEnable_Register& operator=(const tGlobalInterruptEnable_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   class tDI_Interrupt_Status_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBusInterface tRegisterMap;

      enum {
         kOffset = 0x7e,
         kId     = 8
      };
      tDI_Interrupt_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_ChangeDetectionIrqStId        = 1,
         kDI_ChangeDetectionErrorIrqStId   = 2,
         kDI_OverflowIrqStId               = 4,
         kDI_SC_PreWaitRollOverStId        = 5,
         kDI_ScanOverrunIrqStId            = 6,
         kDI_SC_TC_IrqStId                 = 7,
         kDI_Start1IrqStId                 = 8,
         kDI_Start2IrqStId                 = 9,
         kDI_StartIrqStId                  = 10,
         kDI_StopIrqStId                   = 11,
         kDI_OverrunIrqStId                = 12,
         kDI_FifoIrqStId                   = 13,
         kMaxFieldId                          = 13
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDI_Interrupt_Status_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_Interrupt_Status_Register& setDI_ChangeDetectionIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_ChangeDetectionIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_ChangeDetectionIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_ChangeDetectionErrorIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_ChangeDetectionErrorIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_ChangeDetectionErrorIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_OverflowIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_OverflowIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_OverflowIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_SC_PreWaitRollOverSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_SC_PreWaitRollOverSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_SC_PreWaitRollOverSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_ScanOverrunIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_ScanOverrunIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_ScanOverrunIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_SC_TC_IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_SC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_SC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_Start1IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_Start1IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_Start1IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_Start2IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_Start2IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_Start2IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_StartIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_StartIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_StartIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_StopIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_StopIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_StopIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_OverrunIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_OverrunIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_OverrunIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setDI_FifoIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_FifoIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_FifoIrqSt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_Interrupt_Status_Register(const tDI_Interrupt_Status_Register&);
      tDI_Interrupt_Status_Register& operator=(const tDI_Interrupt_Status_Register&);

   };

   //---------------------------------------------------------------------------
   // DO_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   class tDO_Interrupt_Status_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBusInterface tRegisterMap;

      enum {
         kOffset = 0x80,
         kId     = 9
      };
      tDO_Interrupt_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDO_WriteTooFastIrqStId           = 2,
         kDO_BC_TC_IrqStId                 = 3,
         kDO_Start1IrqStId                 = 4,
         kDO_UpdateIrqStId                 = 5,
         kDO_ErrorIrqStId                  = 6,
         kDO_UC_TC_IrqStId                 = 7,
         kDO_FifoIrqStId                   = 8,
         kMaxFieldId                          = 8
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDO_Interrupt_Status_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_Interrupt_Status_Register& setDO_WriteTooFastIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDO_WriteTooFastIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDO_WriteTooFastIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Interrupt_Status_Register& setDO_BC_TC_IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDO_BC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDO_BC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Interrupt_Status_Register& setDO_Start1IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDO_Start1IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDO_Start1IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Interrupt_Status_Register& setDO_UpdateIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDO_UpdateIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDO_UpdateIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Interrupt_Status_Register& setDO_ErrorIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDO_ErrorIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDO_ErrorIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Interrupt_Status_Register& setDO_UC_TC_IrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDO_UC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDO_UC_TC_IrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Interrupt_Status_Register& setDO_FifoIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDO_FifoIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDO_FifoIrqSt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_Interrupt_Status_Register(const tDO_Interrupt_Status_Register&);
      tDO_Interrupt_Status_Register& operator=(const tDO_Interrupt_Status_Register&);

   };

   //---------------------------------------------------------------------------
   // Gen_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   class tGen_Interrupt_Status_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tBusInterface tRegisterMap;

      enum {
         kOffset = 0x86,
         kId     = 10
      };
      tGen_Interrupt_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kWatchdogTimerTriggerStId         = 1,
         kPLL_OutOfLockEventStId           = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tGen_Interrupt_Status_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tGen_Interrupt_Status_Register& setWatchdogTimerTriggerSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getWatchdogTimerTriggerSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readWatchdogTimerTriggerSt(nMDBG::tStatus2* statusChain = NULL);

      inline tGen_Interrupt_Status_Register& setPLL_OutOfLockEventSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPLL_OutOfLockEventSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPLL_OutOfLockEventSt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tGen_Interrupt_Status_Register(const tGen_Interrupt_Status_Register&);
      tGen_Interrupt_Status_Register& operator=(const tGen_Interrupt_Status_Register&);

   };

   //----------------------------------------
   // Register Array Sizes
   //----------------------------------------
   enum {
      kTIO_Interrupt_Status_RegisterArraySize = 4
   };

   //---------------------------------------------------------------------------
   // GlobalInterruptStatus_Register
   //---------------------------------------------------------------------------
   tGlobalInterruptStatus_Register GlobalInterruptStatus_Register;

   //---------------------------------------------------------------------------
   // AI_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   tAI_Interrupt_Status_Register AI_Interrupt_Status_Register;

   //---------------------------------------------------------------------------
   // AO_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   tAO_Interrupt_Status_Register AO_Interrupt_Status_Register;

   //---------------------------------------------------------------------------
   // TIO_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   tTIO_Interrupt_Status_Register_t TIO_Interrupt_Status_Register[kTIO_Interrupt_Status_RegisterArraySize];

   //---------------------------------------------------------------------------
   // GlobalInterruptEnable_Register
   //---------------------------------------------------------------------------
   tGlobalInterruptEnable_Register GlobalInterruptEnable_Register;

   //---------------------------------------------------------------------------
   // DI_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   tDI_Interrupt_Status_Register DI_Interrupt_Status_Register;

   //---------------------------------------------------------------------------
   // DO_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   tDO_Interrupt_Status_Register DO_Interrupt_Status_Register;

   //---------------------------------------------------------------------------
   // Gen_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   tGen_Interrupt_Status_Register Gen_Interrupt_Status_Register;

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kGlobalInterruptStatus_RegisterId   = 0,
      kAI_Interrupt_StatusId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kAI_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),
      kAO_Interrupt_StatusId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kAO_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),
      kG0_Interrupt_StatusId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kG0_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),
      kG1_Interrupt_StatusId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kG1_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),
      kG2_Interrupt_StatusId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kG2_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),
      kG3_Interrupt_StatusId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kG3_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),
      kDI_Interrupt_StatusId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kDI_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),
      kDO_Interrupt_StatusId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kDO_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),
      kGen_Interrupt_StatusId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kGen_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),

      kAI_Interrupt_Status_RegisterId   = 1,
      kAI_OverflowIrqStId               = nNIMXRegisterMap120_mBuildFieldId(tAI_Interrupt_Status_Register::kAI_OverflowIrqStId, kAI_Interrupt_Status_RegisterId),
      kAI_SC_PreWaitRollOverStId        = nNIMXRegisterMap120_mBuildFieldId(tAI_Interrupt_Status_Register::kAI_SC_PreWaitRollOverStId, kAI_Interrupt_Status_RegisterId),
      kAI_ScanOverrunIrqStId            = nNIMXRegisterMap120_mBuildFieldId(tAI_Interrupt_Status_Register::kAI_ScanOverrunIrqStId, kAI_Interrupt_Status_RegisterId),
      kAI_SC_TC_IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tAI_Interrupt_Status_Register::kAI_SC_TC_IrqStId, kAI_Interrupt_Status_RegisterId),
      kAI_Start1IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tAI_Interrupt_Status_Register::kAI_Start1IrqStId, kAI_Interrupt_Status_RegisterId),
      kAI_Start2IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tAI_Interrupt_Status_Register::kAI_Start2IrqStId, kAI_Interrupt_Status_RegisterId),
      kAI_StartIrqStId                  = nNIMXRegisterMap120_mBuildFieldId(tAI_Interrupt_Status_Register::kAI_StartIrqStId, kAI_Interrupt_Status_RegisterId),
      kAI_StopIrqStId                   = nNIMXRegisterMap120_mBuildFieldId(tAI_Interrupt_Status_Register::kAI_StopIrqStId, kAI_Interrupt_Status_RegisterId),
      kAI_OverrunIrqStId                = nNIMXRegisterMap120_mBuildFieldId(tAI_Interrupt_Status_Register::kAI_OverrunIrqStId, kAI_Interrupt_Status_RegisterId),
      kAI_FifoIrqStId                   = nNIMXRegisterMap120_mBuildFieldId(tAI_Interrupt_Status_Register::kAI_FifoIrqStId, kAI_Interrupt_Status_RegisterId),

      kAO_Interrupt_Status_RegisterId   = 2,
      kAO_WriteTooFastIrqStId           = nNIMXRegisterMap120_mBuildFieldId(tAO_Interrupt_Status_Register::kAO_WriteTooFastIrqStId, kAO_Interrupt_Status_RegisterId),
      kAO_BC_TC_IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tAO_Interrupt_Status_Register::kAO_BC_TC_IrqStId, kAO_Interrupt_Status_RegisterId),
      kAO_Start1IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tAO_Interrupt_Status_Register::kAO_Start1IrqStId, kAO_Interrupt_Status_RegisterId),
      kAO_UpdateIrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tAO_Interrupt_Status_Register::kAO_UpdateIrqStId, kAO_Interrupt_Status_RegisterId),
      kAO_ErrorIrqStId                  = nNIMXRegisterMap120_mBuildFieldId(tAO_Interrupt_Status_Register::kAO_ErrorIrqStId, kAO_Interrupt_Status_RegisterId),
      kAO_UC_TC_IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tAO_Interrupt_Status_Register::kAO_UC_TC_IrqStId, kAO_Interrupt_Status_RegisterId),
      kAO_FifoIrqStId                   = nNIMXRegisterMap120_mBuildFieldId(tAO_Interrupt_Status_Register::kAO_FifoIrqStId, kAO_Interrupt_Status_RegisterId),

      kTIO_Interrupt_Status_Register0Id   = 3,
      kCounter0TIO_DmaIrqStId           = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_DmaIrqStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0TIO_GateIrqStId          = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateIrqStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0TIO_TC_IrqStId           = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_TC_IrqStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0TIO_SampleClkErrorStId   = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_SampleClkErrorStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0TIO_GateErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateErrorIrqStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0TIO_TC_ErrorIrqStId      = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_TC_ErrorIrqStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0TIO_DMA_ErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_DMA_ErrorIrqStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0TIO_WritesTooFastId      = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_WritesTooFastId, kTIO_Interrupt_Status_Register0Id),
      kCounter0TIO_GateSwitchErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateSwitchErrorIrqStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0SampleClockIrqStId       = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kSampleClockIrqStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0DisarmEventIrqStId       = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kDisarmEventIrqStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0AuxCtrTC_IrqStId         = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kAuxCtrTC_IrqStId, kTIO_Interrupt_Status_Register0Id),
      kCounter0AuxCtrTC_ErrorIrqStId    = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kAuxCtrTC_ErrorIrqStId, kTIO_Interrupt_Status_Register0Id),

      kTIO_Interrupt_Status_Register1Id   = 4,
      kCounter1TIO_DmaIrqStId           = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_DmaIrqStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1TIO_GateIrqStId          = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateIrqStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1TIO_TC_IrqStId           = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_TC_IrqStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1TIO_SampleClkErrorStId   = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_SampleClkErrorStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1TIO_GateErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateErrorIrqStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1TIO_TC_ErrorIrqStId      = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_TC_ErrorIrqStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1TIO_DMA_ErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_DMA_ErrorIrqStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1TIO_WritesTooFastId      = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_WritesTooFastId, kTIO_Interrupt_Status_Register1Id),
      kCounter1TIO_GateSwitchErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateSwitchErrorIrqStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1SampleClockIrqStId       = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kSampleClockIrqStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1DisarmEventIrqStId       = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kDisarmEventIrqStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1AuxCtrTC_IrqStId         = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kAuxCtrTC_IrqStId, kTIO_Interrupt_Status_Register1Id),
      kCounter1AuxCtrTC_ErrorIrqStId    = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kAuxCtrTC_ErrorIrqStId, kTIO_Interrupt_Status_Register1Id),

      kTIO_Interrupt_Status_Register2Id   = 5,
      kCounter2TIO_DmaIrqStId           = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_DmaIrqStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2TIO_GateIrqStId          = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateIrqStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2TIO_TC_IrqStId           = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_TC_IrqStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2TIO_SampleClkErrorStId   = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_SampleClkErrorStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2TIO_GateErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateErrorIrqStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2TIO_TC_ErrorIrqStId      = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_TC_ErrorIrqStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2TIO_DMA_ErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_DMA_ErrorIrqStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2TIO_WritesTooFastId      = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_WritesTooFastId, kTIO_Interrupt_Status_Register2Id),
      kCounter2TIO_GateSwitchErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateSwitchErrorIrqStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2SampleClockIrqStId       = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kSampleClockIrqStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2DisarmEventIrqStId       = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kDisarmEventIrqStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2AuxCtrTC_IrqStId         = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kAuxCtrTC_IrqStId, kTIO_Interrupt_Status_Register2Id),
      kCounter2AuxCtrTC_ErrorIrqStId    = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kAuxCtrTC_ErrorIrqStId, kTIO_Interrupt_Status_Register2Id),

      kTIO_Interrupt_Status_Register3Id   = 6,
      kCounter3TIO_DmaIrqStId           = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_DmaIrqStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3TIO_GateIrqStId          = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateIrqStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3TIO_TC_IrqStId           = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_TC_IrqStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3TIO_SampleClkErrorStId   = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_SampleClkErrorStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3TIO_GateErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateErrorIrqStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3TIO_TC_ErrorIrqStId      = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_TC_ErrorIrqStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3TIO_DMA_ErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_DMA_ErrorIrqStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3TIO_WritesTooFastId      = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_WritesTooFastId, kTIO_Interrupt_Status_Register3Id),
      kCounter3TIO_GateSwitchErrorIrqStId     = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kTIO_GateSwitchErrorIrqStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3SampleClockIrqStId       = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kSampleClockIrqStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3DisarmEventIrqStId       = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kDisarmEventIrqStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3AuxCtrTC_IrqStId         = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kAuxCtrTC_IrqStId, kTIO_Interrupt_Status_Register3Id),
      kCounter3AuxCtrTC_ErrorIrqStId    = nNIMXRegisterMap120_mBuildFieldId(tTIO_Interrupt_Status_Register_t::kAuxCtrTC_ErrorIrqStId, kTIO_Interrupt_Status_Register3Id),

      kGlobalInterruptEnable_RegisterId   = 7,
      kAI_Interrupt_EnableId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kAI_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kAO_Interrupt_EnableId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kAO_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kG0_Interrupt_EnableId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kG0_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kG1_Interrupt_EnableId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kG1_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kG2_Interrupt_EnableId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kG2_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kG3_Interrupt_EnableId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kG3_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kDI_Interrupt_EnableId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kDI_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kDO_Interrupt_EnableId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kDO_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kGen_Interrupt_EnableId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kGen_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kAI_Interrupt_DisableId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kAI_Interrupt_DisableId, kGlobalInterruptEnable_RegisterId),
      kAO_Interrupt_DisableId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kAO_Interrupt_DisableId, kGlobalInterruptEnable_RegisterId),
      kG0_Interrupt_DisableId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kG0_Interrupt_DisableId, kGlobalInterruptEnable_RegisterId),
      kG1_Interrupt_DisableId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kG1_Interrupt_DisableId, kGlobalInterruptEnable_RegisterId),
      kG2_Interrupt_DisableId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kG2_Interrupt_DisableId, kGlobalInterruptEnable_RegisterId),
      kG3_Interrupt_DisableId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kG3_Interrupt_DisableId, kGlobalInterruptEnable_RegisterId),
      kDI_Interrupt_DisableId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kDI_Interrupt_DisableId, kGlobalInterruptEnable_RegisterId),
      kDO_Interrupt_DisableId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kDO_Interrupt_DisableId, kGlobalInterruptEnable_RegisterId),
      kGen_Interrupt_DisableId          = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kGen_Interrupt_DisableId, kGlobalInterruptEnable_RegisterId),

      kDI_Interrupt_Status_RegisterId   = 8,
      kDI_ChangeDetectionIrqStId        = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_ChangeDetectionIrqStId, kDI_Interrupt_Status_RegisterId),
      kDI_ChangeDetectionErrorIrqStId   = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_ChangeDetectionErrorIrqStId, kDI_Interrupt_Status_RegisterId),
      kDI_OverflowIrqStId               = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_OverflowIrqStId, kDI_Interrupt_Status_RegisterId),
      kDI_SC_PreWaitRollOverStId        = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_SC_PreWaitRollOverStId, kDI_Interrupt_Status_RegisterId),
      kDI_ScanOverrunIrqStId            = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_ScanOverrunIrqStId, kDI_Interrupt_Status_RegisterId),
      kDI_SC_TC_IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_SC_TC_IrqStId, kDI_Interrupt_Status_RegisterId),
      kDI_Start1IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_Start1IrqStId, kDI_Interrupt_Status_RegisterId),
      kDI_Start2IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_Start2IrqStId, kDI_Interrupt_Status_RegisterId),
      kDI_StartIrqStId                  = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_StartIrqStId, kDI_Interrupt_Status_RegisterId),
      kDI_StopIrqStId                   = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_StopIrqStId, kDI_Interrupt_Status_RegisterId),
      kDI_OverrunIrqStId                = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_OverrunIrqStId, kDI_Interrupt_Status_RegisterId),
      kDI_FifoIrqStId                   = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kDI_FifoIrqStId, kDI_Interrupt_Status_RegisterId),

      kDO_Interrupt_Status_RegisterId   = 9,
      kDO_WriteTooFastIrqStId           = nNIMXRegisterMap120_mBuildFieldId(tDO_Interrupt_Status_Register::kDO_WriteTooFastIrqStId, kDO_Interrupt_Status_RegisterId),
      kDO_BC_TC_IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tDO_Interrupt_Status_Register::kDO_BC_TC_IrqStId, kDO_Interrupt_Status_RegisterId),
      kDO_Start1IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tDO_Interrupt_Status_Register::kDO_Start1IrqStId, kDO_Interrupt_Status_RegisterId),
      kDO_UpdateIrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tDO_Interrupt_Status_Register::kDO_UpdateIrqStId, kDO_Interrupt_Status_RegisterId),
      kDO_ErrorIrqStId                  = nNIMXRegisterMap120_mBuildFieldId(tDO_Interrupt_Status_Register::kDO_ErrorIrqStId, kDO_Interrupt_Status_RegisterId),
      kDO_UC_TC_IrqStId                 = nNIMXRegisterMap120_mBuildFieldId(tDO_Interrupt_Status_Register::kDO_UC_TC_IrqStId, kDO_Interrupt_Status_RegisterId),
      kDO_FifoIrqStId                   = nNIMXRegisterMap120_mBuildFieldId(tDO_Interrupt_Status_Register::kDO_FifoIrqStId, kDO_Interrupt_Status_RegisterId),

      kGen_Interrupt_Status_RegisterId  = 10,
      kWatchdogTimerTriggerStId         = nNIMXRegisterMap120_mBuildFieldId(tGen_Interrupt_Status_Register::kWatchdogTimerTriggerStId, kGen_Interrupt_Status_RegisterId),
      kPLL_OutOfLockEventStId           = nNIMXRegisterMap120_mBuildFieldId(tGen_Interrupt_Status_Register::kPLL_OutOfLockEventStId, kGen_Interrupt_Status_RegisterId),


      kMaxRegisterId = 10

   } tId;

   tBusInterface(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   tBusInterface();
   void initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tBusInterface();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline tBoolean isDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(tId id, nMDBG::tStatus2* statusChain = NULL);

   inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(nMDBG::tStatus2* statusChain = NULL);

private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   u32 _addressOffset;
   u8 _dirtyVector[11];

};

#ifndef ___tBusInterface_ipp___
#ifndef ___tBusInterface_h_no_inline___
#include "tBusInterface.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

