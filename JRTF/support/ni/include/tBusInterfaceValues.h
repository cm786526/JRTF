// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tBusInterfaceValues_h___
#define ___tBusInterfaceValues_h___

namespace nBusInterface {
   namespace nTIO_Interrupt_Status_Register_t {
      namespace nTIO_DmaIrqSt {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nTIO_GateIrqSt {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nTIO_TC_IrqSt {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nTIO_SampleClkErrorSt {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nTIO_GateErrorIrqSt {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nTIO_TC_ErrorIrqSt {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nTIO_DMA_ErrorIrqSt {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nTIO_WritesTooFast {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nTIO_GateSwitchErrorIrqSt {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nSampleClockIrqSt {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nDisarmEventIrqSt {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nAuxCtrTC_IrqSt {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nAuxCtrTC_ErrorIrqSt {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

   }

   namespace nGlobalInterruptStatus_Register {
      namespace nAI_Interrupt_Status {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nAO_Interrupt_Status {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nG0_Interrupt_Status {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nG1_Interrupt_Status {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nG2_Interrupt_Status {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nG3_Interrupt_Status {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nDI_Interrupt_Status {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nDO_Interrupt_Status {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nGen_Interrupt_Status {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

   }

   namespace nAI_Interrupt_Status_Register {
      namespace nAI_OverflowIrqSt {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nAI_SC_PreWaitRollOverSt {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nAI_ScanOverrunIrqSt {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nAI_SC_TC_IrqSt {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nAI_Start1IrqSt {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nAI_Start2IrqSt {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nAI_StartIrqSt {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nAI_StopIrqSt {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nAI_OverrunIrqSt {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nAI_FifoIrqSt {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nAO_Interrupt_Status_Register {
      namespace nAO_WriteTooFastIrqSt {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nAO_BC_TC_IrqSt {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nAO_Start1IrqSt {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nAO_UpdateIrqSt {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nAO_ErrorIrqSt {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nAO_UC_TC_IrqSt {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nAO_FifoIrqSt {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nGlobalInterruptEnable_Register {
      namespace nAI_Interrupt_Enable {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nAO_Interrupt_Enable {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nG0_Interrupt_Enable {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nG1_Interrupt_Enable {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nG2_Interrupt_Enable {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nG3_Interrupt_Enable {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nDI_Interrupt_Enable {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nDO_Interrupt_Enable {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nGen_Interrupt_Enable {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nAI_Interrupt_Disable {
         enum {
            kMask = 0x10000,
            kOffset = 0x10,
         };
      }

      namespace nAO_Interrupt_Disable {
         enum {
            kMask = 0x20000,
            kOffset = 0x11,
         };
      }

      namespace nG0_Interrupt_Disable {
         enum {
            kMask = 0x40000,
            kOffset = 0x12,
         };
      }

      namespace nG1_Interrupt_Disable {
         enum {
            kMask = 0x80000,
            kOffset = 0x13,
         };
      }

      namespace nG2_Interrupt_Disable {
         enum {
            kMask = 0x100000,
            kOffset = 0x14,
         };
      }

      namespace nG3_Interrupt_Disable {
         enum {
            kMask = 0x200000,
            kOffset = 0x15,
         };
      }

      namespace nDI_Interrupt_Disable {
         enum {
            kMask = 0x400000,
            kOffset = 0x16,
         };
      }

      namespace nDO_Interrupt_Disable {
         enum {
            kMask = 0x800000,
            kOffset = 0x17,
         };
      }

      namespace nGen_Interrupt_Disable {
         enum {
            kMask = 0x4000000,
            kOffset = 0x1a,
         };
      }

   }

   namespace nDI_Interrupt_Status_Register {
      namespace nDI_ChangeDetectionIrqSt {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nDI_ChangeDetectionErrorIrqSt {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nDI_OverflowIrqSt {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nDI_SC_PreWaitRollOverSt {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nDI_ScanOverrunIrqSt {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nDI_SC_TC_IrqSt {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nDI_Start1IrqSt {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nDI_Start2IrqSt {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nDI_StartIrqSt {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nDI_StopIrqSt {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nDI_OverrunIrqSt {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nDI_FifoIrqSt {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nDO_Interrupt_Status_Register {
      namespace nDO_WriteTooFastIrqSt {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nDO_BC_TC_IrqSt {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nDO_Start1IrqSt {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nDO_UpdateIrqSt {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nDO_ErrorIrqSt {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nDO_UC_TC_IrqSt {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nDO_FifoIrqSt {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nGen_Interrupt_Status_Register {
      namespace nWatchdogTimerTriggerSt {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nPLL_OutOfLockEventSt {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

   }

   using namespace nTIO_Interrupt_Status_Register_t;
   using namespace nGlobalInterruptStatus_Register;
   using namespace nAI_Interrupt_Status_Register;
   using namespace nAO_Interrupt_Status_Register;
   using namespace nGlobalInterruptEnable_Register;
   using namespace nDI_Interrupt_Status_Register;
   using namespace nDO_Interrupt_Status_Register;
   using namespace nGen_Interrupt_Status_Register;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

