// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tCHInChValues_h___
#define ___tCHInChValues_h___

#include "tDMAControllerValues.h"

namespace nCHInCh {
   using namespace nDMAController;
   using namespace nDMAController;
   using namespace nDMAController;
   using namespace nDMAController;
   using namespace nDMAController;
   using namespace nDMAController;
   using namespace nDMAController;
   using namespace nDMAController;
   typedef enum {
      kCHInChSignature                   = -1072661808,
   } tCHInCh_Signature_t;

   typedef enum {
      kEEPROMConfig                      = 4,
      kWindowSize                        = 12,
      kEEPROMConfigMask                  = 15,
      kSMIOConfig                        = 64,
      kWindowEnable                      = 128,
      kSMIOConfigMask                    = 240,
      kMaxLinkSize                       = 512,
      kPageSize                          = 4096,
      kEEPROMOffset                      = 20480,
      kSMIOOffset                        = 24576,
   } tConfiguration_Values_t;

   typedef enum {
      kEEPROMSettingsRegister0Value      = 335823888,
   } tEEPROM_Register_0_Value_t;

   typedef enum {
      kEEPROMSettingsRegister1Value      = 135823368,
   } tEEPROM_Register_1_Value_t;

   typedef enum {
      kEEPROMSettingsRegister2Value      = 196614,
   } tEEPROM_Register_2_Value_t;

   typedef enum {
      kSimultaneousRegister0Value        = 67388428,
   } tSMIO_Register_0_Value_t;

   typedef enum {
      kSimultaneousRegister1Value        = 134611202,
   } tSMIO_Register_1_Value_t;

   typedef enum {
      kSimultaneousRegister2Value        = 134610946,
   } tSMIO_Register_2_Value_t;

   typedef enum {
      kSimultaneousRegister3Value        = 3,
   } tSMIO_Register_3_Value_t;

   namespace nScrap_Register_t {
      namespace nSDATA {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nCHInCh_Identification_Register {
      namespace nID {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nIO_Port_Resource_Description_Register {
      namespace nIOMPS {
         enum {
            kMask = 0xf0000,
            kOffset = 0x10,
         };
      }

   }

   namespace nInterrupt_Mask_Register {
      namespace nClear_SMIO_FIFO_Int {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nSet_SMIO_FIFO_Int {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nClear_STC3_Int {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nSet_STC3_Int {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nClear_CPU_Int {
         enum {
            kMask = 0x40000000,
            kOffset = 0x1e,
         };
      }

      namespace nSet_CPU_Int {
         enum {
            kMask = 0x80000000,
            kOffset = 0x1f,
         };
      }

   }

   namespace nInterrupt_Status_Register {
      namespace nSMIO_FIFO_Int {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nSTC3_Int {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nDMA {
         enum {
            kMask = 0x10000000,
            kOffset = 0x1c,
         };
      }

      namespace nExternal {
         enum {
            kMask = 0x20000000,
            kOffset = 0x1d,
         };
      }

      namespace nAdditional_Int {
         enum {
            kMask = 0x40000000,
            kOffset = 0x1e,
         };
      }

      namespace nInt {
         enum {
            kMask = 0x80000000,
            kOffset = 0x1f,
         };
      }

   }

   namespace nVolatile_Interrupt_Status_Register {
      namespace nVol_SMIO_FIFO_Int {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nVol_STC3_Int {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nVol_DMA {
         enum {
            kMask = 0x10000000,
            kOffset = 0x1c,
         };
      }

      namespace nVol_External {
         enum {
            kMask = 0x20000000,
            kOffset = 0x1d,
         };
      }

      namespace nVol_Additional_Int {
         enum {
            kMask = 0x40000000,
            kOffset = 0x1e,
         };
      }

      namespace nVol_Int {
         enum {
            kMask = 0x80000000,
            kOffset = 0x1f,
         };
      }

   }

   namespace nHost_Bus_Resource_Control_Register {
      namespace nDMA_MA64 {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nDMA_LA64 {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

      namespace nIO_Master_Enable {
         enum {
            kMask = 0x80000000,
            kOffset = 0x1f,
         };
      }

   }

   namespace nEEPROM_Window_Register {
      namespace nEEPROM_Window_Field {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nSimultaneous_Window_Register {
      namespace nSimultaneous_Window_Field {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nWindow_Control_Register {
      namespace nWindow_Control_Field {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nConfiguration_Register {
      namespace nConfiguration_Value {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nEEPROM_Register_0 {
      namespace nEEPROM_Register_0_Value {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nEEPROM_Register_1 {
      namespace nEEPROM_Register_1_Value {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nEEPROM_Register_2 {
      namespace nEEPROM_Register_2_Value {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nSMIO_Register_0 {
      namespace nSMIO_Register_0_Value {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nSMIO_Register_1 {
      namespace nSMIO_Register_1_Value {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nSMIO_Register_2 {
      namespace nSMIO_Register_2_Value {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nSMIO_Register_3 {
      namespace nSMIO_Register_3_Value {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nPCI_SubSystem_ID_Access_Register {
      namespace nSubSystem_Vendor_ID {
         enum {
            kMask = 0xffff,
            kOffset = 0,
         };
      }

      namespace nSubSystem_Product_ID {
         enum {
            kMask = 0xffff0000,
            kOffset = 0x10,
         };
      }

   }

   using namespace nScrap_Register_t;
   using namespace nCHInCh_Identification_Register;
   using namespace nIO_Port_Resource_Description_Register;
   using namespace nInterrupt_Mask_Register;
   using namespace nInterrupt_Status_Register;
   using namespace nVolatile_Interrupt_Status_Register;
   using namespace nHost_Bus_Resource_Control_Register;
   using namespace nEEPROM_Window_Register;
   using namespace nSimultaneous_Window_Register;
   using namespace nWindow_Control_Register;
   using namespace nConfiguration_Register;
   using namespace nEEPROM_Register_0;
   using namespace nEEPROM_Register_1;
   using namespace nEEPROM_Register_2;
   using namespace nSMIO_Register_0;
   using namespace nSMIO_Register_1;
   using namespace nSMIO_Register_2;
   using namespace nSMIO_Register_3;
   using namespace nPCI_SubSystem_ID_Access_Register;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

