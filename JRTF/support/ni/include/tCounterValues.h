// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tCounterValues_h___
#define ___tCounterValues_h___

namespace nCounter {
   typedef enum {
      kA_PFI0                            = 1,
      kA_PFI1                            = 2,
      kA_PFI2                            = 3,
      kA_PFI3                            = 4,
      kA_PFI4                            = 5,
      kA_PFI5                            = 6,
      kA_PFI6                            = 7,
      kA_PFI7                            = 8,
      kA_PFI8                            = 9,
      kA_PFI9                            = 10,
      kA_RTSI0                           = 11,
      kA_RTSI1                           = 12,
      kA_RTSI2                           = 13,
      kA_RTSI3                           = 14,
      kA_RTSI4                           = 15,
      kA_RTSI5                           = 16,
      kA_RTSI6                           = 17,
      kA_PXIe_DStarA                     = 18,
      kA_PXIe_DStarB                     = 19,
      kA_Star_Trig                       = 20,
      kA_PFI10                           = 21,
      kA_PFI11                           = 22,
      kA_PFI12                           = 23,
      kA_PFI13                           = 24,
      kA_PFI14                           = 25,
      kA_PFI15                           = 26,
      kA_RTSI7                           = 27,
      kA_Analog_trig                     = 30,
      kA_LogicLow                        = 31,
      kA_IntTrigA_0                      = 46,
      kA_IntTrigA_1                      = 47,
      kA_IntTrigA_2                      = 48,
      kA_IntTrigA_3                      = 49,
      kA_IntTrigA_4                      = 50,
      kA_IntTrigA_5                      = 51,
      kA_IntTrigA_6                      = 52,
      kA_IntTrigA_7                      = 53,
   } tGi_A_Select_t;

   typedef enum {
      kNot_Armed                         = 0,
      kArmed                             = 1,
   } tGi_Armed_St_t;

   typedef enum {
      kAux_Disabled                      = 0,
      kAux_FrequencyMeasurement          = 1,
      kAux_FinitePulseTrain              = 2,
      kAux_MinFinitePulseTrain           = 3,
      kAux_GateEventCounting             = 4,
      kAux_FinitePwmGeneration           = 5,
   } tGi_AuxCtrMode_t;

   typedef enum {
      kB_LogicLow0                       = 0,
      kB_PFI0                            = 1,
      kB_PFI1                            = 2,
      kB_PFI2                            = 3,
      kB_PFI3                            = 4,
      kB_PFI4                            = 5,
      kB_PFI5                            = 6,
      kB_PFI6                            = 7,
      kB_PFI7                            = 8,
      kB_PFI8                            = 9,
      kB_PFI9                            = 10,
      kB_RTSI0                           = 11,
      kB_RTSI1                           = 12,
      kB_RTSI2                           = 13,
      kB_RTSI3                           = 14,
      kB_RTSI4                           = 15,
      kB_RTSI5                           = 16,
      kB_RTSI6                           = 17,
      kB_PXIe_DStarA                     = 18,
      kB_PXIe_DStarB                     = 19,
      kB_Star_Trig                       = 20,
      kB_PFI10                           = 21,
      kB_PFI11                           = 22,
      kB_PFI12                           = 23,
      kB_PFI13                           = 24,
      kB_PFI14                           = 25,
      kB_PFI15                           = 26,
      kB_RTSI7                           = 27,
      kB_Analog_Trig                     = 30,
      kB_LogicLow                        = 31,
      kB_IntTrigA_0                      = 46,
      kB_IntTrigA_1                      = 47,
      kB_IntTrigA_2                      = 48,
      kB_IntTrigA_3                      = 49,
      kB_IntTrigA_4                      = 50,
      kB_IntTrigA_5                      = 51,
      kB_IntTrigA_6                      = 52,
      kB_IntTrigA_7                      = 53,
   } tGi_B_Select_t;

   typedef enum {
      kDisabled_If_Armed_Else_Write_To_X   = 0,
      kEnabled_If_Armed_Else_Write_To_Y  = 1,
   } tGi_Bank_Switch_Enable_t;

   typedef enum {
      kLoad_From_Register_A              = 0,
      kLoad_From_Register_B              = 1,
   } tGi_Load_Source_Select_t;

   typedef enum {
      kGate                              = 0,
      kSoftware                          = 1,
      kSampleClk                         = 2,
   } tGi_Bank_Switch_Mode_t;

   typedef enum {
      kNormalCounting                    = 0,
      kQuadEncoderX1                     = 1,
      kQuadEncoderX2                     = 2,
      kQuadEncoderX4                     = 3,
      kTwoPulseEncoder                   = 4,
      kFrequencyMeasure                  = 6,
      kFinitePulseTrain                  = 7,
   } tGi_CountingMode_t;

   typedef enum {
      kNoHardwareDisarm                  = 0,
      kDisarmAtTcThatStops               = 1,
      kDisarmAtGateThatStops             = 2,
      kDisarmAtTcOrGateThatStops         = 3,
   } tGi_Counting_Once_t;

   typedef enum {
      kDisabled                          = 0,
      kEnabled                           = 1,
   } tGi_Disabled_Enabled_t;

   typedef enum {
      kGate_DioChgDetect                 = 0,
      kGate_PFI0                         = 1,
      kGate_PFI1                         = 2,
      kGate_PFI2                         = 3,
      kGate_PFI3                         = 4,
      kGate_PFI4                         = 5,
      kGate_PFI5                         = 6,
      kGate_PFI6                         = 7,
      kGate_PFI7                         = 8,
      kGate_PFI8                         = 9,
      kGate_PFI9                         = 10,
      kGate_RTSI0                        = 11,
      kGate_RTSI1                        = 12,
      kGate_RTSI2                        = 13,
      kGate_RTSI3                        = 14,
      kGate_RTSI4                        = 15,
      kGate_RTSI5                        = 16,
      kGate_RTSI6                        = 17,
      kGate_AI_START2                    = 18,
      kGate_StarTrig                     = 19,
      kGate_G_PairedOut                  = 20,
      kGate_PFI10                        = 21,
      kGate_PFI11                        = 22,
      kGate_PFI12                        = 23,
      kGate_PFI13                        = 24,
      kGate_PFI14                        = 25,
      kGate_PFI15                        = 26,
      kGate_RTSI7                        = 27,
      kGate_AI_START1                    = 28,
      kGate_G_PairedSrc                  = 29,
      kGate_Atrig                        = 30,
      kGate_PXIe_DStarA                  = 31,
      kGate_PXIe_DStarB                  = 32,
      kGate_IntTrigA_0                   = 41,
      kGate_IntTrigA_1                   = 42,
      kGate_IntTrigA_2                   = 43,
      kGate_IntTrigA_3                   = 44,
      kGate_IntTrigA_4                   = 45,
      kGate_IntTrigA_5                   = 46,
      kGate_IntTrigA_6                   = 47,
      kGate_IntTrigA_7                   = 48,
      kGate_DI_START1                    = 59,
      kGate_DI_START2                    = 60,
      kGate_AO_START1                    = 61,
      kGate_DO_START1                    = 62,
      kGate_LogicLow                     = 63,
   } tGi_Gate_Select_t;

   typedef enum {
      kGateDisabled                      = 0,
      kLevelGating                       = 1,
      kAssertingEdgeGating               = 2,
      kDeassertingEdgeGating             = 3,
   } tGi_GatingMode_t;

   typedef enum {
      kHwArm_DIO_ChgDetect               = 0,
      kHwArm_PFI0                        = 1,
      kHwArm_PFI1                        = 2,
      kHwArm_PFI2                        = 3,
      kHwArm_PFI3                        = 4,
      kHwArm_PFI4                        = 5,
      kHwArm_PFI5                        = 6,
      kHwArm_PFI6                        = 7,
      kHwArm_PFI7                        = 8,
      kHwArm_PFI8                        = 9,
      kHwArm_PFI9                        = 10,
      kHwArm_RTSI0                       = 11,
      kHwArm_RTSI1                       = 12,
      kHwArm_RTSI2                       = 13,
      kHwArm_RTSI3                       = 14,
      kHwArm_RTSI4                       = 15,
      kHwArm_RTSI5                       = 16,
      kHwArm_RTSI6                       = 17,
      kHwArm_AI_START2                   = 18,
      kHwArm_Star_Trig                   = 19,
      kHwArm_G_PairedOut                 = 20,
      kHwArm_PFI10                       = 21,
      kHwArm_PFI11                       = 22,
      kHwArm_PFI12                       = 23,
      kHwArm_PFI13                       = 24,
      kHwArm_PFI14                       = 25,
      kHwArm_PFI15                       = 26,
      kHwArm_RTSI7                       = 27,
      kHwArm_AI_START1                   = 28,
      kHwArm_Analog_Trig                 = 29,
      kHwArm_DI_Start1                   = 30,
      kHwArm_AO_Start1                   = 31,
      kHwArm_DO_Start1                   = 32,
      kHwArm_PXIe_DStarA                 = 33,
      kHwArm_PXIe_DStarB                 = 34,
      kHwArm_IntTrigA_0                  = 48,
      kHwArm_IntTrigA_1                  = 49,
      kHwArm_IntTrigA_2                  = 50,
      kHwArm_IntTrigA_3                  = 51,
      kHwArm_IntTrigA_4                  = 52,
      kHwArm_IntTrigA_5                  = 53,
      kHwArm_IntTrigA_6                  = 54,
      kHwArm_IntTrigA_7                  = 55,
   } tGi_HW_Arm_Select_t;

   typedef enum {
      kSyncDefault                       = 0,
      kSyncSlave                         = 1,
      kSyncMaster                        = 2,
   } tGi_HwArmSyncMode_t;

   typedef enum {
      kIndexModeCleared                  = 0,
      kIndexModeSet                      = 1,
   } tGi_Index_Mode_t;

   typedef enum {
      kA_low_B_low                       = 0,
      kA_low_B_high                      = 1,
      kA_high_B_low                      = 2,
      kA_high_B_high                     = 3,
   } tGi_Index_Phase_t;

   typedef enum {
      kNoCounterReloadOnGate             = 0,
      kReloadOnStopGate                  = 1,
   } tGi_Loading_On_Gate_t;

   typedef enum {
      kRolloverOnTC                      = 0,
      kReloadOnTC                        = 1,
   } tGi_Loading_On_TC_t;

   typedef enum {
      kTC_mode                           = 1,
      kToggle_Output_On_TC               = 2,
      kToggle_Output_On_TC_or_Gate       = 3,
   } tGi_Output_Mode_t;

   typedef enum {
      kLow                               = 0,
      kHigh                              = 1,
   } tGi_Output_St_t;

   typedef enum {
      kActiveHigh                        = 0,
      kActiveLow                         = 1,
   } tGi_Polarity_t;

   typedef enum {
      kUseSameLoadRegister               = 0,
      kUseAlternatingLoadRegisters       = 1,
   } tGi_Reload_Source_Switching_t;

   typedef enum {
      kSC_NextSaved                      = 0,
      kSC_LastSaved                      = 1,
   } tGi_SampleClkSampleMode_t;

   typedef enum {
      kSC_Disabled                       = 0,
      kSC_SingleSample                   = 1,
      kSC_DoubleSampleRF                 = 2,
      kSC_DoubleSampleFR                 = 3,
      kSC_MainAndAux                     = 4,
   } tGi_SampleClockMode_t;

   typedef enum {
      kSampleClk_SwPulse                 = 0,
      kSampleClk_PFI0                    = 1,
      kSampleClk_PFI1                    = 2,
      kSampleClk_PFI2                    = 3,
      kSampleClk_PFI3                    = 4,
      kSampleClk_PFI4                    = 5,
      kSampleClk_PFI5                    = 6,
      kSampleClk_PFI6                    = 7,
      kSampleClk_PFI7                    = 8,
      kSampleClk_PFI8                    = 9,
      kSampleClk_PFI9                    = 10,
      kSampleClk_RTSI0                   = 11,
      kSampleClk_RTSI1                   = 12,
      kSampleClk_RTSI2                   = 13,
      kSampleClk_RTSI3                   = 14,
      kSampleClk_RTSI4                   = 15,
      kSampleClk_RTSI5                   = 16,
      kSampleClk_RTSI6                   = 17,
      kSampleClk_Star_Trig               = 19,
      kSampleClk_DIO_ChgDetect           = 20,
      kSampleClk_PFI10                   = 21,
      kSampleClk_PFI11                   = 22,
      kSampleClk_PFI12                   = 23,
      kSampleClk_PFI13                   = 24,
      kSampleClk_PFI14                   = 25,
      kSampleClk_PFI15                   = 26,
      kSampleClk_RTSI7                   = 27,
      kSampleClk_AI_START                = 28,
      kSampleClk_Atrig                   = 30,
      kSampleClk_DI_Convert              = 31,
      kSampleClk_DI_Start1               = 32,
      kSampleClk_AI_Convert              = 33,
      kSampleClk_AI_Start1               = 34,
      kSampleClk_AI_Start2               = 35,
      kSampleClk_AO_Update               = 36,
      kSampleClk_DO_Update               = 37,
      kSampleClk_PXIe_DStarA             = 38,
      kSampleClk_PXIe_DStarB             = 39,
      kSampleClk_IntTrigA_0              = 48,
      kSampleClk_IntTrigA_1              = 49,
      kSampleClk_IntTrigA_2              = 50,
      kSampleClk_IntTrigA_3              = 51,
      kSampleClk_IntTrigA_4              = 52,
      kSampleClk_IntTrigA_5              = 53,
      kSampleClk_IntTrigA_6              = 54,
      kSampleClk_IntTrigA_7              = 55,
   } tGi_SampleClockSelect_t;

   typedef enum {
      kDisabledSecondGate                = 0,
      kSecondGateAssertFirstDeassertsGate    = 1,
   } tGi_Second_Gate_Mode_t;

   typedef enum {
      kGate2_LogicLow                    = 0,
      kGate2_PFI0                        = 1,
      kGate2_PFI1                        = 2,
      kGate2_PFI2                        = 3,
      kGate2_PFI3                        = 4,
      kGate2_PFI4                        = 5,
      kGate2_PFI5                        = 6,
      kGate2_PFI6                        = 7,
      kGate2_PFI7                        = 8,
      kGate2_PFI8                        = 9,
      kGate2_PFI9                        = 10,
      kGate2_RTSI0                       = 11,
      kGate2_RTSI1                       = 12,
      kGate2_RTSI2                       = 13,
      kGate2_RTSI3                       = 14,
      kGate2_RTSI4                       = 15,
      kGate2_RTSI5                       = 16,
      kGate2_RTSI6                       = 17,
      kGate2_AI_START1                   = 18,
      kGate2_Star_Trig                   = 19,
      kGate2_G_PairedOut                 = 20,
      kGate2_PFI10                       = 21,
      kGate2_PFI11                       = 22,
      kGate2_PFI12                       = 23,
      kGate2_PFI13                       = 24,
      kGate2_PFI14                       = 25,
      kGate2_PFI15                       = 26,
      kGate2_RTSI7                       = 27,
      kGate2_G_PairedGate                = 28,
      kGate2_G_PairedSrc                 = 29,
      kGate2_G_Gate1                     = 30,
      kGate2_PXIe_DStarA                 = 31,
      kGate2_PXIe_DStarB                 = 32,
      kGate2_Atrig                       = 33,
      kGate2_DioChgDetect                = 34,
      kGate2_AI_START2                   = 35,
      kGate2_IntTrigA_0                  = 46,
      kGate2_IntTrigA_1                  = 47,
      kGate2_IntTrigA_2                  = 48,
      kGate2_IntTrigA_3                  = 49,
      kGate2_IntTrigA_4                  = 50,
      kGate2_IntTrigA_5                  = 51,
      kGate2_IntTrigA_6                  = 52,
      kGate2_IntTrigA_7                  = 53,
   } tGi_Second_Gate_Select_t;

   typedef enum {
      kSrc_PFI0                          = 1,
      kSrc_PFI1                          = 2,
      kSrc_PFI2                          = 3,
      kSrc_PFI3                          = 4,
      kSrc_PFI4                          = 5,
      kSrc_PFI5                          = 6,
      kSrc_PFI6                          = 7,
      kSrc_PFI7                          = 8,
      kSrc_PFI8                          = 9,
      kSrc_PFI9                          = 10,
      kSrc_RTSI0                         = 11,
      kSrc_RTSI1                         = 12,
      kSrc_RTSI2                         = 13,
      kSrc_RTSI3                         = 14,
      kSrc_RTSI4                         = 15,
      kSrc_RTSI5                         = 16,
      kSrc_RTSI6                         = 17,
      kSrc_TB2                           = 18,
      kSrc_G_PairedTC                    = 19,
      kSrc_G_PairedGate                  = 20,
      kSrc_PFI10                         = 21,
      kSrc_PFI11                         = 22,
      kSrc_PFI12                         = 23,
      kSrc_PFI13                         = 24,
      kSrc_PFI14                         = 25,
      kSrc_PFI15                         = 26,
      kSrc_RTSI7                         = 27,
      kSrc_TB1                           = 28,
      kSrc_PXIClk10                      = 29,
      kSrc_TB3                           = 30,
      kSrc_StarTrig                      = 32,
      kSrc_PXIe_DStarA                   = 33,
      kSrc_PXIe_DStarB                   = 34,
      kSrc_IntTrigA_0                    = 43,
      kSrc_IntTrigA_1                    = 44,
      kSrc_IntTrigA_2                    = 45,
      kSrc_IntTrigA_3                    = 46,
      kSrc_IntTrigA_4                    = 47,
      kSrc_IntTrigA_5                    = 48,
      kSrc_IntTrigA_6                    = 49,
      kSrc_IntTrigA_7                    = 50,
      kSrc_DIO_ChgDetect                 = 59,
      kSrc_Atrig                         = 60,
   } tGi_Source_Select_t;

   typedef enum {
      kStopOnGateCondition               = 0,
      kStopAtGateOrFirstTC               = 1,
      kStopAtGateOrSecondTC              = 2,
   } tGi_Stop_Mode_t;

   typedef enum {
      kFirstGateStartSecondGateStops     = 0,
      kFirstGateStopsSecondGateStarts    = 1,
      kGateEdgeStarts                    = 2,
      kGateLoads                         = 3,
   } tGi_Trigger_Mode_For_Edge_Gate_t;

   typedef enum {
      kCountDown                         = 0,
      kCountUp                           = 1,
      kGi_B_High_Up                      = 2,
      kGi_Gate_Active_Up                 = 3,
   } tGi_Up_Down_t;

   typedef enum {
      kZ_PFI0                            = 1,
      kZ_PFI1                            = 2,
      kZ_PFI2                            = 3,
      kZ_PFI3                            = 4,
      kZ_PFI4                            = 5,
      kZ_PFI5                            = 6,
      kZ_PFI6                            = 7,
      kZ_PFI7                            = 8,
      kZ_PFI8                            = 9,
      kZ_PFI9                            = 10,
      kZ_RTSI0                           = 11,
      kZ_RTSI1                           = 12,
      kZ_RTSI2                           = 13,
      kZ_RTSI3                           = 14,
      kZ_RTSI4                           = 15,
      kZ_RTSI5                           = 16,
      kZ_RTSI6                           = 17,
      kZ_PXIe_DStarA                     = 18,
      kZ_PXIe_DStarB                     = 19,
      kZ_Star_Trig                       = 20,
      kZ_PFI10                           = 21,
      kZ_PFI11                           = 22,
      kZ_PFI12                           = 23,
      kZ_PFI13                           = 24,
      kZ_PFI14                           = 25,
      kZ_PFI15                           = 26,
      kZ_RTSI7                           = 27,
      kZ_Analog_Trig                     = 30,
      kZ_LogicLow                        = 31,
      kZ_IntTrigA_0                      = 46,
      kZ_IntTrigA_1                      = 47,
      kZ_IntTrigA_2                      = 48,
      kZ_IntTrigA_3                      = 49,
      kZ_IntTrigA_4                      = 50,
      kZ_IntTrigA_5                      = 51,
      kZ_IntTrigA_6                      = 52,
      kZ_IntTrigA_7                      = 53,
   } tGi_Z_Select_t;

   namespace nGi_Command_Register {
      namespace nGi_Arm {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nGi_Load {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nGi_Disarm {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nGi_WrLoadRegsFromFifo {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nGi_Bank_Switch_Start {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nGi_Arm_Paired_Counter {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nGi_Reset {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nGi_Disarm_Paired_Counter {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nGi_Mode_Register {
      namespace nGi_Gating_Mode {
         enum {
            kMask = 0x3,
            kOffset = 0,
         };
      }

      namespace nGi_Gate_On_Both_Edges {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nGi_Trigger_Mode_For_Edge_Gate {
         enum {
            kMask = 0x18,
            kOffset = 0x3,
         };
      }

      namespace nGi_Stop_Mode {
         enum {
            kMask = 0x60,
            kOffset = 0x5,
         };
      }

      namespace nGi_Load_Source_Select {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nGi_Output_Mode {
         enum {
            kMask = 0x300,
            kOffset = 0x8,
         };
      }

      namespace nGi_Counting_Once {
         enum {
            kMask = 0xc00,
            kOffset = 0xa,
         };
      }

      namespace nGi_Loading_On_TC {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nGi_ForceSourceEqualToTimebase {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nGi_Loading_On_Gate {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nGi_Reload_Source_Switching {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nGi_HW_Save_Register {
      namespace nGi_HW_Save_Value {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_Load_A_Register {
      namespace nGi_Load_A {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_Load_B_Register {
      namespace nGi_Load_B {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_Save_Register {
      namespace nGi_Save_Value {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_Input_Select_Register {
      namespace nGi_Gate_Polarity {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nGi_Source_Select {
         enum {
            kMask = 0x7e,
            kOffset = 0x1,
         };
      }

      namespace nGi_Gate_Select {
         enum {
            kMask = 0x1f80,
            kOffset = 0x7,
         };
      }

      namespace nGi_Gate_Select_Load_Source {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nGi_Output_Polarity {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nGi_Source_Polarity {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nGi_Status_Register {
      namespace nGi_Output_St {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nGi_Counting_St {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nGi_Next_Load_Source_St {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nGi_Armed_St {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nGi_No_Load_Between_Gates_St {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nGi_DRQ_Error {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nGi_TC_Error_St {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nGi_Gate_Error_St {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nGi_DRQ_St {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

      namespace nGi_SampleClockOverrun_St {
         enum {
            kMask = 0x10000,
            kOffset = 0x10,
         };
      }

      namespace nGi_SampleClockInterruptSt {
         enum {
            kMask = 0x20000,
            kOffset = 0x11,
         };
      }

      namespace nGi_Bank_St {
         enum {
            kMask = 0x40000,
            kOffset = 0x12,
         };
      }

      namespace nGi_Gate_St {
         enum {
            kMask = 0x100000,
            kOffset = 0x14,
         };
      }

      namespace nGi_Gate_Interrupt_St {
         enum {
            kMask = 0x800000,
            kOffset = 0x17,
         };
      }

      namespace nGi_TC_St {
         enum {
            kMask = 0x1000000,
            kOffset = 0x18,
         };
      }

      namespace nGi_GateSwitchError_St {
         enum {
            kMask = 0x2000000,
            kOffset = 0x19,
         };
      }

      namespace nGi_DisarmEventInterruptSt {
         enum {
            kMask = 0x4000000,
            kOffset = 0x1a,
         };
      }

      namespace nGi_ForcedWrFromFifoInProgSt {
         enum {
            kMask = 0x8000000,
            kOffset = 0x1b,
         };
      }

      namespace nGi_WritesTooFastErrorSt {
         enum {
            kMask = 0x10000000,
            kOffset = 0x1c,
         };
      }

      namespace nGi_AuxTC_ErrorEventSt {
         enum {
            kMask = 0x20000000,
            kOffset = 0x1d,
         };
      }

      namespace nGi_AuxTC_EventSt {
         enum {
            kMask = 0x40000000,
            kOffset = 0x1e,
         };
      }

   }

   namespace nGi_Autoincrement_Register {
      namespace nGi_Autoincrement {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_Counting_Mode_Register {
      namespace nGi_Counting_Mode {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nGi_HW_Arm_Polarity {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nGi_Index_Mode {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nGi_Index_Phase {
         enum {
            kMask = 0x60,
            kOffset = 0x5,
         };
      }

      namespace nGi_HW_Arm_Enable {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nGi_HW_Arm_Select {
         enum {
            kMask = 0x3f00,
            kOffset = 0x8,
         };
      }

      namespace nGi_Prescale {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nGi_Prescale_Div_2 {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nGi_FifoStatusRegister {
      namespace nGi_FifoStatus {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_Second_Gate_Register {
      namespace nGi_Second_Gate_Mode {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nGi_Second_Gate_Select {
         enum {
            kMask = 0x1f80,
            kOffset = 0x7,
         };
      }

      namespace nGi_Second_Gate_Polarity {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

   }

   namespace nGi_DMA_Config_Register {
      namespace nGi_DMA_Enable {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nGi_DMA_Write {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nGi_DMA_Reset {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nGi_WaitForFirstEventOnGate {
         enum {
            kMask = 0xc00,
            kOffset = 0xa,
         };
      }

      namespace nGi_WrFifoEnable {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nGi_DoneNotificationEnable {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

   }

   namespace nGi_SampleClockCountRegister {
      namespace nGi_SampleClockCount {
         enum {
            kMask = 0xffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_RdFifoRegister {
      namespace nGi_RdFifoData {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_WrFifoRegister {
      namespace nGi_WrFifoData {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_SampleClockRegister {
      namespace nGi_SampleClockSelect {
         enum {
            kMask = 0x3f,
            kOffset = 0,
         };
      }

      namespace nGi_SampleClockPolarity {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nGi_SampleClockLevelMode {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nGi_SampleClockMode {
         enum {
            kMask = 0x700,
            kOffset = 0x8,
         };
      }

      namespace nGi_SampleClockPulse {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nGi_SampleClockSampleMode {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nGi_SampleClockGateIndependent {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nGi_AuxCtrRegister {
      namespace nGi_AuxCtrMode {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nGi_AuxCtrLoad {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

   }

   namespace nGi_AuxCtrLoadA_Register {
      namespace nGi_AuxCtrLoadA {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_AuxCtrLoadB_Register {
      namespace nGi_AuxCtrLoadB {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_AutomaticLoadRegister {
      namespace nGi_AutoLdRegister {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nGi_Interrupt1_Register {
      namespace nGi_Aux_Ctr_TC_Error_Interrupt_En {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nGi_Aux_Ctr_TC_Interrupt_En {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nGi_Disarm_Interrupt_En {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nGi_SampleClockInterruptEn {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nGi_GateSwitchErrorInt_En {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nGi_WritesTooFastErrorEn {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nGi_DMA_Int_Enable {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nGi_Gate_Interrupt_Enable {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nGi_TC_Interrupt_Enable {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nGi_SampleClockOverrunIntEn {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nGi_Gate_Error_Interrupt_Enabled {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nGi_TC_Error_Interrupt_Enable {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nGi_DMA_Error_Interrupt_Enable {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

      namespace nGi_SampleClockOverrunErrorAck {
         enum {
            kMask = 0x80000,
            kOffset = 0x13,
         };
      }

      namespace nGi_SampleClockInterruptAck {
         enum {
            kMask = 0x100000,
            kOffset = 0x14,
         };
      }

      namespace nGi_Gate_Error_Confirm {
         enum {
            kMask = 0x200000,
            kOffset = 0x15,
         };
      }

      namespace nGi_TC_Error_Confirm {
         enum {
            kMask = 0x400000,
            kOffset = 0x16,
         };
      }

      namespace nGi_Aux_Ctr_TC_Error_Interrupt_Ack {
         enum {
            kMask = 0x1000000,
            kOffset = 0x18,
         };
      }

      namespace nGi_Aux_Ctr_TC_Interrupt_Ack {
         enum {
            kMask = 0x2000000,
            kOffset = 0x19,
         };
      }

      namespace nGi_Disarm_Interrupt_Ack {
         enum {
            kMask = 0x4000000,
            kOffset = 0x1a,
         };
      }

      namespace nGi_WritesTooFastErrorAck {
         enum {
            kMask = 0x8000000,
            kOffset = 0x1b,
         };
      }

      namespace nGi_GateSwitchError_Ack {
         enum {
            kMask = 0x10000000,
            kOffset = 0x1c,
         };
      }

      namespace nGi_DMA_Error_Ack {
         enum {
            kMask = 0x20000000,
            kOffset = 0x1d,
         };
      }

      namespace nGi_TC_Interrupt_Ack {
         enum {
            kMask = 0x40000000,
            kOffset = 0x1e,
         };
      }

      namespace nGi_Gate_Interrupt_Ack {
         enum {
            kMask = 0x80000000,
            kOffset = 0x1f,
         };
      }

   }

   namespace nGi_Interrupt2_Register {
      namespace nGi_Aux_Ctr_TC_Error_Interrupt_Dis {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nGi_Aux_Ctr_TC_Interrupt_Dis {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nGi_Disarm_Interrupt_Dis {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nGi_SampleClockInterruptDis {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nGi_GateSwitchErrorInt_Dis {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nGi_WritesTooFastErrorDis {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nGi_DMA_Int_Disable {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nGi_Gate_Interrupt_Disable {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nGi_TC_Interrupt_Disable {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nGi_SampleClockOverrunIntDis {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nGi_Gate_Error_Interrupt_Disable {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nGi_TC_Error_Interrupt_Disable {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nGi_DMA_Error_Interrupt_Disable {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

      namespace nGi_SampleClockOverrunErrorAck2 {
         enum {
            kMask = 0x80000,
            kOffset = 0x13,
         };
      }

      namespace nGi_SampleClockInterruptAck2 {
         enum {
            kMask = 0x100000,
            kOffset = 0x14,
         };
      }

      namespace nGi_Gate_Error_Confirm2 {
         enum {
            kMask = 0x200000,
            kOffset = 0x15,
         };
      }

      namespace nGi_TC_Error_Confirm2 {
         enum {
            kMask = 0x400000,
            kOffset = 0x16,
         };
      }

      namespace nGi_Aux_Ctr_TC_Error_Interrupt_Ack2 {
         enum {
            kMask = 0x1000000,
            kOffset = 0x18,
         };
      }

      namespace nGi_Aux_Ctr_TC_Interrupt_Ack2 {
         enum {
            kMask = 0x2000000,
            kOffset = 0x19,
         };
      }

      namespace nGi_Disarm_Interrupt_Ack2 {
         enum {
            kMask = 0x4000000,
            kOffset = 0x1a,
         };
      }

      namespace nGi_WritesTooFastErrorAck2 {
         enum {
            kMask = 0x8000000,
            kOffset = 0x1b,
         };
      }

      namespace nGi_GateSwitchError_Ack2 {
         enum {
            kMask = 0x10000000,
            kOffset = 0x1c,
         };
      }

      namespace nGi_DMA_Error_Ack2 {
         enum {
            kMask = 0x20000000,
            kOffset = 0x1d,
         };
      }

      namespace nGi_TC_Interrupt_Ack2 {
         enum {
            kMask = 0x40000000,
            kOffset = 0x1e,
         };
      }

      namespace nGi_Gate_Interrupt_Ack2 {
         enum {
            kMask = 0x80000000,
            kOffset = 0x1f,
         };
      }

   }

   namespace nGi_ABZ_Select_Register {
      namespace nGi_Z_Select {
         enum {
            kMask = 0x3f,
            kOffset = 0,
         };
      }

      namespace nGi_B_Select {
         enum {
            kMask = 0x3f00,
            kOffset = 0x8,
         };
      }

      namespace nGi_A_Select {
         enum {
            kMask = 0x3f0000,
            kOffset = 0x10,
         };
      }

   }

   namespace nGi_Mode3_Register {
      namespace nGi_TimeCoherentSemiperiod {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

   }

   namespace nGi_Mode2_Register {
      namespace nGi_HwArmSyncMode {
         enum {
            kMask = 0x3,
            kOffset = 0,
         };
      }

      namespace nGi_CtrOutFifoRegenerationEn {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nGi_StopOnError {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nGi_WriteOnSwitchRequest {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nGi_Bank_Switch_Mode {
         enum {
            kMask = 0xc00,
            kOffset = 0xa,
         };
      }

      namespace nGi_Bank_Switch_Enable {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nGi_Up_Down {
         enum {
            kMask = 0xc000,
            kOffset = 0xe,
         };
      }

   }

   using namespace nGi_Command_Register;
   using namespace nGi_Mode_Register;
   using namespace nGi_HW_Save_Register;
   using namespace nGi_Load_A_Register;
   using namespace nGi_Load_B_Register;
   using namespace nGi_Save_Register;
   using namespace nGi_Input_Select_Register;
   using namespace nGi_Status_Register;
   using namespace nGi_Autoincrement_Register;
   using namespace nGi_Counting_Mode_Register;
   using namespace nGi_FifoStatusRegister;
   using namespace nGi_Second_Gate_Register;
   using namespace nGi_DMA_Config_Register;
   using namespace nGi_SampleClockCountRegister;
   using namespace nGi_RdFifoRegister;
   using namespace nGi_WrFifoRegister;
   using namespace nGi_SampleClockRegister;
   using namespace nGi_AuxCtrRegister;
   using namespace nGi_AuxCtrLoadA_Register;
   using namespace nGi_AuxCtrLoadB_Register;
   using namespace nGi_AutomaticLoadRegister;
   using namespace nGi_Interrupt1_Register;
   using namespace nGi_Interrupt2_Register;
   using namespace nGi_ABZ_Select_Register;
   using namespace nGi_Mode3_Register;
   using namespace nGi_Mode2_Register;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

