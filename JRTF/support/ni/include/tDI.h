// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tDI_h___
#define ___tDI_h___

// includes
#include "osiTypes.h"
#include "osiBus.h"
#include "tInTimer.h"
#include "tDIValues.h"


#ifndef ___tDIValues_h___
#include "tDIValues.h"
#endif

#ifndef nNIMXRegisterMap120_mBuildFieldId

// Algorithm:
//    Move lowermost 5 bits (4 through 0) of field id to uppermost 5 bits (31
//          through 27)
//    Move bit 5 of field id to bit 26
//    Move bit 6 of field id to bit 25
//    OR in the register id (which is allowed the remaining bits)
//
// Why not move the lowermost 7 bits directly to the uppermost 7 bits? Because
// we originally moved only the lowermost 5, and for backwards compatibility,
// we can't change where those 5 bits end up.
//
// For future expansion purposes, the bits beyond the first 5 are put in reverse
// order in the resulting combined id.
#define nNIMXRegisterMap120_mBuildFieldId(fieldId, regId) \
   ( \
     ((fieldId) << 27) | \
     ((((fieldId) >> 5) & 0x1) << 26) | \
     ((((fieldId) >> 6) & 0x1) << 25) | \
     (regId) \
   )

#endif

#ifndef nNIMXRegisterMap120_mExtractFieldId

// Algorithm: (basically the reverse of mBuildFieldId)
//    Move uppermost 5 bits (31 through 27) to lowermost 5 bits (4 through 0)
//    Move 26th bit to bit 5 (right-shifting by (26 - 5) is like right-shifting
//          by 26 then left-shifting by 5, but it's more efficient)
//    Move 25th bit to bit 6
#define nNIMXRegisterMap120_mExtractFieldId(id) \
   (unsigned int) \
   ( \
     (((id) >> 27) & 0x1F) | \
     (((id) & (0x1 << 26)) >> (26 - 5)) | \
     (((id) & (0x1 << 25)) >> (25 - 6)) \
   )

#endif

class tDI
{
public:
   tInTimer DI_Timer;

   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg8IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u8 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u8 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg16IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u16 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u16 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   //---------------------------------------------------------------------------
   // DI_ChangeDetectStatusRegister
   //---------------------------------------------------------------------------
   class tDI_ChangeDetectStatusRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x10,
         kId     = 0
      };
      tDI_ChangeDetectStatusRegister();


      typedef enum {
         kRegisterId                          = 0,
         kDI_ChangeDetectStatusId          = 1,
         kDI_ChangeDetectErrorId           = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDI_ChangeDetectStatusRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_ChangeDetectStatusRegister& setDI_ChangeDetectStatus(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeDetectStatus(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDI_ChangeDetectStatus(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_ChangeDetectStatusRegister& setDI_ChangeDetectError(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeDetectError(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDI_ChangeDetectError(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_ChangeDetectStatusRegister(const tDI_ChangeDetectStatusRegister&);
      tDI_ChangeDetectStatusRegister& operator=(const tDI_ChangeDetectStatusRegister&);

   };

   //---------------------------------------------------------------------------
   // DI_ChangeIrqRE_Register
   //---------------------------------------------------------------------------
   class tDI_ChangeIrqRE_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x10,
         kId     = 1
      };
      tDI_ChangeIrqRE_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_ChangeIrqREId                 = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_ChangeIrqRE_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_ChangeIrqRE_Register& setDI_ChangeIrqRE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeIrqRE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_ChangeIrqRE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_ChangeIrqRE(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_ChangeIrqRE_Register(const tDI_ChangeIrqRE_Register&);
      tDI_ChangeIrqRE_Register& operator=(const tDI_ChangeIrqRE_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_ChangeDetectLatchedDI_Register
   //---------------------------------------------------------------------------
   class tDI_ChangeDetectLatchedDI_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x14,
         kId     = 2
      };
      tDI_ChangeDetectLatchedDI_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_ChangeDetectLatchedDIId       = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDI_ChangeDetectLatchedDI_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_ChangeDetectLatchedDI_Register& setDI_ChangeDetectLatchedDI(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeDetectLatchedDI(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDI_ChangeDetectLatchedDI(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_ChangeDetectLatchedDI_Register(const tDI_ChangeDetectLatchedDI_Register&);
      tDI_ChangeDetectLatchedDI_Register& operator=(const tDI_ChangeDetectLatchedDI_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_ChangeIrqFE_Register
   //---------------------------------------------------------------------------
   class tDI_ChangeIrqFE_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x14,
         kId     = 3
      };
      tDI_ChangeIrqFE_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_ChangeIrqFEId                 = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_ChangeIrqFE_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_ChangeIrqFE_Register& setDI_ChangeIrqFE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeIrqFE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_ChangeIrqFE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_ChangeIrqFE(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_ChangeIrqFE_Register(const tDI_ChangeIrqFE_Register&);
      tDI_ChangeIrqFE_Register& operator=(const tDI_ChangeIrqFE_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_ChangeDetectLatchedPFI_Register
   //---------------------------------------------------------------------------
   class tDI_ChangeDetectLatchedPFI_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x18,
         kId     = 4
      };
      tDI_ChangeDetectLatchedPFI_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_ChangeDetectLatchedPFIId      = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDI_ChangeDetectLatchedPFI_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_ChangeDetectLatchedPFI_Register& setDI_ChangeDetectLatchedPFI(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_ChangeDetectLatchedPFI(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_ChangeDetectLatchedPFI(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_ChangeDetectLatchedPFI_Register(const tDI_ChangeDetectLatchedPFI_Register&);
      tDI_ChangeDetectLatchedPFI_Register& operator=(const tDI_ChangeDetectLatchedPFI_Register&);

   };

   //---------------------------------------------------------------------------
   // PFI_ChangeIrq_Register
   //---------------------------------------------------------------------------
   class tPFI_ChangeIrq_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x18,
         kId     = 5
      };
      tPFI_ChangeIrq_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_ChangeIrqREId                = 1,
         kPFI_ChangeIrqFEId                = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_ChangeIrq_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_ChangeIrq_Register& setPFI_ChangeIrqRE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPFI_ChangeIrqRE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_ChangeIrqRE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readPFI_ChangeIrqRE(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_ChangeIrq_Register& setPFI_ChangeIrqFE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPFI_ChangeIrqFE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_ChangeIrqFE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readPFI_ChangeIrqFE(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_ChangeIrq_Register(const tPFI_ChangeIrq_Register&);
      tPFI_ChangeIrq_Register& operator=(const tPFI_ChangeIrq_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_ChangeDetectIRQ_Register
   //---------------------------------------------------------------------------
   class tDI_ChangeDetectIRQ_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x24,
         kId     = 6
      };
      tDI_ChangeDetectIRQ_Register();


      typedef enum {
         kRegisterId                          = 0,
         kChangeDetectIRQ_AcknowledgeId    = 1,
         kChangeDetectErrorIRQ_AcknowledgeId     = 2,
         kChangeDetectIRQ_DisableId        = 4,
         kChangeDetectIRQ_EnableId         = 5,
         kChangeDetectErrorIRQ_DisableId   = 6,
         kChangeDetectErrorIRQ_EnableId    = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeChangeDetectIRQ_Acknowledge(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeChangeDetectErrorIRQ_Acknowledge(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeChangeDetectIRQ_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeChangeDetectIRQ_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeChangeDetectErrorIRQ_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeChangeDetectErrorIRQ_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_ChangeDetectIRQ_Register(const tDI_ChangeDetectIRQ_Register&);
      tDI_ChangeDetectIRQ_Register& operator=(const tDI_ChangeDetectIRQ_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_DMA_Select_Register
   //---------------------------------------------------------------------------
   class tDI_DMA_Select_Register : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x0,
         kId     = 7
      };
      tDI_DMA_Select_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_DoneNotificationEnableId      = 3,
         kMaxFieldId                          = 3
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_DMA_Select_Register& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_DMA_Select_Register& setDI_DoneNotificationEnable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getDI_DoneNotificationEnable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_DoneNotificationEnable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readDI_DoneNotificationEnable(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_DMA_Select_Register(const tDI_DMA_Select_Register&);
      tDI_DMA_Select_Register& operator=(const tDI_DMA_Select_Register&);

   };

   //---------------------------------------------------------------------------
   // Static_Digital_Input_Register
   //---------------------------------------------------------------------------
   class tStatic_Digital_Input_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x0,
         kId     = 8
      };
      tStatic_Digital_Input_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_StaticValueId                 = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tStatic_Digital_Input_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tStatic_Digital_Input_Register& setDI_StaticValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_StaticValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDI_StaticValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tStatic_Digital_Input_Register(const tStatic_Digital_Input_Register&);
      tStatic_Digital_Input_Register& operator=(const tStatic_Digital_Input_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_FIFO_St_Register
   //---------------------------------------------------------------------------
   class tDI_FIFO_St_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x4,
         kId     = 9
      };
      tDI_FIFO_St_Register();


      typedef enum {
         kRegisterId                          = 0,
         kCDI_FIFO_FullCountId             = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDI_FIFO_St_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_FIFO_St_Register& setCDI_FIFO_FullCount(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getCDI_FIFO_FullCount(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readCDI_FIFO_FullCount(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_FIFO_St_Register(const tDI_FIFO_St_Register&);
      tDI_FIFO_St_Register& operator=(const tDI_FIFO_St_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_Mode_Register
   //---------------------------------------------------------------------------
   class tDI_Mode_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x4,
         kId     = 10
      };
      tDI_Mode_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_DigitalFiltersModeId          = 2,
         kDI_Data_LaneId                   = 3,
         kDI_DataWidthId                   = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_Mode_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_Mode_Register& setDI_DigitalFiltersMode(nDI::tDI_FilterMode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_FilterMode_t getDI_DigitalFiltersMode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_DigitalFiltersMode(nDI::tDI_FilterMode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_FilterMode_t readDI_DigitalFiltersMode(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Mode_Register& setDI_Data_Lane(nDI::tDI_Data_Lane_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Data_Lane_t getDI_Data_Lane(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Data_Lane(nDI::tDI_Data_Lane_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Data_Lane_t readDI_Data_Lane(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Mode_Register& setDI_DataWidth(nDI::tDI_DataWidth_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_DataWidth_t getDI_DataWidth(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_DataWidth(nDI::tDI_DataWidth_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_DataWidth_t readDI_DataWidth(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_Mode_Register(const tDI_Mode_Register&);
      tDI_Mode_Register& operator=(const tDI_Mode_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_FIFO_Data_Register
   //---------------------------------------------------------------------------
   class tDI_FIFO_Data_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x8,
         kId     = 11
      };
      tDI_FIFO_Data_Register();


      typedef enum {
         kRegisterId                          = 0,
         kCDI_FIFO_DataId                  = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDI_FIFO_Data_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_FIFO_Data_Register& setCDI_FIFO_Data(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getCDI_FIFO_Data(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readCDI_FIFO_Data(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_FIFO_Data_Register(const tDI_FIFO_Data_Register&);
      tDI_FIFO_Data_Register& operator=(const tDI_FIFO_Data_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_FIFO_Data_Register16
   //---------------------------------------------------------------------------
   class tDI_FIFO_Data_Register16 : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x8,
         kId     = 12
      };
      tDI_FIFO_Data_Register16();


      typedef enum {
         kRegisterId                          = 0,
         kCDI_FIFO_Data16Id                = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDI_FIFO_Data_Register16& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_FIFO_Data_Register16& setCDI_FIFO_Data16(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getCDI_FIFO_Data16(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readCDI_FIFO_Data16(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_FIFO_Data_Register16(const tDI_FIFO_Data_Register16&);
      tDI_FIFO_Data_Register16& operator=(const tDI_FIFO_Data_Register16&);

   };

   //---------------------------------------------------------------------------
   // DI_FIFO_Data_Register8
   //---------------------------------------------------------------------------
   class tDI_FIFO_Data_Register8 : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x8,
         kId     = 13
      };
      tDI_FIFO_Data_Register8();


      typedef enum {
         kRegisterId                          = 0,
         kCDI_FIFO_Data8Id                 = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDI_FIFO_Data_Register8& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_FIFO_Data_Register8& setCDI_FIFO_Data8(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getCDI_FIFO_Data8(nMDBG::tStatus2* statusChain = NULL) const;

      inline u8 readCDI_FIFO_Data8(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_FIFO_Data_Register8(const tDI_FIFO_Data_Register8&);
      tDI_FIFO_Data_Register8& operator=(const tDI_FIFO_Data_Register8&);

   };

   //---------------------------------------------------------------------------
   // DI_Mask_Enable_Register
   //---------------------------------------------------------------------------
   class tDI_Mask_Enable_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x8,
         kId     = 14
      };
      tDI_Mask_Enable_Register();


      typedef enum {
         kRegisterId                          = 0,
         kCDI_MaskId                       = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_Mask_Enable_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_Mask_Enable_Register& setCDI_Mask(nDI::tDI_Mask_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Mask_t getCDI_Mask(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeCDI_Mask(nDI::tDI_Mask_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Mask_t readCDI_Mask(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_Mask_Enable_Register(const tDI_Mask_Enable_Register&);
      tDI_Mask_Enable_Register& operator=(const tDI_Mask_Enable_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_Trigger_Select_Register
   //---------------------------------------------------------------------------
   class tDI_Trigger_Select_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0xc,
         kId     = 15
      };
      tDI_Trigger_Select_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_START1_SelectId               = 1,
         kDI_START1_EdgeId                 = 2,
         kDI_START1_PolarityId             = 3,
         kDI_START2_SelectId               = 4,
         kDI_START2_EdgeId                 = 5,
         kDI_START2_PolarityId             = 6,
         kDI_External_Gate_SelectId        = 7,
         kDI_External_Gate_PolarityId      = 9,
         kDI_CONVERT_Source_SelectId       = 10,
         kDI_CONVERT_Source_PolarityId     = 12,
         kMaxFieldId                          = 12
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_Trigger_Select_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_Trigger_Select_Register& setDI_START1_Select(nDI::tDI_START1_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_START1_Select_t getDI_START1_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_START1_Select(nDI::tDI_START1_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_START1_Select_t readDI_START1_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Trigger_Select_Register& setDI_START1_Edge(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_START1_Edge(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_START1_Edge(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_START1_Edge(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Trigger_Select_Register& setDI_START1_Polarity(nDI::tDI_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Polarity_t getDI_START1_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_START1_Polarity(nDI::tDI_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Polarity_t readDI_START1_Polarity(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Trigger_Select_Register& setDI_START2_Select(nDI::tDI_START2_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_START2_Select_t getDI_START2_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_START2_Select(nDI::tDI_START2_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_START2_Select_t readDI_START2_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Trigger_Select_Register& setDI_START2_Edge(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_START2_Edge(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_START2_Edge(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_START2_Edge(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Trigger_Select_Register& setDI_START2_Polarity(nDI::tDI_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Polarity_t getDI_START2_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_START2_Polarity(nDI::tDI_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Polarity_t readDI_START2_Polarity(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Trigger_Select_Register& setDI_External_Gate_Select(nDI::tDI_External_Gate_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_External_Gate_Select_t getDI_External_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_External_Gate_Select(nDI::tDI_External_Gate_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_External_Gate_Select_t readDI_External_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Trigger_Select_Register& setDI_External_Gate_Polarity(nDI::tDI_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Polarity_t getDI_External_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_External_Gate_Polarity(nDI::tDI_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Polarity_t readDI_External_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Trigger_Select_Register& setDI_CONVERT_Source_Select(nDI::tDI_StartConvertSelMux_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_StartConvertSelMux_t getDI_CONVERT_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_CONVERT_Source_Select(nDI::tDI_StartConvertSelMux_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_StartConvertSelMux_t readDI_CONVERT_Source_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Trigger_Select_Register& setDI_CONVERT_Source_Polarity(nDI::tDI_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Polarity_t getDI_CONVERT_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_CONVERT_Source_Polarity(nDI::tDI_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Polarity_t readDI_CONVERT_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_Trigger_Select_Register(const tDI_Trigger_Select_Register&);
      tDI_Trigger_Select_Register& operator=(const tDI_Trigger_Select_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_FilterRegisterLo
   //---------------------------------------------------------------------------
   class tDI_FilterRegisterLo : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x1c,
         kId     = 16
      };
      tDI_FilterRegisterLo();


      typedef enum {
         kRegisterId                          = 0,
         kDI0_Filter_SelectId              = 1,
         kDI1_Filter_SelectId              = 2,
         kDI2_Filter_SelectId              = 3,
         kDI3_Filter_SelectId              = 4,
         kDI4_Filter_SelectId              = 5,
         kDI5_Filter_SelectId              = 6,
         kDI6_Filter_SelectId              = 7,
         kDI7_Filter_SelectId              = 8,
         kDI8_Filter_SelectId              = 9,
         kDI9_Filter_SelectId              = 10,
         kDI10_Filter_SelectId             = 11,
         kDI11_Filter_SelectId             = 12,
         kDI12_Filter_SelectId             = 13,
         kDI13_Filter_SelectId             = 14,
         kDI14_Filter_SelectId             = 15,
         kDI15_Filter_SelectId             = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_FilterRegisterLo& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_FilterRegisterLo& setDI0_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI0_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI0_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI0_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI1_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI1_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI1_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI1_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI2_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI2_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI2_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI2_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI3_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI3_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI3_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI3_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI4_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI4_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI4_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI4_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI5_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI5_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI5_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI5_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI6_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI6_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI6_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI6_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI7_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI7_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI7_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI7_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI8_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI8_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI8_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI8_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI9_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI9_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI9_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI9_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI10_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI10_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI10_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI10_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI11_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI11_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI11_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI11_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI12_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI12_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI12_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI12_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI13_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI13_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI13_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI13_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI14_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI14_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI14_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI14_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterLo& setDI15_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI15_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI15_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI15_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_FilterRegisterLo(const tDI_FilterRegisterLo&);
      tDI_FilterRegisterLo& operator=(const tDI_FilterRegisterLo&);

   };

   //---------------------------------------------------------------------------
   // DI_FilterRegisterHi
   //---------------------------------------------------------------------------
   class tDI_FilterRegisterHi : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDI tRegisterMap;

      enum {
         kOffset = 0x20,
         kId     = 17
      };
      tDI_FilterRegisterHi();


      typedef enum {
         kRegisterId                          = 0,
         kDI16_Filter_SelectId             = 1,
         kDI17_Filter_SelectId             = 2,
         kDI18_Filter_SelectId             = 3,
         kDI19_Filter_SelectId             = 4,
         kDI20_Filter_SelectId             = 5,
         kDI21_Filter_SelectId             = 6,
         kDI22_Filter_SelectId             = 7,
         kDI23_Filter_SelectId             = 8,
         kDI24_Filter_SelectId             = 9,
         kDI25_Filter_SelectId             = 10,
         kDI26_Filter_SelectId             = 11,
         kDI27_Filter_SelectId             = 12,
         kDI28_Filter_SelectId             = 13,
         kDI29_Filter_SelectId             = 14,
         kDI30_Filter_SelectId             = 15,
         kDI31_Filter_SelectId             = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_FilterRegisterHi& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_FilterRegisterHi& setDI16_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI16_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI16_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI16_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI17_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI17_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI17_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI17_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI18_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI18_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI18_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI18_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI19_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI19_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI19_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI19_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI20_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI20_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI20_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI20_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI21_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI21_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI21_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI21_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI22_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI22_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI22_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI22_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI23_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI23_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI23_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI23_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI24_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI24_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI24_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI24_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI25_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI25_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI25_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI25_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI26_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI26_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI26_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI26_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI27_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI27_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI27_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI27_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI28_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI28_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI28_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI28_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI29_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI29_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI29_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI29_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI30_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI30_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI30_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI30_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegisterHi& setDI31_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDI::tDI_Filter_Select_t getDI31_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI31_Filter_Select(nDI::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDI::tDI_Filter_Select_t readDI31_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_FilterRegisterHi(const tDI_FilterRegisterHi&);
      tDI_FilterRegisterHi& operator=(const tDI_FilterRegisterHi&);

   };

   //---------------------------------------------------------------------------
   // DI_ChangeDetectStatusRegister
   //---------------------------------------------------------------------------
   tDI_ChangeDetectStatusRegister DI_ChangeDetectStatusRegister;

   //---------------------------------------------------------------------------
   // DI_ChangeIrqRE_Register
   //---------------------------------------------------------------------------
   tDI_ChangeIrqRE_Register DI_ChangeIrqRE_Register;

   //---------------------------------------------------------------------------
   // DI_ChangeDetectLatchedDI_Register
   //---------------------------------------------------------------------------
   tDI_ChangeDetectLatchedDI_Register DI_ChangeDetectLatchedDI_Register;

   //---------------------------------------------------------------------------
   // DI_ChangeIrqFE_Register
   //---------------------------------------------------------------------------
   tDI_ChangeIrqFE_Register DI_ChangeIrqFE_Register;

   //---------------------------------------------------------------------------
   // DI_ChangeDetectLatchedPFI_Register
   //---------------------------------------------------------------------------
   tDI_ChangeDetectLatchedPFI_Register DI_ChangeDetectLatchedPFI_Register;

   //---------------------------------------------------------------------------
   // PFI_ChangeIrq_Register
   //---------------------------------------------------------------------------
   tPFI_ChangeIrq_Register PFI_ChangeIrq_Register;

   //---------------------------------------------------------------------------
   // DI_ChangeDetectIRQ_Register
   //---------------------------------------------------------------------------
   tDI_ChangeDetectIRQ_Register DI_ChangeDetectIRQ_Register;

   //---------------------------------------------------------------------------
   // DI_DMA_Select_Register
   //---------------------------------------------------------------------------
   tDI_DMA_Select_Register DI_DMA_Select_Register;

   //---------------------------------------------------------------------------
   // Static_Digital_Input_Register
   //---------------------------------------------------------------------------
   tStatic_Digital_Input_Register Static_Digital_Input_Register;

   //---------------------------------------------------------------------------
   // DI_FIFO_St_Register
   //---------------------------------------------------------------------------
   tDI_FIFO_St_Register DI_FIFO_St_Register;

   //---------------------------------------------------------------------------
   // DI_Mode_Register
   //---------------------------------------------------------------------------
   tDI_Mode_Register DI_Mode_Register;

   //---------------------------------------------------------------------------
   // DI_FIFO_Data_Register
   //---------------------------------------------------------------------------
   tDI_FIFO_Data_Register DI_FIFO_Data_Register;

   //---------------------------------------------------------------------------
   // DI_FIFO_Data_Register16
   //---------------------------------------------------------------------------
   tDI_FIFO_Data_Register16 DI_FIFO_Data_Register16;

   //---------------------------------------------------------------------------
   // DI_FIFO_Data_Register8
   //---------------------------------------------------------------------------
   tDI_FIFO_Data_Register8 DI_FIFO_Data_Register8;

   //---------------------------------------------------------------------------
   // DI_Mask_Enable_Register
   //---------------------------------------------------------------------------
   tDI_Mask_Enable_Register DI_Mask_Enable_Register;

   //---------------------------------------------------------------------------
   // DI_Trigger_Select_Register
   //---------------------------------------------------------------------------
   tDI_Trigger_Select_Register DI_Trigger_Select_Register;

   //---------------------------------------------------------------------------
   // DI_FilterRegisterLo
   //---------------------------------------------------------------------------
   tDI_FilterRegisterLo DI_FilterRegisterLo;

   //---------------------------------------------------------------------------
   // DI_FilterRegisterHi
   //---------------------------------------------------------------------------
   tDI_FilterRegisterHi DI_FilterRegisterHi;

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kDI_ChangeDetectStatusRegisterId  = 0,
      kDI_ChangeDetectStatusId          = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectStatusRegister::kDI_ChangeDetectStatusId, kDI_ChangeDetectStatusRegisterId),
      kDI_ChangeDetectErrorId           = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectStatusRegister::kDI_ChangeDetectErrorId, kDI_ChangeDetectStatusRegisterId),

      kDI_ChangeIrqRE_RegisterId        = 1,
      kDI_ChangeIrqREId                 = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeIrqRE_Register::kDI_ChangeIrqREId, kDI_ChangeIrqRE_RegisterId),

      kDI_ChangeDetectLatchedDI_RegisterId      = 2,
      kDI_ChangeDetectLatchedDIId       = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectLatchedDI_Register::kDI_ChangeDetectLatchedDIId, kDI_ChangeDetectLatchedDI_RegisterId),

      kDI_ChangeIrqFE_RegisterId        = 3,
      kDI_ChangeIrqFEId                 = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeIrqFE_Register::kDI_ChangeIrqFEId, kDI_ChangeIrqFE_RegisterId),

      kDI_ChangeDetectLatchedPFI_RegisterId       = 4,
      kDI_ChangeDetectLatchedPFIId      = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectLatchedPFI_Register::kDI_ChangeDetectLatchedPFIId, kDI_ChangeDetectLatchedPFI_RegisterId),

      kPFI_ChangeIrq_RegisterId         = 5,
      kPFI_ChangeIrqREId                = nNIMXRegisterMap120_mBuildFieldId(tPFI_ChangeIrq_Register::kPFI_ChangeIrqREId, kPFI_ChangeIrq_RegisterId),
      kPFI_ChangeIrqFEId                = nNIMXRegisterMap120_mBuildFieldId(tPFI_ChangeIrq_Register::kPFI_ChangeIrqFEId, kPFI_ChangeIrq_RegisterId),

      kDI_ChangeDetectIRQ_RegisterId    = 6,
      kChangeDetectIRQ_AcknowledgeId    = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectIRQ_Register::kChangeDetectIRQ_AcknowledgeId, kDI_ChangeDetectIRQ_RegisterId),
      kChangeDetectErrorIRQ_AcknowledgeId     = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectIRQ_Register::kChangeDetectErrorIRQ_AcknowledgeId, kDI_ChangeDetectIRQ_RegisterId),
      kChangeDetectIRQ_DisableId        = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectIRQ_Register::kChangeDetectIRQ_DisableId, kDI_ChangeDetectIRQ_RegisterId),
      kChangeDetectIRQ_EnableId         = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectIRQ_Register::kChangeDetectIRQ_EnableId, kDI_ChangeDetectIRQ_RegisterId),
      kChangeDetectErrorIRQ_DisableId   = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectIRQ_Register::kChangeDetectErrorIRQ_DisableId, kDI_ChangeDetectIRQ_RegisterId),
      kChangeDetectErrorIRQ_EnableId    = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectIRQ_Register::kChangeDetectErrorIRQ_EnableId, kDI_ChangeDetectIRQ_RegisterId),

      kDI_DMA_Select_RegisterId         = 7,
      kDI_DoneNotificationEnableId      = nNIMXRegisterMap120_mBuildFieldId(tDI_DMA_Select_Register::kDI_DoneNotificationEnableId, kDI_DMA_Select_RegisterId),

      kStatic_Digital_Input_RegisterId  = 8,
      kDI_StaticValueId                 = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Input_Register::kDI_StaticValueId, kStatic_Digital_Input_RegisterId),

      kDI_FIFO_St_RegisterId            = 9,
      kCDI_FIFO_FullCountId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FIFO_St_Register::kCDI_FIFO_FullCountId, kDI_FIFO_St_RegisterId),

      kDI_Mode_RegisterId               = 10,
      kDI_DigitalFiltersModeId          = nNIMXRegisterMap120_mBuildFieldId(tDI_Mode_Register::kDI_DigitalFiltersModeId, kDI_Mode_RegisterId),
      kDI_Data_LaneId                   = nNIMXRegisterMap120_mBuildFieldId(tDI_Mode_Register::kDI_Data_LaneId, kDI_Mode_RegisterId),
      kDI_DataWidthId                   = nNIMXRegisterMap120_mBuildFieldId(tDI_Mode_Register::kDI_DataWidthId, kDI_Mode_RegisterId),

      kDI_FIFO_Data_RegisterId          = 11,
      kCDI_FIFO_DataId                  = nNIMXRegisterMap120_mBuildFieldId(tDI_FIFO_Data_Register::kCDI_FIFO_DataId, kDI_FIFO_Data_RegisterId),

      kDI_FIFO_Data_Register16Id        = 12,
      kCDI_FIFO_Data16Id                = nNIMXRegisterMap120_mBuildFieldId(tDI_FIFO_Data_Register16::kCDI_FIFO_Data16Id, kDI_FIFO_Data_Register16Id),

      kDI_FIFO_Data_Register8Id         = 13,
      kCDI_FIFO_Data8Id                 = nNIMXRegisterMap120_mBuildFieldId(tDI_FIFO_Data_Register8::kCDI_FIFO_Data8Id, kDI_FIFO_Data_Register8Id),

      kDI_Mask_Enable_RegisterId        = 14,
      kCDI_MaskId                       = nNIMXRegisterMap120_mBuildFieldId(tDI_Mask_Enable_Register::kCDI_MaskId, kDI_Mask_Enable_RegisterId),

      kDI_Trigger_Select_RegisterId     = 15,
      kDI_START1_SelectId               = nNIMXRegisterMap120_mBuildFieldId(tDI_Trigger_Select_Register::kDI_START1_SelectId, kDI_Trigger_Select_RegisterId),
      kDI_START1_EdgeId                 = nNIMXRegisterMap120_mBuildFieldId(tDI_Trigger_Select_Register::kDI_START1_EdgeId, kDI_Trigger_Select_RegisterId),
      kDI_START1_PolarityId             = nNIMXRegisterMap120_mBuildFieldId(tDI_Trigger_Select_Register::kDI_START1_PolarityId, kDI_Trigger_Select_RegisterId),
      kDI_START2_SelectId               = nNIMXRegisterMap120_mBuildFieldId(tDI_Trigger_Select_Register::kDI_START2_SelectId, kDI_Trigger_Select_RegisterId),
      kDI_START2_EdgeId                 = nNIMXRegisterMap120_mBuildFieldId(tDI_Trigger_Select_Register::kDI_START2_EdgeId, kDI_Trigger_Select_RegisterId),
      kDI_START2_PolarityId             = nNIMXRegisterMap120_mBuildFieldId(tDI_Trigger_Select_Register::kDI_START2_PolarityId, kDI_Trigger_Select_RegisterId),
      kDI_External_Gate_SelectId        = nNIMXRegisterMap120_mBuildFieldId(tDI_Trigger_Select_Register::kDI_External_Gate_SelectId, kDI_Trigger_Select_RegisterId),
      kDI_External_Gate_PolarityId      = nNIMXRegisterMap120_mBuildFieldId(tDI_Trigger_Select_Register::kDI_External_Gate_PolarityId, kDI_Trigger_Select_RegisterId),
      kDI_CONVERT_Source_SelectId       = nNIMXRegisterMap120_mBuildFieldId(tDI_Trigger_Select_Register::kDI_CONVERT_Source_SelectId, kDI_Trigger_Select_RegisterId),
      kDI_CONVERT_Source_PolarityId     = nNIMXRegisterMap120_mBuildFieldId(tDI_Trigger_Select_Register::kDI_CONVERT_Source_PolarityId, kDI_Trigger_Select_RegisterId),

      kDI_FilterRegisterLoId            = 16,
      kDI0_Filter_SelectId              = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI0_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI1_Filter_SelectId              = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI1_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI2_Filter_SelectId              = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI2_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI3_Filter_SelectId              = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI3_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI4_Filter_SelectId              = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI4_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI5_Filter_SelectId              = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI5_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI6_Filter_SelectId              = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI6_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI7_Filter_SelectId              = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI7_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI8_Filter_SelectId              = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI8_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI9_Filter_SelectId              = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI9_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI10_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI10_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI11_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI11_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI12_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI12_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI13_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI13_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI14_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI14_Filter_SelectId, kDI_FilterRegisterLoId),
      kDI15_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterLo::kDI15_Filter_SelectId, kDI_FilterRegisterLoId),

      kDI_FilterRegisterHiId            = 17,
      kDI16_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI16_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI17_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI17_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI18_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI18_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI19_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI19_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI20_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI20_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI21_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI21_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI22_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI22_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI23_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI23_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI24_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI24_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI25_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI25_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI26_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI26_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI27_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI27_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI28_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI28_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI29_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI29_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI30_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI30_Filter_SelectId, kDI_FilterRegisterHiId),
      kDI31_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegisterHi::kDI31_Filter_SelectId, kDI_FilterRegisterHiId),


      kMaxRegisterId = 17

   } tId;

   tDI(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   tDI();
   void initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tDI();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline tBoolean isDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(tId id, nMDBG::tStatus2* statusChain = NULL);

   inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(nMDBG::tStatus2* statusChain = NULL);

private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   u32 _addressOffset;
   u8 _dirtyVector[18];

};

#ifndef ___tDI_ipp___
#ifndef ___tDI_h_no_inline___
#include "tDI.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

