// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tDMAController_h___
#define ___tDMAController_h___

// includes
#include "osiTypes.h"
#include "osiBus.h"

#ifndef ___tDMAControllerValues_h___
#include "tDMAControllerValues.h"
#endif

#ifndef nNIMXRegisterMap120_mBuildFieldId

// Algorithm:
//    Move lowermost 5 bits (4 through 0) of field id to uppermost 5 bits (31
//          through 27)
//    Move bit 5 of field id to bit 26
//    Move bit 6 of field id to bit 25
//    OR in the register id (which is allowed the remaining bits)
//
// Why not move the lowermost 7 bits directly to the uppermost 7 bits? Because
// we originally moved only the lowermost 5, and for backwards compatibility,
// we can't change where those 5 bits end up.
//
// For future expansion purposes, the bits beyond the first 5 are put in reverse
// order in the resulting combined id.
#define nNIMXRegisterMap120_mBuildFieldId(fieldId, regId) \
   ( \
     ((fieldId) << 27) | \
     ((((fieldId) >> 5) & 0x1) << 26) | \
     ((((fieldId) >> 6) & 0x1) << 25) | \
     (regId) \
   )

#endif

#ifndef nNIMXRegisterMap120_mExtractFieldId

// Algorithm: (basically the reverse of mBuildFieldId)
//    Move uppermost 5 bits (31 through 27) to lowermost 5 bits (4 through 0)
//    Move 26th bit to bit 5 (right-shifting by (26 - 5) is like right-shifting
//          by 26 then left-shifting by 5, but it's more efficient)
//    Move 25th bit to bit 6
#define nNIMXRegisterMap120_mExtractFieldId(id) \
   (unsigned int) \
   ( \
     (((id) >> 27) & 0x1F) | \
     (((id) & (0x1 << 26)) >> (26 - 5)) | \
     (((id) & (0x1 << 25)) >> (25 - 6)) \
   )

#endif

class tDMAController
{
public:
   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   //---------------------------------------------------------------------------
   // Channel_Memory_Address_Register_LSW
   //---------------------------------------------------------------------------
   class tChannel_Memory_Address_Register_LSW : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x38,
         kId     = 0
      };
      tChannel_Memory_Address_Register_LSW();


      typedef enum {
         kRegisterId                          = 0,
         kMemory_Address_LSWId             = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline void writeMemory_Address_LSW(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readMemory_Address_LSW(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Memory_Address_Register_LSW(const tChannel_Memory_Address_Register_LSW&);
      tChannel_Memory_Address_Register_LSW& operator=(const tChannel_Memory_Address_Register_LSW&);

   };

   //---------------------------------------------------------------------------
   // Channel_Memory_Address_Register_MSW
   //---------------------------------------------------------------------------
   class tChannel_Memory_Address_Register_MSW : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x3c,
         kId     = 1
      };
      tChannel_Memory_Address_Register_MSW();


      typedef enum {
         kRegisterId                          = 0,
         kMemory_Address_MSWId             = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline void writeMemory_Address_MSW(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readMemory_Address_MSW(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Memory_Address_Register_MSW(const tChannel_Memory_Address_Register_MSW&);
      tChannel_Memory_Address_Register_MSW& operator=(const tChannel_Memory_Address_Register_MSW&);

   };

   //---------------------------------------------------------------------------
   // Channel_Link_Address_Register_LSW
   //---------------------------------------------------------------------------
   class tChannel_Link_Address_Register_LSW : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x48,
         kId     = 2
      };
      tChannel_Link_Address_Register_LSW();


      typedef enum {
         kRegisterId                          = 0,
         kLink_Address_LSWId               = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline void writeLink_Address_LSW(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readLink_Address_LSW(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Link_Address_Register_LSW(const tChannel_Link_Address_Register_LSW&);
      tChannel_Link_Address_Register_LSW& operator=(const tChannel_Link_Address_Register_LSW&);

   };

   //---------------------------------------------------------------------------
   // Channel_Link_Address_Register_MSW
   //---------------------------------------------------------------------------
   class tChannel_Link_Address_Register_MSW : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x4c,
         kId     = 3
      };
      tChannel_Link_Address_Register_MSW();


      typedef enum {
         kRegisterId                          = 0,
         kLink_Address_MSWId               = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline void writeLink_Address_MSW(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readLink_Address_MSW(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Link_Address_Register_MSW(const tChannel_Link_Address_Register_MSW&);
      tChannel_Link_Address_Register_MSW& operator=(const tChannel_Link_Address_Register_MSW&);

   };

   //---------------------------------------------------------------------------
   // Channel_Link_Size_Register
   //---------------------------------------------------------------------------
   class tChannel_Link_Size_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x50,
         kId     = 4
      };
      tChannel_Link_Size_Register();


      typedef enum {
         kRegisterId                          = 0,
         kLink_SizeId                      = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline void writeLink_Size(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readLink_Size(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Link_Size_Register(const tChannel_Link_Size_Register&);
      tChannel_Link_Size_Register& operator=(const tChannel_Link_Size_Register&);

   };

   //---------------------------------------------------------------------------
   // Channel_Control_Register
   //---------------------------------------------------------------------------
   class tChannel_Control_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x54,
         kId     = 5
      };
      tChannel_Control_Register();


      typedef enum {
         kRegisterId                          = 0,
         kMODEId                           = 1,
         kNotify_On_DoneId                 = 9,
         kNotify_On_Total_CountId          = 17,
         kNotify_On_Last_LinkId            = 18,
         kNotify_On_ErrorId                = 19,
         kMaxFieldId                          = 19
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tChannel_Control_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tChannel_Control_Register& setMODE(nDMAController::tDMA_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDMAController::tDMA_Mode_t getMODE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeMODE(nDMAController::tDMA_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline nDMAController::tDMA_Mode_t readMODE(nMDBG::tStatus2* statusChain = NULL);

      inline tChannel_Control_Register& setNotify_On_Done(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getNotify_On_Done(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeNotify_On_Done(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline u32 readNotify_On_Done(nMDBG::tStatus2* statusChain = NULL);

      inline tChannel_Control_Register& setNotify_On_Total_Count(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getNotify_On_Total_Count(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeNotify_On_Total_Count(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline u32 readNotify_On_Total_Count(nMDBG::tStatus2* statusChain = NULL);

      inline tChannel_Control_Register& setNotify_On_Last_Link(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getNotify_On_Last_Link(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeNotify_On_Last_Link(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline u32 readNotify_On_Last_Link(nMDBG::tStatus2* statusChain = NULL);

      inline tChannel_Control_Register& setNotify_On_Error(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getNotify_On_Error(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeNotify_On_Error(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline u32 readNotify_On_Error(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Control_Register(const tChannel_Control_Register&);
      tChannel_Control_Register& operator=(const tChannel_Control_Register&);

   };

   //---------------------------------------------------------------------------
   // Channel_Operation_Register
   //---------------------------------------------------------------------------
   class tChannel_Operation_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x58,
         kId     = 6
      };
      tChannel_Operation_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSTARTId                          = 1,
         kSTOPId                           = 2,
         kCLR_TTCId                        = 3,
         kArm_Total_Count_IntId            = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tChannel_Operation_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tChannel_Operation_Register& setSTART(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getSTART(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSTART(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline u32 readSTART(nMDBG::tStatus2* statusChain = NULL);

      inline tChannel_Operation_Register& setSTOP(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getSTOP(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSTOP(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline u32 readSTOP(nMDBG::tStatus2* statusChain = NULL);

      inline tChannel_Operation_Register& setCLR_TTC(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getCLR_TTC(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeCLR_TTC(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline u32 readCLR_TTC(nMDBG::tStatus2* statusChain = NULL);

      inline tChannel_Operation_Register& setArm_Total_Count_Int(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getArm_Total_Count_Int(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeArm_Total_Count_Int(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kTrue);

      inline u32 readArm_Total_Count_Int(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Operation_Register(const tChannel_Operation_Register&);
      tChannel_Operation_Register& operator=(const tChannel_Operation_Register&);

   };

   //---------------------------------------------------------------------------
   // Channel_Status_Register
   //---------------------------------------------------------------------------
   class tChannel_Status_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x60,
         kId     = 7
      };
      tChannel_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSTREAMId                         = 1,
         kLink_ReadyId                     = 4,
         kDoneId                           = 5,
         kTotal_CountId                    = 8,
         kLast_LinkId                      = 9,
         kErrorId                          = 10,
         kAdditional_IntId                 = 12,
         kIntId                            = 13,
         kMaxFieldId                          = 13
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline u32 readSTREAM(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readLink_Ready(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readDone(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readTotal_Count(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readLast_Link(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readError(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readAdditional_Int(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readInt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Status_Register(const tChannel_Status_Register&);
      tChannel_Status_Register& operator=(const tChannel_Status_Register&);

   };

   //---------------------------------------------------------------------------
   // Channel_Volatile_Status_Register
   //---------------------------------------------------------------------------
   class tChannel_Volatile_Status_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x68,
         kId     = 8
      };
      tChannel_Volatile_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kVol_STREAMId                     = 1,
         kVol_Link_ReadyId                 = 4,
         kVol_DoneId                       = 5,
         kVol_Total_CountId                = 8,
         kVol_Last_LinkId                  = 9,
         kVol_ErrorId                      = 10,
         kVol_Additional_IntId             = 12,
         kVol_IntId                        = 13,
         kMaxFieldId                          = 13
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline u32 readVol_STREAM(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readVol_Link_Ready(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readVol_Done(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readVol_Total_Count(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readVol_Last_Link(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readVol_Error(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readVol_Additional_Int(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readVol_Int(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Volatile_Status_Register(const tChannel_Volatile_Status_Register&);
      tChannel_Volatile_Status_Register& operator=(const tChannel_Volatile_Status_Register&);

   };

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Compare_Register_LSW
   //---------------------------------------------------------------------------
   class tChannel_Total_Transfer_Count_Compare_Register_LSW : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x90,
         kId     = 9
      };
      tChannel_Total_Transfer_Count_Compare_Register_LSW();


      typedef enum {
         kRegisterId                          = 0,
         kTCC_LSWId                        = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline void writeTCC_LSW(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readTCC_LSW(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Total_Transfer_Count_Compare_Register_LSW(const tChannel_Total_Transfer_Count_Compare_Register_LSW&);
      tChannel_Total_Transfer_Count_Compare_Register_LSW& operator=(const tChannel_Total_Transfer_Count_Compare_Register_LSW&);

   };

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Compare_Register_MSW
   //---------------------------------------------------------------------------
   class tChannel_Total_Transfer_Count_Compare_Register_MSW : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0x94,
         kId     = 10
      };
      tChannel_Total_Transfer_Count_Compare_Register_MSW();


      typedef enum {
         kRegisterId                          = 0,
         kTCC_MSWId                        = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline void writeTCC_MSW(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readTCC_MSW(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Total_Transfer_Count_Compare_Register_MSW(const tChannel_Total_Transfer_Count_Compare_Register_MSW&);
      tChannel_Total_Transfer_Count_Compare_Register_MSW& operator=(const tChannel_Total_Transfer_Count_Compare_Register_MSW&);

   };

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Status_Register_LSW
   //---------------------------------------------------------------------------
   class tChannel_Total_Transfer_Count_Status_Register_LSW : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0xa0,
         kId     = 11
      };
      tChannel_Total_Transfer_Count_Status_Register_LSW();


      typedef enum {
         kRegisterId                          = 0,
         kTTCS_LSWId                       = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline u32 readTTCS_LSW(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Total_Transfer_Count_Status_Register_LSW(const tChannel_Total_Transfer_Count_Status_Register_LSW&);
      tChannel_Total_Transfer_Count_Status_Register_LSW& operator=(const tChannel_Total_Transfer_Count_Status_Register_LSW&);

   };

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Status_Register_MSW
   //---------------------------------------------------------------------------
   class tChannel_Total_Transfer_Count_Status_Register_MSW : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0xa4,
         kId     = 12
      };
      tChannel_Total_Transfer_Count_Status_Register_MSW();


      typedef enum {
         kRegisterId                          = 0,
         kTTCS_MSWId                       = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline u32 readTTCS_MSW(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Total_Transfer_Count_Status_Register_MSW(const tChannel_Total_Transfer_Count_Status_Register_MSW&);
      tChannel_Total_Transfer_Count_Status_Register_MSW& operator=(const tChannel_Total_Transfer_Count_Status_Register_MSW&);

   };

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Latching_Register_LSW
   //---------------------------------------------------------------------------
   class tChannel_Total_Transfer_Count_Latching_Register_LSW : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0xa8,
         kId     = 13
      };
      tChannel_Total_Transfer_Count_Latching_Register_LSW();


      typedef enum {
         kRegisterId                          = 0,
         kTTCL_LSWId                       = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline u32 readTTCL_LSW(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Total_Transfer_Count_Latching_Register_LSW(const tChannel_Total_Transfer_Count_Latching_Register_LSW&);
      tChannel_Total_Transfer_Count_Latching_Register_LSW& operator=(const tChannel_Total_Transfer_Count_Latching_Register_LSW&);

   };

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Latching_Register_MSW
   //---------------------------------------------------------------------------
   class tChannel_Total_Transfer_Count_Latching_Register_MSW : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDMAController tRegisterMap;

      enum {
         kOffset = 0xac,
         kId     = 14
      };
      tChannel_Total_Transfer_Count_Latching_Register_MSW();


      typedef enum {
         kRegisterId                          = 0,
         kTTCL_MSWId                       = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline u32 readTTCL_MSW(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChannel_Total_Transfer_Count_Latching_Register_MSW(const tChannel_Total_Transfer_Count_Latching_Register_MSW&);
      tChannel_Total_Transfer_Count_Latching_Register_MSW& operator=(const tChannel_Total_Transfer_Count_Latching_Register_MSW&);

   };

   //---------------------------------------------------------------------------
   // Channel_Memory_Address_Register_LSW
   //---------------------------------------------------------------------------
   tChannel_Memory_Address_Register_LSW Channel_Memory_Address_Register_LSW;

   //---------------------------------------------------------------------------
   // Channel_Memory_Address_Register_MSW
   //---------------------------------------------------------------------------
   tChannel_Memory_Address_Register_MSW Channel_Memory_Address_Register_MSW;

   //---------------------------------------------------------------------------
   // Channel_Link_Address_Register_LSW
   //---------------------------------------------------------------------------
   tChannel_Link_Address_Register_LSW Channel_Link_Address_Register_LSW;

   //---------------------------------------------------------------------------
   // Channel_Link_Address_Register_MSW
   //---------------------------------------------------------------------------
   tChannel_Link_Address_Register_MSW Channel_Link_Address_Register_MSW;

   //---------------------------------------------------------------------------
   // Channel_Link_Size_Register
   //---------------------------------------------------------------------------
   tChannel_Link_Size_Register Channel_Link_Size_Register;

   //---------------------------------------------------------------------------
   // Channel_Control_Register
   //---------------------------------------------------------------------------
   tChannel_Control_Register Channel_Control_Register;

   //---------------------------------------------------------------------------
   // Channel_Operation_Register
   //---------------------------------------------------------------------------
   tChannel_Operation_Register Channel_Operation_Register;

   //---------------------------------------------------------------------------
   // Channel_Status_Register
   //---------------------------------------------------------------------------
   tChannel_Status_Register Channel_Status_Register;

   //---------------------------------------------------------------------------
   // Channel_Volatile_Status_Register
   //---------------------------------------------------------------------------
   tChannel_Volatile_Status_Register Channel_Volatile_Status_Register;

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Compare_Register_LSW
   //---------------------------------------------------------------------------
   tChannel_Total_Transfer_Count_Compare_Register_LSW Channel_Total_Transfer_Count_Compare_Register_LSW;

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Compare_Register_MSW
   //---------------------------------------------------------------------------
   tChannel_Total_Transfer_Count_Compare_Register_MSW Channel_Total_Transfer_Count_Compare_Register_MSW;

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Status_Register_LSW
   //---------------------------------------------------------------------------
   tChannel_Total_Transfer_Count_Status_Register_LSW Channel_Total_Transfer_Count_Status_Register_LSW;

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Status_Register_MSW
   //---------------------------------------------------------------------------
   tChannel_Total_Transfer_Count_Status_Register_MSW Channel_Total_Transfer_Count_Status_Register_MSW;

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Latching_Register_LSW
   //---------------------------------------------------------------------------
   tChannel_Total_Transfer_Count_Latching_Register_LSW Channel_Total_Transfer_Count_Latching_Register_LSW;

   //---------------------------------------------------------------------------
   // Channel_Total_Transfer_Count_Latching_Register_MSW
   //---------------------------------------------------------------------------
   tChannel_Total_Transfer_Count_Latching_Register_MSW Channel_Total_Transfer_Count_Latching_Register_MSW;

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kChannel_Memory_Address_Register_LSWId        = 0,
      kMemory_Address_LSWId             = nNIMXRegisterMap120_mBuildFieldId(tChannel_Memory_Address_Register_LSW::kMemory_Address_LSWId, kChannel_Memory_Address_Register_LSWId),

      kChannel_Memory_Address_Register_MSWId        = 1,
      kMemory_Address_MSWId             = nNIMXRegisterMap120_mBuildFieldId(tChannel_Memory_Address_Register_MSW::kMemory_Address_MSWId, kChannel_Memory_Address_Register_MSWId),

      kChannel_Link_Address_Register_LSWId      = 2,
      kLink_Address_LSWId               = nNIMXRegisterMap120_mBuildFieldId(tChannel_Link_Address_Register_LSW::kLink_Address_LSWId, kChannel_Link_Address_Register_LSWId),

      kChannel_Link_Address_Register_MSWId      = 3,
      kLink_Address_MSWId               = nNIMXRegisterMap120_mBuildFieldId(tChannel_Link_Address_Register_MSW::kLink_Address_MSWId, kChannel_Link_Address_Register_MSWId),

      kChannel_Link_Size_RegisterId     = 4,
      kLink_SizeId                      = nNIMXRegisterMap120_mBuildFieldId(tChannel_Link_Size_Register::kLink_SizeId, kChannel_Link_Size_RegisterId),

      kChannel_Control_RegisterId       = 5,
      kMODEId                           = nNIMXRegisterMap120_mBuildFieldId(tChannel_Control_Register::kMODEId, kChannel_Control_RegisterId),
      kNotify_On_DoneId                 = nNIMXRegisterMap120_mBuildFieldId(tChannel_Control_Register::kNotify_On_DoneId, kChannel_Control_RegisterId),
      kNotify_On_Total_CountId          = nNIMXRegisterMap120_mBuildFieldId(tChannel_Control_Register::kNotify_On_Total_CountId, kChannel_Control_RegisterId),
      kNotify_On_Last_LinkId            = nNIMXRegisterMap120_mBuildFieldId(tChannel_Control_Register::kNotify_On_Last_LinkId, kChannel_Control_RegisterId),
      kNotify_On_ErrorId                = nNIMXRegisterMap120_mBuildFieldId(tChannel_Control_Register::kNotify_On_ErrorId, kChannel_Control_RegisterId),

      kChannel_Operation_RegisterId     = 6,
      kSTARTId                          = nNIMXRegisterMap120_mBuildFieldId(tChannel_Operation_Register::kSTARTId, kChannel_Operation_RegisterId),
      kSTOPId                           = nNIMXRegisterMap120_mBuildFieldId(tChannel_Operation_Register::kSTOPId, kChannel_Operation_RegisterId),
      kCLR_TTCId                        = nNIMXRegisterMap120_mBuildFieldId(tChannel_Operation_Register::kCLR_TTCId, kChannel_Operation_RegisterId),
      kArm_Total_Count_IntId            = nNIMXRegisterMap120_mBuildFieldId(tChannel_Operation_Register::kArm_Total_Count_IntId, kChannel_Operation_RegisterId),

      kChannel_Status_RegisterId        = 7,
      kSTREAMId                         = nNIMXRegisterMap120_mBuildFieldId(tChannel_Status_Register::kSTREAMId, kChannel_Status_RegisterId),
      kLink_ReadyId                     = nNIMXRegisterMap120_mBuildFieldId(tChannel_Status_Register::kLink_ReadyId, kChannel_Status_RegisterId),
      kDoneId                           = nNIMXRegisterMap120_mBuildFieldId(tChannel_Status_Register::kDoneId, kChannel_Status_RegisterId),
      kTotal_CountId                    = nNIMXRegisterMap120_mBuildFieldId(tChannel_Status_Register::kTotal_CountId, kChannel_Status_RegisterId),
      kLast_LinkId                      = nNIMXRegisterMap120_mBuildFieldId(tChannel_Status_Register::kLast_LinkId, kChannel_Status_RegisterId),
      kErrorId                          = nNIMXRegisterMap120_mBuildFieldId(tChannel_Status_Register::kErrorId, kChannel_Status_RegisterId),
      kAdditional_IntId                 = nNIMXRegisterMap120_mBuildFieldId(tChannel_Status_Register::kAdditional_IntId, kChannel_Status_RegisterId),
      kIntId                            = nNIMXRegisterMap120_mBuildFieldId(tChannel_Status_Register::kIntId, kChannel_Status_RegisterId),

      kChannel_Volatile_Status_RegisterId     = 8,
      kVol_STREAMId                     = nNIMXRegisterMap120_mBuildFieldId(tChannel_Volatile_Status_Register::kVol_STREAMId, kChannel_Volatile_Status_RegisterId),
      kVol_Link_ReadyId                 = nNIMXRegisterMap120_mBuildFieldId(tChannel_Volatile_Status_Register::kVol_Link_ReadyId, kChannel_Volatile_Status_RegisterId),
      kVol_DoneId                       = nNIMXRegisterMap120_mBuildFieldId(tChannel_Volatile_Status_Register::kVol_DoneId, kChannel_Volatile_Status_RegisterId),
      kVol_Total_CountId                = nNIMXRegisterMap120_mBuildFieldId(tChannel_Volatile_Status_Register::kVol_Total_CountId, kChannel_Volatile_Status_RegisterId),
      kVol_Last_LinkId                  = nNIMXRegisterMap120_mBuildFieldId(tChannel_Volatile_Status_Register::kVol_Last_LinkId, kChannel_Volatile_Status_RegisterId),
      kVol_ErrorId                      = nNIMXRegisterMap120_mBuildFieldId(tChannel_Volatile_Status_Register::kVol_ErrorId, kChannel_Volatile_Status_RegisterId),
      kVol_Additional_IntId             = nNIMXRegisterMap120_mBuildFieldId(tChannel_Volatile_Status_Register::kVol_Additional_IntId, kChannel_Volatile_Status_RegisterId),
      kVol_IntId                        = nNIMXRegisterMap120_mBuildFieldId(tChannel_Volatile_Status_Register::kVol_IntId, kChannel_Volatile_Status_RegisterId),

      kChannel_Total_Transfer_Count_Compare_Register_LSWId                      = 9,
      kTCC_LSWId                        = nNIMXRegisterMap120_mBuildFieldId(tChannel_Total_Transfer_Count_Compare_Register_LSW::kTCC_LSWId, kChannel_Total_Transfer_Count_Compare_Register_LSWId),

      kChannel_Total_Transfer_Count_Compare_Register_MSWId                      = 10,
      kTCC_MSWId                        = nNIMXRegisterMap120_mBuildFieldId(tChannel_Total_Transfer_Count_Compare_Register_MSW::kTCC_MSWId, kChannel_Total_Transfer_Count_Compare_Register_MSWId),

      kChannel_Total_Transfer_Count_Status_Register_LSWId                     = 11,
      kTTCS_LSWId                       = nNIMXRegisterMap120_mBuildFieldId(tChannel_Total_Transfer_Count_Status_Register_LSW::kTTCS_LSWId, kChannel_Total_Transfer_Count_Status_Register_LSWId),

      kChannel_Total_Transfer_Count_Status_Register_MSWId                     = 12,
      kTTCS_MSWId                       = nNIMXRegisterMap120_mBuildFieldId(tChannel_Total_Transfer_Count_Status_Register_MSW::kTTCS_MSWId, kChannel_Total_Transfer_Count_Status_Register_MSWId),

      kChannel_Total_Transfer_Count_Latching_Register_LSWId                       = 13,
      kTTCL_LSWId                       = nNIMXRegisterMap120_mBuildFieldId(tChannel_Total_Transfer_Count_Latching_Register_LSW::kTTCL_LSWId, kChannel_Total_Transfer_Count_Latching_Register_LSWId),

      kChannel_Total_Transfer_Count_Latching_Register_MSWId                       = 14,
      kTTCL_MSWId                       = nNIMXRegisterMap120_mBuildFieldId(tChannel_Total_Transfer_Count_Latching_Register_MSW::kTTCL_MSWId, kChannel_Total_Transfer_Count_Latching_Register_MSWId),


      kMaxRegisterId = 14

   } tId;

   tDMAController(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   tDMAController();
   void initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tDMAController();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline tBoolean isDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(tId id, nMDBG::tStatus2* statusChain = NULL);

   inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(nMDBG::tStatus2* statusChain = NULL);

private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   u32 _addressOffset;
   u8 _dirtyVector[15];

};

#ifndef ___tDMAController_ipp___
#ifndef ___tDMAController_h_no_inline___
#include "tDMAController.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

