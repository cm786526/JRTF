// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tDMAControllerValues_h___
#define ___tDMAControllerValues_h___

namespace nDMAController {
   typedef enum {
      kNormalDmaMode                     = 1,
      kLinkChainDmaMode                  = 2,
   } tDMA_Mode_t;

   namespace nChannel_Memory_Address_Register_LSW {
      namespace nMemory_Address_LSW {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nChannel_Memory_Address_Register_MSW {
      namespace nMemory_Address_MSW {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nChannel_Link_Address_Register_LSW {
      namespace nLink_Address_LSW {
         enum {
            kMask = 0xfffffff8,
            kOffset = 0x3,
         };
      }

   }

   namespace nChannel_Link_Address_Register_MSW {
      namespace nLink_Address_MSW {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nChannel_Link_Size_Register {
      namespace nLink_Size {
         enum {
            kMask = 0xfffffff8,
            kOffset = 0x3,
         };
      }

   }

   namespace nChannel_Control_Register {
      namespace nMODE {
         enum {
            kMask = 0x3,
            kOffset = 0,
         };
      }

      namespace nNotify_On_Done {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

      namespace nNotify_On_Total_Count {
         enum {
            kMask = 0x2000000,
            kOffset = 0x19,
         };
      }

      namespace nNotify_On_Last_Link {
         enum {
            kMask = 0x4000000,
            kOffset = 0x1a,
         };
      }

      namespace nNotify_On_Error {
         enum {
            kMask = 0x8000000,
            kOffset = 0x1b,
         };
      }

   }

   namespace nChannel_Operation_Register {
      namespace nSTART {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nSTOP {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nCLR_TTC {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nArm_Total_Count_Int {
         enum {
            kMask = 0x2000000,
            kOffset = 0x19,
         };
      }

   }

   namespace nChannel_Status_Register {
      namespace nSTREAM {
         enum {
            kMask = 0xfff,
            kOffset = 0,
         };
      }

      namespace nLink_Ready {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nDone {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

      namespace nTotal_Count {
         enum {
            kMask = 0x2000000,
            kOffset = 0x19,
         };
      }

      namespace nLast_Link {
         enum {
            kMask = 0x4000000,
            kOffset = 0x1a,
         };
      }

      namespace nError {
         enum {
            kMask = 0x8000000,
            kOffset = 0x1b,
         };
      }

      namespace nAdditional_Int {
         enum {
            kMask = 0x40000000,
            kOffset = 0x1e,
         };
      }

      namespace nInt {
         enum {
            kMask = 0x80000000,
            kOffset = 0x1f,
         };
      }

   }

   namespace nChannel_Volatile_Status_Register {
      namespace nVol_STREAM {
         enum {
            kMask = 0xfff,
            kOffset = 0,
         };
      }

      namespace nVol_Link_Ready {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nVol_Done {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

      namespace nVol_Total_Count {
         enum {
            kMask = 0x2000000,
            kOffset = 0x19,
         };
      }

      namespace nVol_Last_Link {
         enum {
            kMask = 0x4000000,
            kOffset = 0x1a,
         };
      }

      namespace nVol_Error {
         enum {
            kMask = 0x8000000,
            kOffset = 0x1b,
         };
      }

      namespace nVol_Additional_Int {
         enum {
            kMask = 0x40000000,
            kOffset = 0x1e,
         };
      }

      namespace nVol_Int {
         enum {
            kMask = 0x80000000,
            kOffset = 0x1f,
         };
      }

   }

   namespace nChannel_Total_Transfer_Count_Compare_Register_LSW {
      namespace nTCC_LSW {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nChannel_Total_Transfer_Count_Compare_Register_MSW {
      namespace nTCC_MSW {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nChannel_Total_Transfer_Count_Status_Register_LSW {
      namespace nTTCS_LSW {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nChannel_Total_Transfer_Count_Status_Register_MSW {
      namespace nTTCS_MSW {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nChannel_Total_Transfer_Count_Latching_Register_LSW {
      namespace nTTCL_LSW {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   namespace nChannel_Total_Transfer_Count_Latching_Register_MSW {
      namespace nTTCL_MSW {
         enum {
            kMask = 0xffffffff,
            kOffset = 0,
         };
      }

   }

   using namespace nChannel_Memory_Address_Register_LSW;
   using namespace nChannel_Memory_Address_Register_MSW;
   using namespace nChannel_Link_Address_Register_LSW;
   using namespace nChannel_Link_Address_Register_MSW;
   using namespace nChannel_Link_Size_Register;
   using namespace nChannel_Control_Register;
   using namespace nChannel_Operation_Register;
   using namespace nChannel_Status_Register;
   using namespace nChannel_Volatile_Status_Register;
   using namespace nChannel_Total_Transfer_Count_Compare_Register_LSW;
   using namespace nChannel_Total_Transfer_Count_Compare_Register_MSW;
   using namespace nChannel_Total_Transfer_Count_Status_Register_LSW;
   using namespace nChannel_Total_Transfer_Count_Status_Register_MSW;
   using namespace nChannel_Total_Transfer_Count_Latching_Register_LSW;
   using namespace nChannel_Total_Transfer_Count_Latching_Register_MSW;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

