// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tDO_h___
#define ___tDO_h___

// includes
#include "osiTypes.h"
#include "osiBus.h"
#include "tOutTimer.h"
#include "tDOValues.h"


#ifndef ___tDOValues_h___
#include "tDOValues.h"
#endif

#ifndef nNIMXRegisterMap120_mBuildFieldId

// Algorithm:
//    Move lowermost 5 bits (4 through 0) of field id to uppermost 5 bits (31
//          through 27)
//    Move bit 5 of field id to bit 26
//    Move bit 6 of field id to bit 25
//    OR in the register id (which is allowed the remaining bits)
//
// Why not move the lowermost 7 bits directly to the uppermost 7 bits? Because
// we originally moved only the lowermost 5, and for backwards compatibility,
// we can't change where those 5 bits end up.
//
// For future expansion purposes, the bits beyond the first 5 are put in reverse
// order in the resulting combined id.
#define nNIMXRegisterMap120_mBuildFieldId(fieldId, regId) \
   ( \
     ((fieldId) << 27) | \
     ((((fieldId) >> 5) & 0x1) << 26) | \
     ((((fieldId) >> 6) & 0x1) << 25) | \
     (regId) \
   )

#endif

#ifndef nNIMXRegisterMap120_mExtractFieldId

// Algorithm: (basically the reverse of mBuildFieldId)
//    Move uppermost 5 bits (31 through 27) to lowermost 5 bits (4 through 0)
//    Move 26th bit to bit 5 (right-shifting by (26 - 5) is like right-shifting
//          by 26 then left-shifting by 5, but it's more efficient)
//    Move 25th bit to bit 6
#define nNIMXRegisterMap120_mExtractFieldId(id) \
   (unsigned int) \
   ( \
     (((id) >> 27) & 0x1F) | \
     (((id) & (0x1 << 26)) >> (26 - 5)) | \
     (((id) & (0x1 << 25)) >> (25 - 6)) \
   )

#endif

class tDO
{
public:
   tOutTimer DO_Timer;

   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg8IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u8 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u8 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   //---------------------------------------------------------------------------
   // DO_FIFO_St_Register
   //---------------------------------------------------------------------------
   class tDO_FIFO_St_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x0,
         kId     = 0
      };
      tDO_FIFO_St_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDO_FIFO_FullCountId              = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDO_FIFO_St_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_FIFO_St_Register& setDO_FIFO_FullCount(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDO_FIFO_FullCount(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDO_FIFO_FullCount(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_FIFO_St_Register(const tDO_FIFO_St_Register&);
      tDO_FIFO_St_Register& operator=(const tDO_FIFO_St_Register&);

   };

   //---------------------------------------------------------------------------
   // SCXI_DIO_Enable_Register
   //---------------------------------------------------------------------------
   class tSCXI_DIO_Enable_Register : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x0,
         kId     = 1
      };
      tSCXI_DIO_Enable_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSCXI_DIO_MOSI_EnableId           = 1,
         kSCXI_DIO_D_A_EnableId            = 2,
         kSCXI_DIO_Intr_EnableId           = 3,
         kMaxFieldId                          = 3
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tSCXI_DIO_Enable_Register& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tSCXI_DIO_Enable_Register& setSCXI_DIO_MOSI_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_DIO_MOSI_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_DIO_MOSI_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_DIO_MOSI_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_DIO_Enable_Register& setSCXI_DIO_D_A_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_DIO_D_A_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_DIO_D_A_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_DIO_D_A_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tSCXI_DIO_Enable_Register& setSCXI_DIO_Intr_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSCXI_DIO_Intr_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSCXI_DIO_Intr_Enable(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSCXI_DIO_Intr_Enable(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tSCXI_DIO_Enable_Register(const tSCXI_DIO_Enable_Register&);
      tSCXI_DIO_Enable_Register& operator=(const tSCXI_DIO_Enable_Register&);

   };

   //---------------------------------------------------------------------------
   // Static_Digital_Output_Register
   //---------------------------------------------------------------------------
   class tStatic_Digital_Output_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x4,
         kId     = 2
      };
      tStatic_Digital_Output_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDO_StaticValueId                 = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tStatic_Digital_Output_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tStatic_Digital_Output_Register& setDO_StaticValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDO_StaticValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_StaticValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDO_StaticValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tStatic_Digital_Output_Register(const tStatic_Digital_Output_Register&);
      tStatic_Digital_Output_Register& operator=(const tStatic_Digital_Output_Register&);

   };

   //---------------------------------------------------------------------------
   // DIO_Direction_Register
   //---------------------------------------------------------------------------
   class tDIO_Direction_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x8,
         kId     = 3
      };
      tDIO_Direction_Register();


      typedef enum {
         kRegisterId                          = 0,
         kkDIODirection_Pin0Id             = 1,
         kkDIODirection_Pin1Id             = 2,
         kkDIODirection_Pin2Id             = 3,
         kkDIODirection_Pin3Id             = 4,
         kkDIODirection_Pin4Id             = 5,
         kkDIODirection_Pin5Id             = 6,
         kkDIODirection_Pin6Id             = 7,
         kkDIODirection_Pin7Id             = 8,
         kkDIODirection_Pin8Id             = 9,
         kkDIODirection_Pin9Id             = 10,
         kkDIODirection_Pin10Id            = 11,
         kkDIODirection_Pin11Id            = 12,
         kkDIODirection_Pin12Id            = 13,
         kkDIODirection_Pin13Id            = 14,
         kkDIODirection_Pin14Id            = 15,
         kkDIODirection_Pin15Id            = 16,
         kkDIODirection_Pin16Id            = 17,
         kkDIODirection_Pin17Id            = 18,
         kkDIODirection_Pin18Id            = 19,
         kkDIODirection_Pin19Id            = 20,
         kkDIODirection_Pin20Id            = 21,
         kkDIODirection_Pin21Id            = 22,
         kkDIODirection_Pin22Id            = 23,
         kkDIODirection_Pin23Id            = 24,
         kkDIODirection_Pin24Id            = 25,
         kkDIODirection_Pin25Id            = 26,
         kkDIODirection_Pin26Id            = 27,
         kkDIODirection_Pin27Id            = 28,
         kkDIODirection_Pin28Id            = 29,
         kkDIODirection_Pin29Id            = 30,
         kkDIODirection_Pin30Id            = 31,
         kkDIODirection_Pin31Id            = 32,
         kMaxFieldId                          = 32
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDIO_Direction_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDIO_Direction_Register& setkDIODirection_Pin0(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin0(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin0(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin1(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin1(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin1(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin2(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin2(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin2(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin3(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin3(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin3(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin4(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin4(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin4(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin5(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin5(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin5(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin6(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin6(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin6(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin7(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin7(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin7(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin8(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin8(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin8(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin8(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin9(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin9(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin9(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin9(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin10(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin10(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin10(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin10(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin11(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin11(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin11(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin11(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin12(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin12(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin12(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin12(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin13(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin13(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin13(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin13(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin14(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin14(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin14(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin14(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin15(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin15(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin15(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin15(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin16(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin16(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin16(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin16(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin17(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin17(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin17(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin17(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin18(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin18(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin18(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin18(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin19(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin19(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin19(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin19(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin20(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin20(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin20(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin20(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin21(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin21(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin21(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin21(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin22(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin22(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin22(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin22(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin23(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin23(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin23(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin23(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin24(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin24(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin24(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin24(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin25(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin25(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin25(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin25(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin26(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin26(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin26(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin26(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin27(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin27(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin27(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin27(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin28(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin28(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin28(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin28(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin29(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin29(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin29(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin29(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin30(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin30(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin30(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin30(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setkDIODirection_Pin31(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_LineDir_t getkDIODirection_Pin31(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writekDIODirection_Pin31(nDO::tDO_LineDir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_LineDir_t readkDIODirection_Pin31(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDIO_Direction_Register(const tDIO_Direction_Register&);
      tDIO_Direction_Register& operator=(const tDIO_Direction_Register&);

   };

   //---------------------------------------------------------------------------
   // CDO_FIFO_Data_Register
   //---------------------------------------------------------------------------
   class tCDO_FIFO_Data_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0xc,
         kId     = 4
      };
      tCDO_FIFO_Data_Register();


      typedef enum {
         kRegisterId                          = 0,
         kCDO_FIFO_DataId                  = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeCDO_FIFO_Data(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tCDO_FIFO_Data_Register(const tCDO_FIFO_Data_Register&);
      tCDO_FIFO_Data_Register& operator=(const tCDO_FIFO_Data_Register&);

   };

   //---------------------------------------------------------------------------
   // DO_Mask_Enable_Register
   //---------------------------------------------------------------------------
   class tDO_Mask_Enable_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x10,
         kId     = 5
      };
      tDO_Mask_Enable_Register();


      typedef enum {
         kRegisterId                          = 0,
         kCDO_MaskId                       = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDO_Mask_Enable_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_Mask_Enable_Register& setCDO_Mask(nDO::tDO_TimedMask_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_TimedMask_t getCDO_Mask(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeCDO_Mask(nDO::tDO_TimedMask_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_TimedMask_t readCDO_Mask(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_Mask_Enable_Register(const tDO_Mask_Enable_Register&);
      tDO_Mask_Enable_Register& operator=(const tDO_Mask_Enable_Register&);

   };

   //---------------------------------------------------------------------------
   // DO_Mode_Register
   //---------------------------------------------------------------------------
   class tDO_Mode_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x14,
         kId     = 6
      };
      tDO_Mode_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDO_Data_LaneId                   = 4,
         kDO_DataWidthId                   = 5,
         kMaxFieldId                          = 5
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDO_Mode_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_Mode_Register& setDO_Data_Lane(nDO::tDO_Data_Lane_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_Data_Lane_t getDO_Data_Lane(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_Data_Lane(nDO::tDO_Data_Lane_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_Data_Lane_t readDO_Data_Lane(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Mode_Register& setDO_DataWidth(nDO::tDO_DataWidth_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_DataWidth_t getDO_DataWidth(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_DataWidth(nDO::tDO_DataWidth_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_DataWidth_t readDO_DataWidth(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_Mode_Register(const tDO_Mode_Register&);
      tDO_Mode_Register& operator=(const tDO_Mode_Register&);

   };

   //---------------------------------------------------------------------------
   // DO_Trigger_Select_Register
   //---------------------------------------------------------------------------
   class tDO_Trigger_Select_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x18,
         kId     = 7
      };
      tDO_Trigger_Select_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDO_External_Gate_EnableId        = 2,
         kDO_External_Gate_PolarityId      = 3,
         kDO_External_Gate_SelectId        = 4,
         kDO_START1_EdgeId                 = 5,
         kDO_START1_PolarityId             = 6,
         kDO_START1_SelectId               = 7,
         kDO_UPDATE_Source_PolarityId      = 9,
         kDO_UPDATE_Source_SelectId        = 10,
         kMaxFieldId                          = 10
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDO_Trigger_Select_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_Trigger_Select_Register& setDO_External_Gate_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDO_External_Gate_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_External_Gate_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDO_External_Gate_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Trigger_Select_Register& setDO_External_Gate_Polarity(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDO_External_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_External_Gate_Polarity(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDO_External_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Trigger_Select_Register& setDO_External_Gate_Select(nDO::tDO_External_Gate_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_External_Gate_Select_t getDO_External_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_External_Gate_Select(nDO::tDO_External_Gate_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_External_Gate_Select_t readDO_External_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Trigger_Select_Register& setDO_START1_Edge(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDO_START1_Edge(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_START1_Edge(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDO_START1_Edge(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Trigger_Select_Register& setDO_START1_Polarity(nDO::tDO_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_Polarity_t getDO_START1_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_START1_Polarity(nDO::tDO_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_Polarity_t readDO_START1_Polarity(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Trigger_Select_Register& setDO_START1_Select(nDO::tDO_START1_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_START1_Select_t getDO_START1_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_START1_Select(nDO::tDO_START1_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_START1_Select_t readDO_START1_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Trigger_Select_Register& setDO_UPDATE_Source_Polarity(nDO::tDO_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_Polarity_t getDO_UPDATE_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_UPDATE_Source_Polarity(nDO::tDO_Polarity_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_Polarity_t readDO_UPDATE_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_Trigger_Select_Register& setDO_UPDATE_Source_Select(nDO::tDO_UPDATE_Source_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_UPDATE_Source_Select_t getDO_UPDATE_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_UPDATE_Source_Select(nDO::tDO_UPDATE_Source_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_UPDATE_Source_Select_t readDO_UPDATE_Source_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_Trigger_Select_Register(const tDO_Trigger_Select_Register&);
      tDO_Trigger_Select_Register& operator=(const tDO_Trigger_Select_Register&);

   };

   //---------------------------------------------------------------------------
   // DO_DirectDataRegister
   //---------------------------------------------------------------------------
   class tDO_DirectDataRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x1c,
         kId     = 8
      };
      tDO_DirectDataRegister();


      typedef enum {
         kRegisterId                          = 0,
         kCDO_Direct_dataId                = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeCDO_Direct_data(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_DirectDataRegister(const tDO_DirectDataRegister&);
      tDO_DirectDataRegister& operator=(const tDO_DirectDataRegister&);

   };

   //---------------------------------------------------------------------------
   // DO_WDT_SafeStateRegister
   //---------------------------------------------------------------------------
   class tDO_WDT_SafeStateRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x24,
         kId     = 9
      };
      tDO_WDT_SafeStateRegister();


      typedef enum {
         kRegisterId                          = 0,
         kDO_WDT_SafeStateValueId          = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDO_WDT_SafeStateRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_WDT_SafeStateRegister& setDO_WDT_SafeStateValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDO_WDT_SafeStateValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline tDO_WDT_SafeStateRegister& setDO_WDT_SafeStateValue(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL);
      inline tBoolean getDO_WDT_SafeStateValue(u32 position, nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_SafeStateValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeDO_WDT_SafeStateValue(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDO_WDT_SafeStateValue(nMDBG::tStatus2* statusChain = NULL);

      inline tBoolean readDO_WDT_SafeStateValue(u32 position, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_WDT_SafeStateRegister(const tDO_WDT_SafeStateRegister&);
      tDO_WDT_SafeStateRegister& operator=(const tDO_WDT_SafeStateRegister&);

   };

   //---------------------------------------------------------------------------
   // DO_WDT_ModeSelect1_Register
   //---------------------------------------------------------------------------
   class tDO_WDT_ModeSelect1_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x28,
         kId     = 10
      };
      tDO_WDT_ModeSelect1_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDO_WDT_ModeD0Id                  = 1,
         kDO_WDT_ModeD1Id                  = 2,
         kDO_WDT_ModeD2Id                  = 3,
         kDO_WDT_ModeD3Id                  = 4,
         kDO_WDT_ModeD4Id                  = 5,
         kDO_WDT_ModeD5Id                  = 6,
         kDO_WDT_ModeD6Id                  = 7,
         kDO_WDT_ModeD7Id                  = 8,
         kDO_WDT_ModeD8Id                  = 9,
         kDO_WDT_ModeD9Id                  = 10,
         kDO_WDT_ModeD10Id                 = 11,
         kDO_WDT_ModeD11Id                 = 12,
         kDO_WDT_ModeD12Id                 = 13,
         kDO_WDT_ModeD13Id                 = 14,
         kDO_WDT_ModeD14Id                 = 15,
         kDO_WDT_ModeD15Id                 = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDO_WDT_ModeSelect1_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD0(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD0(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD0(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD1(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD1(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD1(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD2(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD2(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD2(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD3(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD3(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD3(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD4(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD4(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD4(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD5(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD5(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD5(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD6(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD6(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD6(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD7(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD7(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD7(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD8(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD8(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD8(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD8(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD9(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD9(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD9(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD9(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD10(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD10(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD10(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD10(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD11(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD11(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD11(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD11(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD12(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD12(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD12(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD12(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD13(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD13(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD13(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD13(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD14(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD14(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD14(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD14(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect1_Register& setDO_WDT_ModeD15(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD15(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD15(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD15(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_WDT_ModeSelect1_Register(const tDO_WDT_ModeSelect1_Register&);
      tDO_WDT_ModeSelect1_Register& operator=(const tDO_WDT_ModeSelect1_Register&);

   };

   //---------------------------------------------------------------------------
   // DO_WDT_ModeSelect2_Register
   //---------------------------------------------------------------------------
   class tDO_WDT_ModeSelect2_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDO tRegisterMap;

      enum {
         kOffset = 0x2c,
         kId     = 11
      };
      tDO_WDT_ModeSelect2_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDO_WDT_ModeD16Id                 = 1,
         kDO_WDT_ModeD17Id                 = 2,
         kDO_WDT_ModeD18Id                 = 3,
         kDO_WDT_ModeD19Id                 = 4,
         kDO_WDT_ModeD20Id                 = 5,
         kDO_WDT_ModeD21Id                 = 6,
         kDO_WDT_ModeD22Id                 = 7,
         kDO_WDT_ModeD23Id                 = 8,
         kDO_WDT_ModeD24Id                 = 9,
         kDO_WDT_ModeD25Id                 = 10,
         kDO_WDT_ModeD26Id                 = 11,
         kDO_WDT_ModeD27Id                 = 12,
         kDO_WDT_ModeD28Id                 = 13,
         kDO_WDT_ModeD29Id                 = 14,
         kDO_WDT_ModeD30Id                 = 15,
         kDO_WDT_ModeD31Id                 = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDO_WDT_ModeSelect2_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD16(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD16(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD16(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD16(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD17(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD17(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD17(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD17(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD18(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD18(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD18(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD18(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD19(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD19(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD19(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD19(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD20(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD20(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD20(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD20(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD21(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD21(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD21(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD21(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD22(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD22(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD22(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD22(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD23(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD23(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD23(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD23(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD24(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD24(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD24(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD24(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD25(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD25(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD25(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD25(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD26(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD26(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD26(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD26(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD27(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD27(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD27(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD27(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD28(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD28(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD28(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD28(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD29(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD29(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD29(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD29(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD30(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD30(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD30(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD30(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect2_Register& setDO_WDT_ModeD31(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDO::tDO_WDT_Mode_t getDO_WDT_ModeD31(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModeD31(nDO::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDO::tDO_WDT_Mode_t readDO_WDT_ModeD31(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_WDT_ModeSelect2_Register(const tDO_WDT_ModeSelect2_Register&);
      tDO_WDT_ModeSelect2_Register& operator=(const tDO_WDT_ModeSelect2_Register&);

   };

   //---------------------------------------------------------------------------
   // DO_FIFO_St_Register
   //---------------------------------------------------------------------------
   tDO_FIFO_St_Register DO_FIFO_St_Register;

   //---------------------------------------------------------------------------
   // SCXI_DIO_Enable_Register
   //---------------------------------------------------------------------------
   tSCXI_DIO_Enable_Register SCXI_DIO_Enable_Register;

   //---------------------------------------------------------------------------
   // Static_Digital_Output_Register
   //---------------------------------------------------------------------------
   tStatic_Digital_Output_Register Static_Digital_Output_Register;

   //---------------------------------------------------------------------------
   // DIO_Direction_Register
   //---------------------------------------------------------------------------
   tDIO_Direction_Register DIO_Direction_Register;

   //---------------------------------------------------------------------------
   // CDO_FIFO_Data_Register
   //---------------------------------------------------------------------------
   tCDO_FIFO_Data_Register CDO_FIFO_Data_Register;

   //---------------------------------------------------------------------------
   // DO_Mask_Enable_Register
   //---------------------------------------------------------------------------
   tDO_Mask_Enable_Register DO_Mask_Enable_Register;

   //---------------------------------------------------------------------------
   // DO_Mode_Register
   //---------------------------------------------------------------------------
   tDO_Mode_Register DO_Mode_Register;

   //---------------------------------------------------------------------------
   // DO_Trigger_Select_Register
   //---------------------------------------------------------------------------
   tDO_Trigger_Select_Register DO_Trigger_Select_Register;

   //---------------------------------------------------------------------------
   // DO_DirectDataRegister
   //---------------------------------------------------------------------------
   tDO_DirectDataRegister DO_DirectDataRegister;

   //---------------------------------------------------------------------------
   // DO_WDT_SafeStateRegister
   //---------------------------------------------------------------------------
   tDO_WDT_SafeStateRegister DO_WDT_SafeStateRegister;

   //---------------------------------------------------------------------------
   // DO_WDT_ModeSelect1_Register
   //---------------------------------------------------------------------------
   tDO_WDT_ModeSelect1_Register DO_WDT_ModeSelect1_Register;

   //---------------------------------------------------------------------------
   // DO_WDT_ModeSelect2_Register
   //---------------------------------------------------------------------------
   tDO_WDT_ModeSelect2_Register DO_WDT_ModeSelect2_Register;

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kDO_FIFO_St_RegisterId            = 0,
      kDO_FIFO_FullCountId              = nNIMXRegisterMap120_mBuildFieldId(tDO_FIFO_St_Register::kDO_FIFO_FullCountId, kDO_FIFO_St_RegisterId),

      kSCXI_DIO_Enable_RegisterId       = 1,
      kSCXI_DIO_MOSI_EnableId           = nNIMXRegisterMap120_mBuildFieldId(tSCXI_DIO_Enable_Register::kSCXI_DIO_MOSI_EnableId, kSCXI_DIO_Enable_RegisterId),
      kSCXI_DIO_D_A_EnableId            = nNIMXRegisterMap120_mBuildFieldId(tSCXI_DIO_Enable_Register::kSCXI_DIO_D_A_EnableId, kSCXI_DIO_Enable_RegisterId),
      kSCXI_DIO_Intr_EnableId           = nNIMXRegisterMap120_mBuildFieldId(tSCXI_DIO_Enable_Register::kSCXI_DIO_Intr_EnableId, kSCXI_DIO_Enable_RegisterId),

      kStatic_Digital_Output_RegisterId   = 2,
      kDO_StaticValueId                 = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Output_Register::kDO_StaticValueId, kStatic_Digital_Output_RegisterId),

      kDIO_Direction_RegisterId         = 3,
      kkDIODirection_Pin0Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin0Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin1Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin1Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin2Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin2Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin3Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin3Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin4Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin4Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin5Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin5Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin6Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin6Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin7Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin7Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin8Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin8Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin9Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin9Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin10Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin10Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin11Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin11Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin12Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin12Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin13Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin13Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin14Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin14Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin15Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin15Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin16Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin16Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin17Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin17Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin18Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin18Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin19Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin19Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin20Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin20Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin21Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin21Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin22Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin22Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin23Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin23Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin24Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin24Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin25Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin25Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin26Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin26Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin27Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin27Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin28Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin28Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin29Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin29Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin30Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin30Id, kDIO_Direction_RegisterId),
      kkDIODirection_Pin31Id            = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kkDIODirection_Pin31Id, kDIO_Direction_RegisterId),

      kCDO_FIFO_Data_RegisterId         = 4,
      kCDO_FIFO_DataId                  = nNIMXRegisterMap120_mBuildFieldId(tCDO_FIFO_Data_Register::kCDO_FIFO_DataId, kCDO_FIFO_Data_RegisterId),

      kDO_Mask_Enable_RegisterId        = 5,
      kCDO_MaskId                       = nNIMXRegisterMap120_mBuildFieldId(tDO_Mask_Enable_Register::kCDO_MaskId, kDO_Mask_Enable_RegisterId),

      kDO_Mode_RegisterId               = 6,
      kDO_Data_LaneId                   = nNIMXRegisterMap120_mBuildFieldId(tDO_Mode_Register::kDO_Data_LaneId, kDO_Mode_RegisterId),
      kDO_DataWidthId                   = nNIMXRegisterMap120_mBuildFieldId(tDO_Mode_Register::kDO_DataWidthId, kDO_Mode_RegisterId),

      kDO_Trigger_Select_RegisterId     = 7,
      kDO_External_Gate_EnableId        = nNIMXRegisterMap120_mBuildFieldId(tDO_Trigger_Select_Register::kDO_External_Gate_EnableId, kDO_Trigger_Select_RegisterId),
      kDO_External_Gate_PolarityId      = nNIMXRegisterMap120_mBuildFieldId(tDO_Trigger_Select_Register::kDO_External_Gate_PolarityId, kDO_Trigger_Select_RegisterId),
      kDO_External_Gate_SelectId        = nNIMXRegisterMap120_mBuildFieldId(tDO_Trigger_Select_Register::kDO_External_Gate_SelectId, kDO_Trigger_Select_RegisterId),
      kDO_START1_EdgeId                 = nNIMXRegisterMap120_mBuildFieldId(tDO_Trigger_Select_Register::kDO_START1_EdgeId, kDO_Trigger_Select_RegisterId),
      kDO_START1_PolarityId             = nNIMXRegisterMap120_mBuildFieldId(tDO_Trigger_Select_Register::kDO_START1_PolarityId, kDO_Trigger_Select_RegisterId),
      kDO_START1_SelectId               = nNIMXRegisterMap120_mBuildFieldId(tDO_Trigger_Select_Register::kDO_START1_SelectId, kDO_Trigger_Select_RegisterId),
      kDO_UPDATE_Source_PolarityId      = nNIMXRegisterMap120_mBuildFieldId(tDO_Trigger_Select_Register::kDO_UPDATE_Source_PolarityId, kDO_Trigger_Select_RegisterId),
      kDO_UPDATE_Source_SelectId        = nNIMXRegisterMap120_mBuildFieldId(tDO_Trigger_Select_Register::kDO_UPDATE_Source_SelectId, kDO_Trigger_Select_RegisterId),

      kDO_DirectDataRegisterId          = 8,
      kCDO_Direct_dataId                = nNIMXRegisterMap120_mBuildFieldId(tDO_DirectDataRegister::kCDO_Direct_dataId, kDO_DirectDataRegisterId),

      kDO_WDT_SafeStateRegisterId       = 9,
      kDO_WDT_SafeStateValueId          = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_SafeStateRegister::kDO_WDT_SafeStateValueId, kDO_WDT_SafeStateRegisterId),

      kDO_WDT_ModeSelect1_RegisterId    = 10,
      kDO_WDT_ModeD0Id                  = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD0Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD1Id                  = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD1Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD2Id                  = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD2Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD3Id                  = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD3Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD4Id                  = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD4Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD5Id                  = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD5Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD6Id                  = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD6Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD7Id                  = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD7Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD8Id                  = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD8Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD9Id                  = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD9Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD10Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD10Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD11Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD11Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD12Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD12Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD13Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD13Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD14Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD14Id, kDO_WDT_ModeSelect1_RegisterId),
      kDO_WDT_ModeD15Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect1_Register::kDO_WDT_ModeD15Id, kDO_WDT_ModeSelect1_RegisterId),

      kDO_WDT_ModeSelect2_RegisterId    = 11,
      kDO_WDT_ModeD16Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD16Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD17Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD17Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD18Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD18Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD19Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD19Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD20Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD20Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD21Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD21Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD22Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD22Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD23Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD23Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD24Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD24Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD25Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD25Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD26Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD26Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD27Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD27Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD28Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD28Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD29Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD29Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD30Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD30Id, kDO_WDT_ModeSelect2_RegisterId),
      kDO_WDT_ModeD31Id                 = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect2_Register::kDO_WDT_ModeD31Id, kDO_WDT_ModeSelect2_RegisterId),


      kMaxRegisterId = 11

   } tId;

   tDO(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   tDO();
   void initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tDO();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline tBoolean isDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(tId id, nMDBG::tStatus2* statusChain = NULL);

   inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(nMDBG::tStatus2* statusChain = NULL);

private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   u32 _addressOffset;
   u8 _dirtyVector[12];

};

#ifndef ___tDO_ipp___
#ifndef ___tDO_h_no_inline___
#include "tDO.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

