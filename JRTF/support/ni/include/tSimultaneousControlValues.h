// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tSimultaneousControlValues_h___
#define ___tSimultaneousControlValues_h___

namespace nSimultaneousControl {
   namespace nAISetChannelOrder {
      namespace nAiChannel {
         enum {
            kMask = 0xf,
            kOffset = 0,
         };
      }

   }

   namespace nAIChanConfigCtrlStat {
      namespace nAiGain {
         enum {
            kMask = 0x3,
            kOffset = 0,
         };
      }

   }

   namespace nAIClearChannelOrder {
      namespace nAiClearConfig {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

   }

   namespace nAITriggerConfigCtrlStat {
      namespace nAiTrigSel {
         enum {
            kMask = 0x1f,
            kOffset = 0,
         };
      }

   }

   namespace nAcquisitionCtrl {
      namespace nAcquisitionDone {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nExtendedChannelsPresent {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

   }

   namespace nAiFifoCtrlStat {
      namespace nSampleStranded {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nNotEmpty {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nSetFifoIn16BitMode {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nClrFifoIn16BitMode {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nResetAiFifo {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

   }

   namespace nLoopbackCtrlStat {
      namespace nSetLoopNeg {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nClrLoopNeg {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nSetLoopPos {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nClrLoopPos {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

   }

   namespace nLoopbackSourceSel {
      namespace nLoopbackMuxSel {
         enum {
            kMask = 0x1f,
            kOffset = 0,
         };
      }

   }

   namespace nDcmCtrlStat {
      namespace nSetExtDcmReset {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nClrExtDcmReset {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nExtDcmResetStatus {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nExtDcmIsLocked {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nSetStc3DcmReset {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nClrStc3DcmReset {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nStc3DcmResetStatus {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nStc3DcmIsLocked {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

   }

   namespace nInterruptControl {
      namespace nAiFifoOverflowInterruptAck {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nAiFifoOverflowInterruptDisable {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nAiFifoOverflowInterruptEnable {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nGlobalInterruptDisable {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nGlobalInterruptEnable {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

   }

   namespace nInterruptStatus {
      namespace nAiFifoOverflowInterruptCondition {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nAiFifoOverflowInterruptStatus {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nAiFifoOverflowInterruptEnabled {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nGlobalInterruptCondition {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nGlobalInterruptStatus {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nGlobalInterruptEnabled {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

   }

   namespace nSignatureYear {
      namespace nDefault {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   namespace nSignatureMonth {
      namespace nDefault {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   namespace nSignatureDay {
      namespace nDefault {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   namespace nSignatureHour {
      namespace nDefault {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   namespace nScratch {
      namespace nDefault {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   namespace nTempSensorCtrlStat {
      namespace nTempStart {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nTempReady {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

   }

   namespace nTempSensorDataHi {
      namespace nTempUpperByte {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   namespace nTempSensorDataLo {
      namespace nTempLowerByte {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   using namespace nAISetChannelOrder;
   using namespace nAIChanConfigCtrlStat;
   using namespace nAIClearChannelOrder;
   using namespace nAITriggerConfigCtrlStat;
   using namespace nAcquisitionCtrl;
   using namespace nAiFifoCtrlStat;
   using namespace nLoopbackCtrlStat;
   using namespace nLoopbackSourceSel;
   using namespace nDcmCtrlStat;
   using namespace nInterruptControl;
   using namespace nInterruptStatus;
   using namespace nSignatureYear;
   using namespace nSignatureMonth;
   using namespace nSignatureDay;
   using namespace nSignatureHour;
   using namespace nScratch;
   using namespace nTempSensorCtrlStat;
   using namespace nTempSensorDataHi;
   using namespace nTempSensorDataLo;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

