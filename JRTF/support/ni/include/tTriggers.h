// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tTriggers_h___
#define ___tTriggers_h___

// includes
#include "osiTypes.h"
#include "osiBus.h"
#include "tTriggersValues.h"


#ifndef ___tTriggersValues_h___
#include "tTriggersValues.h"
#endif

#ifndef nNIMXRegisterMap120_mBuildFieldId

// Algorithm:
//    Move lowermost 5 bits (4 through 0) of field id to uppermost 5 bits (31
//          through 27)
//    Move bit 5 of field id to bit 26
//    Move bit 6 of field id to bit 25
//    OR in the register id (which is allowed the remaining bits)
//
// Why not move the lowermost 7 bits directly to the uppermost 7 bits? Because
// we originally moved only the lowermost 5, and for backwards compatibility,
// we can't change where those 5 bits end up.
//
// For future expansion purposes, the bits beyond the first 5 are put in reverse
// order in the resulting combined id.
#define nNIMXRegisterMap120_mBuildFieldId(fieldId, regId) \
   ( \
     ((fieldId) << 27) | \
     ((((fieldId) >> 5) & 0x1) << 26) | \
     ((((fieldId) >> 6) & 0x1) << 25) | \
     (regId) \
   )

#endif

#ifndef nNIMXRegisterMap120_mExtractFieldId

// Algorithm: (basically the reverse of mBuildFieldId)
//    Move uppermost 5 bits (31 through 27) to lowermost 5 bits (4 through 0)
//    Move 26th bit to bit 5 (right-shifting by (26 - 5) is like right-shifting
//          by 26 then left-shifting by 5, but it's more efficient)
//    Move 25th bit to bit 6
#define nNIMXRegisterMap120_mExtractFieldId(id) \
   (unsigned int) \
   ( \
     (((id) >> 27) & 0x1F) | \
     (((id) & (0x1 << 26)) >> (26 - 5)) | \
     (((id) & (0x1 << 25)) >> (25 - 6)) \
   )

#endif

class tTriggers
{
public:
   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg8IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u8 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u8 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg16IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u16 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u16 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   //---------------------------------------------------------------------------
   // AnalogTrigControlRegister
   //---------------------------------------------------------------------------
   class tAnalogTrigControlRegister : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xa0,
         kId     = 0
      };
      tAnalogTrigControlRegister();


      typedef enum {
         kRegisterId                          = 0,
         kAnalog_Trigger_ModeId            = 1,
         kAnalog_Trigger_ResetId           = 3,
         kAtrig_SelId                      = 5,
         kMaxFieldId                          = 5
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tAnalogTrigControlRegister& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tAnalogTrigControlRegister& setAnalog_Trigger_Mode(nTriggers::tTrig_Analog_Trigger_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Analog_Trigger_Mode_t getAnalog_Trigger_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeAnalog_Trigger_Mode(nTriggers::tTrig_Analog_Trigger_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Analog_Trigger_Mode_t readAnalog_Trigger_Mode(nMDBG::tStatus2* statusChain = NULL);

      inline tAnalogTrigControlRegister& setAnalog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getAnalog_Trigger_Reset(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeAnalog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readAnalog_Trigger_Reset(nMDBG::tStatus2* statusChain = NULL);

      inline tAnalogTrigControlRegister& setAtrig_Sel(nTriggers::tTrig_Atrig_Sel_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Atrig_Sel_t getAtrig_Sel(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeAtrig_Sel(nTriggers::tTrig_Atrig_Sel_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Atrig_Sel_t readAtrig_Sel(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tAnalogTrigControlRegister(const tAnalogTrigControlRegister&);
      tAnalogTrigControlRegister& operator=(const tAnalogTrigControlRegister&);

   };

   //---------------------------------------------------------------------------
   // FOUT_Register
   //---------------------------------------------------------------------------
   class tFOUT_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xa2,
         kId     = 1
      };
      tFOUT_Register();


      typedef enum {
         kRegisterId                          = 0,
         kFOUT_DividerId                   = 1,
         kFOUT_FastTB_DivideBy2Id          = 3,
         kFOUT_Timebase_SelectId           = 5,
         kFOUT_EnableId                    = 6,
         kMaxFieldId                          = 6
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tFOUT_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tFOUT_Register& setFOUT_Divider(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getFOUT_Divider(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeFOUT_Divider(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readFOUT_Divider(nMDBG::tStatus2* statusChain = NULL);

      inline tFOUT_Register& setFOUT_FastTB_DivideBy2(nTriggers::tTrig_FOUT_FastTB_DivideBy2_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_FOUT_FastTB_DivideBy2_t getFOUT_FastTB_DivideBy2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeFOUT_FastTB_DivideBy2(nTriggers::tTrig_FOUT_FastTB_DivideBy2_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_FOUT_FastTB_DivideBy2_t readFOUT_FastTB_DivideBy2(nMDBG::tStatus2* statusChain = NULL);

      inline tFOUT_Register& setFOUT_Timebase_Select(nTriggers::tTrig_FOUT_Timebase_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_FOUT_Timebase_Select_t getFOUT_Timebase_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeFOUT_Timebase_Select(nTriggers::tTrig_FOUT_Timebase_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_FOUT_Timebase_Select_t readFOUT_Timebase_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tFOUT_Register& setFOUT_Enable(nTriggers::tTrig_FOUT_Enable_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_FOUT_Enable_t getFOUT_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeFOUT_Enable(nTriggers::tTrig_FOUT_Enable_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_FOUT_Enable_t readFOUT_Enable(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tFOUT_Register(const tFOUT_Register&);
      tFOUT_Register& operator=(const tFOUT_Register&);

   };

   //---------------------------------------------------------------------------
   // PFI_Direction_Register
   //---------------------------------------------------------------------------
   class tPFI_Direction_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xa4,
         kId     = 2
      };
      tPFI_Direction_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFI0_Pin_DirId                   = 1,
         kPFI1_Pin_DirId                   = 2,
         kPFI2_Pin_DirId                   = 3,
         kPFI3_Pin_DirId                   = 4,
         kPFI4_Pin_DirId                   = 5,
         kPFI5_Pin_DirId                   = 6,
         kPFI6_Pin_DirId                   = 7,
         kPFI7_Pin_DirId                   = 8,
         kPFI8_Pin_DirId                   = 9,
         kPFI9_Pin_DirId                   = 10,
         kPFI10_Pin_DirId                  = 11,
         kPFI11_Pin_DirId                  = 12,
         kPFI12_Pin_DirId                  = 13,
         kPFI13_Pin_DirId                  = 14,
         kPFI14_Pin_DirId                  = 15,
         kPFI15_Pin_DirId                  = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_Direction_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_Direction_Register& setPFI0_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI0_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI0_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI0_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI1_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI1_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI1_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI1_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI2_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI2_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI2_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI2_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI3_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI3_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI3_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI3_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI4_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI4_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI4_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI4_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI5_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI5_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI5_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI5_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI6_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI6_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI6_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI6_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI7_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI7_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI7_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI7_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI8_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI8_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI8_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI8_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI9_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI9_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI9_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI9_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI10_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI10_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI10_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI10_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI11_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI11_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI11_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI11_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI12_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI12_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI12_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI12_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI13_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI13_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI13_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI13_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI14_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI14_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI14_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI14_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFI15_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_i_Pin_Dir_t getPFI15_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI15_Pin_Dir(nTriggers::tTrig_PFI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_i_Pin_Dir_t readPFI15_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_Direction_Register(const tPFI_Direction_Register&);
      tPFI_Direction_Register& operator=(const tPFI_Direction_Register&);

   };

   //---------------------------------------------------------------------------
   // RTSI_Trig_Direction_Register
   //---------------------------------------------------------------------------
   class tRTSI_Trig_Direction_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xa6,
         kId     = 3
      };
      tRTSI_Trig_Direction_Register();


      typedef enum {
         kRegisterId                          = 0,
         kRTSI0_Pin_DirId                  = 2,
         kRTSI1_Pin_DirId                  = 3,
         kRTSI2_Pin_DirId                  = 4,
         kRTSI3_Pin_DirId                  = 5,
         kRTSI4_Pin_DirId                  = 6,
         kRTSI5_Pin_DirId                  = 7,
         kRTSI6_Pin_DirId                  = 8,
         kRTSI7_Pin_DirId                  = 9,
         kMaxFieldId                          = 9
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tRTSI_Trig_Direction_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tRTSI_Trig_Direction_Register& setRTSI0_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t getRTSI0_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSI0_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t readRTSI0_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tRTSI_Trig_Direction_Register& setRTSI1_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t getRTSI1_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSI1_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t readRTSI1_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tRTSI_Trig_Direction_Register& setRTSI2_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t getRTSI2_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSI2_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t readRTSI2_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tRTSI_Trig_Direction_Register& setRTSI3_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t getRTSI3_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSI3_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t readRTSI3_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tRTSI_Trig_Direction_Register& setRTSI4_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t getRTSI4_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSI4_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t readRTSI4_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tRTSI_Trig_Direction_Register& setRTSI5_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t getRTSI5_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSI5_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t readRTSI5_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tRTSI_Trig_Direction_Register& setRTSI6_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t getRTSI6_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSI6_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t readRTSI6_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      inline tRTSI_Trig_Direction_Register& setRTSI7_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t getRTSI7_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSI7_Pin_Dir(nTriggers::tTrig_RTSI_i_Pin_Dir_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_RTSI_i_Pin_Dir_t readRTSI7_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tRTSI_Trig_Direction_Register(const tRTSI_Trig_Direction_Register&);
      tRTSI_Trig_Direction_Register& operator=(const tRTSI_Trig_Direction_Register&);

   };

   //---------------------------------------------------------------------------
   // RTSI_OutputSelectRegister_t
   //---------------------------------------------------------------------------
   class tRTSI_OutputSelectRegister_t : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      const u32 kOffset;
      const u32 kId;

      tRTSI_OutputSelectRegister_t(u32 offset, u32 id);
      tRTSI_OutputSelectRegister_t();
      void initialize(u32 offset, u32 id);


      typedef enum {
         kRegisterId                          = 0,
         kRTSI_i_Output_SelectId           = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tRTSI_OutputSelectRegister_t& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tRTSI_OutputSelectRegister_t& setRTSI_i_Output_Select(nTriggers::tTrig_RTSI_i_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_RTSI_i_Output_Select_t getRTSI_i_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSI_i_Output_Select(nTriggers::tTrig_RTSI_i_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_RTSI_i_Output_Select_t readRTSI_i_Output_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tRTSI_OutputSelectRegister_t(const tRTSI_OutputSelectRegister_t&);
      tRTSI_OutputSelectRegister_t& operator=(const tRTSI_OutputSelectRegister_t&);

   };

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_0
   //---------------------------------------------------------------------------
   class tPFI_Filter_Register_0 : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xb0,
         kId     = 12
      };
      tPFI_Filter_Register_0();


      typedef enum {
         kRegisterId                          = 0,
         kPFI0_Filter_SelectId             = 1,
         kPFI1_Filter_SelectId             = 3,
         kPFI2_Filter_SelectId             = 5,
         kPFI3_Filter_SelectId             = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_0& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_0& setPFI0_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI0_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI0_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI0_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_0& setPFI1_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI1_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI1_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI1_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_0& setPFI2_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI2_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI2_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI2_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_0& setPFI3_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI3_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI3_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI3_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_Filter_Register_0(const tPFI_Filter_Register_0&);
      tPFI_Filter_Register_0& operator=(const tPFI_Filter_Register_0&);

   };

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_1
   //---------------------------------------------------------------------------
   class tPFI_Filter_Register_1 : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xb2,
         kId     = 13
      };
      tPFI_Filter_Register_1();


      typedef enum {
         kRegisterId                          = 0,
         kPFI4_Filter_SelectId             = 1,
         kPFI5_Filter_SelectId             = 3,
         kPFI6_Filter_SelectId             = 5,
         kPFI7_Filter_SelectId             = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_1& setPFI4_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI4_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI4_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI4_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_1& setPFI5_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI5_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI5_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI5_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_1& setPFI6_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI6_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI6_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI6_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_1& setPFI7_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI7_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI7_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI7_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_Filter_Register_1(const tPFI_Filter_Register_1&);
      tPFI_Filter_Register_1& operator=(const tPFI_Filter_Register_1&);

   };

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_2
   //---------------------------------------------------------------------------
   class tPFI_Filter_Register_2 : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xb4,
         kId     = 14
      };
      tPFI_Filter_Register_2();


      typedef enum {
         kRegisterId                          = 0,
         kPFI8_Filter_SelectId             = 1,
         kPFI9_Filter_SelectId             = 3,
         kPFI10_Filter_SelectId            = 5,
         kPFI11_Filter_SelectId            = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_2& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_2& setPFI8_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI8_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI8_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI8_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_2& setPFI9_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI9_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI9_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI9_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_2& setPFI10_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI10_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI10_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI10_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_2& setPFI11_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI11_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI11_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI11_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_Filter_Register_2(const tPFI_Filter_Register_2&);
      tPFI_Filter_Register_2& operator=(const tPFI_Filter_Register_2&);

   };

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_3
   //---------------------------------------------------------------------------
   class tPFI_Filter_Register_3 : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xb6,
         kId     = 15
      };
      tPFI_Filter_Register_3();


      typedef enum {
         kRegisterId                          = 0,
         kPFI12_Filter_SelectId            = 1,
         kPFI13_Filter_SelectId            = 3,
         kPFI14_Filter_SelectId            = 5,
         kPFI15_Filter_SelectId            = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_3& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_3& setPFI12_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI12_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI12_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI12_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_3& setPFI13_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI13_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI13_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI13_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_3& setPFI14_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI14_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI14_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI14_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_3& setPFI15_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getPFI15_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI15_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readPFI15_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_Filter_Register_3(const tPFI_Filter_Register_3&);
      tPFI_Filter_Register_3& operator=(const tPFI_Filter_Register_3&);

   };

   //---------------------------------------------------------------------------
   // STAR_Trig_Register
   //---------------------------------------------------------------------------
   class tSTAR_Trig_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xb8,
         kId     = 16
      };
      tSTAR_Trig_Register();


      typedef enum {
         kRegisterId                          = 0,
         kStar_Trig_Output_SelectId        = 1,
         kStar_Trig_Pin_DirId              = 3,
         kMaxFieldId                          = 3
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tSTAR_Trig_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tSTAR_Trig_Register& setStar_Trig_Output_Select(nTriggers::tTrig_StarTrig_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_StarTrig_Output_Select_t getStar_Trig_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeStar_Trig_Output_Select(nTriggers::tTrig_StarTrig_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_StarTrig_Output_Select_t readStar_Trig_Output_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tSTAR_Trig_Register& setStar_Trig_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getStar_Trig_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeStar_Trig_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readStar_Trig_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tSTAR_Trig_Register(const tSTAR_Trig_Register&);
      tSTAR_Trig_Register& operator=(const tSTAR_Trig_Register&);

   };

   //---------------------------------------------------------------------------
   // PFI_OutputSelectRegister_t
   //---------------------------------------------------------------------------
   class tPFI_OutputSelectRegister_t : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      const u32 kOffset;
      const u32 kId;

      tPFI_OutputSelectRegister_t(u32 offset, u32 id);
      tPFI_OutputSelectRegister_t();
      void initialize(u32 offset, u32 id);


      typedef enum {
         kRegisterId                          = 0,
         kPFI_i_Output_SelectId            = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_OutputSelectRegister_t& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_OutputSelectRegister_t& setPFI_i_Output_Select(nTriggers::tTrig_PFI_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PFI_Output_Select_t getPFI_i_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_i_Output_Select(nTriggers::tTrig_PFI_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PFI_Output_Select_t readPFI_i_Output_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_OutputSelectRegister_t(const tPFI_OutputSelectRegister_t&);
      tPFI_OutputSelectRegister_t& operator=(const tPFI_OutputSelectRegister_t&);

   };

   //---------------------------------------------------------------------------
   // DStarC_Trig_Register
   //---------------------------------------------------------------------------
   class tDStarC_Trig_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xca,
         kId     = 33
      };
      tDStarC_Trig_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDStarC_Output_SelectId           = 1,
         kDStarC_EnableId                  = 5,
         kMaxFieldId                          = 5
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDStarC_Trig_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDStarC_Trig_Register& setDStarC_Output_Select(nTriggers::tTrig_StarTrig_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_StarTrig_Output_Select_t getDStarC_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDStarC_Output_Select(nTriggers::tTrig_StarTrig_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_StarTrig_Output_Select_t readDStarC_Output_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tDStarC_Trig_Register& setDStarC_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDStarC_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDStarC_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readDStarC_Enable(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDStarC_Trig_Register(const tDStarC_Trig_Register&);
      tDStarC_Trig_Register& operator=(const tDStarC_Trig_Register&);

   };

   //---------------------------------------------------------------------------
   // Clock_And_Fout2_Register
   //---------------------------------------------------------------------------
   class tClock_And_Fout2_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xda,
         kId     = 34
      };
      tClock_And_Fout2_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPLL_In_Source_SelectId           = 1,
         kTB3_SelectId                     = 3,
         kMaxFieldId                          = 3
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tClock_And_Fout2_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tClock_And_Fout2_Register& setPLL_In_Source_Select(nTriggers::tTrig_PLL_In_Source_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PLL_In_Source_Select_t getPLL_In_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePLL_In_Source_Select(nTriggers::tTrig_PLL_In_Source_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PLL_In_Source_Select_t readPLL_In_Source_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tClock_And_Fout2_Register& setTB3_Select(nTriggers::tTrig_TB3_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_TB3_Select_t getTB3_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeTB3_Select(nTriggers::tTrig_TB3_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_TB3_Select_t readTB3_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tClock_And_Fout2_Register(const tClock_And_Fout2_Register&);
      tClock_And_Fout2_Register& operator=(const tClock_And_Fout2_Register&);

   };

   //---------------------------------------------------------------------------
   // PLL_Control_Register
   //---------------------------------------------------------------------------
   class tPLL_Control_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xdc,
         kId     = 35
      };
      tPLL_Control_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPLL_OutputDividerId              = 2,
         kPLL_MultiplierId                 = 3,
         kPLL_RefDivisorId                 = 4,
         kPLL_Filter_RangeId               = 5,
         kPLL_EnableId                     = 6,
         kMaxFieldId                          = 6
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPLL_Control_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPLL_Control_Register& setPLL_OutputDivider(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPLL_OutputDivider(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePLL_OutputDivider(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readPLL_OutputDivider(nMDBG::tStatus2* statusChain = NULL);

      inline tPLL_Control_Register& setPLL_Multiplier(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPLL_Multiplier(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePLL_Multiplier(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readPLL_Multiplier(nMDBG::tStatus2* statusChain = NULL);

      inline tPLL_Control_Register& setPLL_RefDivisor(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPLL_RefDivisor(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePLL_RefDivisor(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readPLL_RefDivisor(nMDBG::tStatus2* statusChain = NULL);

      inline tPLL_Control_Register& setPLL_Filter_Range(nTriggers::tTrig_PLL_Filter_Range_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_PLL_Filter_Range_t getPLL_Filter_Range(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePLL_Filter_Range(nTriggers::tTrig_PLL_Filter_Range_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_PLL_Filter_Range_t readPLL_Filter_Range(nMDBG::tStatus2* statusChain = NULL);

      inline tPLL_Control_Register& setPLL_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPLL_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePLL_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readPLL_Enable(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPLL_Control_Register(const tPLL_Control_Register&);
      tPLL_Control_Register& operator=(const tPLL_Control_Register&);

   };

   //---------------------------------------------------------------------------
   // PLL_Status_Register
   //---------------------------------------------------------------------------
   class tPLL_Status_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xdc,
         kId     = 36
      };
      tPLL_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPLL_TimerExpiredId               = 1,
         kHW_Pll_LockedId                  = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tPLL_Status_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPLL_Status_Register& setPLL_TimerExpired(nTriggers::tTrigPllLockedStatus_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrigPllLockedStatus_t getPLL_TimerExpired(nMDBG::tStatus2* statusChain = NULL) const;

      inline nTriggers::tTrigPllLockedStatus_t readPLL_TimerExpired(nMDBG::tStatus2* statusChain = NULL);

      inline tPLL_Status_Register& setHW_Pll_Locked(nTriggers::tTrigPllLockedStatus_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrigPllLockedStatus_t getHW_Pll_Locked(nMDBG::tStatus2* statusChain = NULL) const;

      inline nTriggers::tTrigPllLockedStatus_t readHW_Pll_Locked(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPLL_Status_Register(const tPLL_Status_Register&);
      tPLL_Status_Register& operator=(const tPLL_Status_Register&);

   };

   //---------------------------------------------------------------------------
   // PFI_DI_Register
   //---------------------------------------------------------------------------
   class tPFI_DI_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xe0,
         kId     = 37
      };
      tPFI_DI_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_0_DI_BitfieldId              = 1,
         kPFI_1_DI_BitfieldId              = 2,
         kPFI_2_DI_BitfieldId              = 3,
         kPFI_3_DI_BitfieldId              = 4,
         kPFI_4_DI_BitfieldId              = 5,
         kPFI_5_DI_BitfieldId              = 6,
         kPFI_6_DI_BitfieldId              = 7,
         kPFI_7_DI_BitfieldId              = 8,
         kPFI_8_DI_BitfieldId              = 9,
         kPFI_9_DI_BitfieldId              = 10,
         kPFI_10_DI_BitfieldId             = 11,
         kPFI_11_DI_BitfieldId             = 12,
         kPFI_12_DI_BitfieldId             = 13,
         kPFI_13_DI_BitfieldId             = 14,
         kPFI_14_DI_BitfieldId             = 15,
         kPFI_15_DI_BitfieldId             = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tPFI_DI_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_DI_Register& setPFI_0_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_0_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_0_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_1_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_1_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_1_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_2_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_2_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_2_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_3_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_3_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_3_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_4_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_4_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_4_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_5_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_5_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_5_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_6_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_6_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_6_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_7_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_7_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_7_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_8_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_8_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_8_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_9_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_9_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_9_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_10_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_10_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_10_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_11_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_11_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_11_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_12_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_12_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_12_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_13_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_13_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_13_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_14_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_14_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_14_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_DI_Register& setPFI_15_DI_Bitfield(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_15_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_15_DI_Bitfield(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_DI_Register(const tPFI_DI_Register&);
      tPFI_DI_Register& operator=(const tPFI_DI_Register&);

   };

   //---------------------------------------------------------------------------
   // PFI_DO_Register
   //---------------------------------------------------------------------------
   class tPFI_DO_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xe0,
         kId     = 38
      };
      tPFI_DO_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_DO_BfId                      = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_DO_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_DO_Register& setPFI_DO_Bf(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_DO_Bf(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_DO_Bf(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readPFI_DO_Bf(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_DO_Register(const tPFI_DO_Register&);
      tPFI_DO_Register& operator=(const tPFI_DO_Register&);

   };

   //---------------------------------------------------------------------------
   // PFI_WDT_SafeStateRegister
   //---------------------------------------------------------------------------
   class tPFI_WDT_SafeStateRegister : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xe2,
         kId     = 39
      };
      tPFI_WDT_SafeStateRegister();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_WDT_SafeStateValueId         = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_WDT_SafeStateRegister& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_WDT_SafeStateRegister& setPFI_WDT_SafeStateValue(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_WDT_SafeStateValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline tPFI_WDT_SafeStateRegister& setPFI_WDT_SafeStateValue(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL);
      inline tBoolean getPFI_WDT_SafeStateValue(u32 position, nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_SafeStateValue(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writePFI_WDT_SafeStateValue(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readPFI_WDT_SafeStateValue(nMDBG::tStatus2* statusChain = NULL);

      inline tBoolean readPFI_WDT_SafeStateValue(u32 position, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_WDT_SafeStateRegister(const tPFI_WDT_SafeStateRegister&);
      tPFI_WDT_SafeStateRegister& operator=(const tPFI_WDT_SafeStateRegister&);

   };

   //---------------------------------------------------------------------------
   // PFI_WDT_ModeSelect_Register
   //---------------------------------------------------------------------------
   class tPFI_WDT_ModeSelect_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xe4,
         kId     = 40
      };
      tPFI_WDT_ModeSelect_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_WDT_ModeD0Id                 = 1,
         kPFI_WDT_ModeD1Id                 = 2,
         kPFI_WDT_ModeD2Id                 = 3,
         kPFI_WDT_ModeD3Id                 = 4,
         kPFI_WDT_ModeD4Id                 = 5,
         kPFI_WDT_ModeD5Id                 = 6,
         kPFI_WDT_ModeD6Id                 = 7,
         kPFI_WDT_ModeD7Id                 = 8,
         kPFI_WDT_ModeD8Id                 = 9,
         kPFI_WDT_ModeD9Id                 = 10,
         kPFI_WDT_ModeD10Id                = 11,
         kPFI_WDT_ModeD11Id                = 12,
         kPFI_WDT_ModeD12Id                = 13,
         kPFI_WDT_ModeD13Id                = 14,
         kPFI_WDT_ModeD14Id                = 15,
         kPFI_WDT_ModeD15Id                = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_WDT_ModeSelect_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD0(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD0(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD0(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD1(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD1(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD1(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD2(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD2(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD2(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD3(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD3(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD3(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD4(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD4(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD4(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD5(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD5(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD5(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD6(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD6(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD6(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD7(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD7(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD7(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD8(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD8(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD8(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD8(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD9(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD9(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD9(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD9(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD10(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD10(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD10(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD10(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD11(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD11(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD11(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD11(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD12(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD12(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD12(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD12(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD13(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD13(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD13(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD13(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD14(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD14(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD14(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD14(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModeD15(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tPFI_WDT_Mode_t getPFI_WDT_ModeD15(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModeD15(nTriggers::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tPFI_WDT_Mode_t readPFI_WDT_ModeD15(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_WDT_ModeSelect_Register(const tPFI_WDT_ModeSelect_Register&);
      tPFI_WDT_ModeSelect_Register& operator=(const tPFI_WDT_ModeSelect_Register&);

   };

   //---------------------------------------------------------------------------
   // IntTriggerA_OutputSelectRegister_t
   //---------------------------------------------------------------------------
   class tIntTriggerA_OutputSelectRegister_t : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      const u32 kOffset;
      const u32 kId;

      tIntTriggerA_OutputSelectRegister_t(u32 offset, u32 id);
      tIntTriggerA_OutputSelectRegister_t();
      void initialize(u32 offset, u32 id);


      typedef enum {
         kRegisterId                          = 0,
         kIntTriggerA_i_Output_SelectId    = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tIntTriggerA_OutputSelectRegister_t& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tIntTriggerA_OutputSelectRegister_t& setIntTriggerA_i_Output_Select(nTriggers::tTrig_IntTriggerA_i_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_IntTriggerA_i_Output_Select_t getIntTriggerA_i_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeIntTriggerA_i_Output_Select(nTriggers::tTrig_IntTriggerA_i_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_IntTriggerA_i_Output_Select_t readIntTriggerA_i_Output_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tIntTriggerA_OutputSelectRegister_t(const tIntTriggerA_OutputSelectRegister_t&);
      tIntTriggerA_OutputSelectRegister_t& operator=(const tIntTriggerA_OutputSelectRegister_t&);

   };

   //---------------------------------------------------------------------------
   // IntTrigA_Filter_Register_Lo
   //---------------------------------------------------------------------------
   class tIntTrigA_Filter_Register_Lo : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xf8,
         kId     = 49
      };
      tIntTrigA_Filter_Register_Lo();


      typedef enum {
         kRegisterId                          = 0,
         kITA0_Filter_SelectId             = 1,
         kITA1_Filter_SelectId             = 3,
         kITA2_Filter_SelectId             = 5,
         kITA3_Filter_SelectId             = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tIntTrigA_Filter_Register_Lo& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tIntTrigA_Filter_Register_Lo& setITA0_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getITA0_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeITA0_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readITA0_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tIntTrigA_Filter_Register_Lo& setITA1_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getITA1_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeITA1_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readITA1_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tIntTrigA_Filter_Register_Lo& setITA2_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getITA2_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeITA2_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readITA2_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tIntTrigA_Filter_Register_Lo& setITA3_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getITA3_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeITA3_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readITA3_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tIntTrigA_Filter_Register_Lo(const tIntTrigA_Filter_Register_Lo&);
      tIntTrigA_Filter_Register_Lo& operator=(const tIntTrigA_Filter_Register_Lo&);

   };

   //---------------------------------------------------------------------------
   // IntTrigA_Filter_Register_Hi
   //---------------------------------------------------------------------------
   class tIntTrigA_Filter_Register_Hi : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0xfa,
         kId     = 50
      };
      tIntTrigA_Filter_Register_Hi();


      typedef enum {
         kRegisterId                          = 0,
         kITA4_Filter_SelectId             = 1,
         kITA5_Filter_SelectId             = 3,
         kITA6_Filter_SelectId             = 5,
         kITA7_Filter_SelectId             = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tIntTrigA_Filter_Register_Hi& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tIntTrigA_Filter_Register_Hi& setITA4_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getITA4_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeITA4_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readITA4_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tIntTrigA_Filter_Register_Hi& setITA5_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getITA5_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeITA5_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readITA5_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tIntTrigA_Filter_Register_Hi& setITA6_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getITA6_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeITA6_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readITA6_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tIntTrigA_Filter_Register_Hi& setITA7_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Select_t getITA7_Filter_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeITA7_Filter_Select(nTriggers::tTrig_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Select_t readITA7_Filter_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tIntTrigA_Filter_Register_Hi(const tIntTrigA_Filter_Register_Hi&);
      tIntTrigA_Filter_Register_Hi& operator=(const tIntTrigA_Filter_Register_Hi&);

   };

   //---------------------------------------------------------------------------
   // Trig_Filter_Settings1_Register
   //---------------------------------------------------------------------------
   class tTrig_Filter_Settings1_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0x100,
         kId     = 51
      };
      tTrig_Filter_Settings1_Register();


      typedef enum {
         kRegisterId                          = 0,
         kTrig_Filter_Custom_Period_1Id    = 1,
         kTrig_Filter_Custom_Timebase_1Id  = 3,
         kTrig_Filter_Ext_Signal_SelectId  = 5,
         kMaxFieldId                          = 5
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tTrig_Filter_Settings1_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tTrig_Filter_Settings1_Register& setTrig_Filter_Custom_Period_1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTrig_Filter_Custom_Period_1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeTrig_Filter_Custom_Period_1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readTrig_Filter_Custom_Period_1(nMDBG::tStatus2* statusChain = NULL);

      inline tTrig_Filter_Settings1_Register& setTrig_Filter_Custom_Timebase_1(nTriggers::tTrig_Filter_Custom_Timebase_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Custom_Timebase_t getTrig_Filter_Custom_Timebase_1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeTrig_Filter_Custom_Timebase_1(nTriggers::tTrig_Filter_Custom_Timebase_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Custom_Timebase_t readTrig_Filter_Custom_Timebase_1(nMDBG::tStatus2* statusChain = NULL);

      inline tTrig_Filter_Settings1_Register& setTrig_Filter_Ext_Signal_Select(nTriggers::tTrig_Filter_Ext_Signal_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Ext_Signal_Select_t getTrig_Filter_Ext_Signal_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeTrig_Filter_Ext_Signal_Select(nTriggers::tTrig_Filter_Ext_Signal_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Ext_Signal_Select_t readTrig_Filter_Ext_Signal_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tTrig_Filter_Settings1_Register(const tTrig_Filter_Settings1_Register&);
      tTrig_Filter_Settings1_Register& operator=(const tTrig_Filter_Settings1_Register&);

   };

   //---------------------------------------------------------------------------
   // Trig_Filter_Settings2_Register
   //---------------------------------------------------------------------------
   class tTrig_Filter_Settings2_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0x102,
         kId     = 52
      };
      tTrig_Filter_Settings2_Register();


      typedef enum {
         kRegisterId                          = 0,
         kTrig_Filter_Custom_Period_2Id    = 1,
         kTrig_Filter_Custom_Timebase_2Id  = 3,
         kMaxFieldId                          = 3
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tTrig_Filter_Settings2_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tTrig_Filter_Settings2_Register& setTrig_Filter_Custom_Period_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getTrig_Filter_Custom_Period_2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeTrig_Filter_Custom_Period_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readTrig_Filter_Custom_Period_2(nMDBG::tStatus2* statusChain = NULL);

      inline tTrig_Filter_Settings2_Register& setTrig_Filter_Custom_Timebase_2(nTriggers::tTrig_Filter_Custom_Timebase_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nTriggers::tTrig_Filter_Custom_Timebase_t getTrig_Filter_Custom_Timebase_2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeTrig_Filter_Custom_Timebase_2(nTriggers::tTrig_Filter_Custom_Timebase_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nTriggers::tTrig_Filter_Custom_Timebase_t readTrig_Filter_Custom_Timebase_2(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tTrig_Filter_Settings2_Register(const tTrig_Filter_Settings2_Register&);
      tTrig_Filter_Settings2_Register& operator=(const tTrig_Filter_Settings2_Register&);

   };

   //---------------------------------------------------------------------------
   // PLL_LockCount_Register
   //---------------------------------------------------------------------------
   class tPLL_LockCount_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0x104,
         kId     = 53
      };
      tPLL_LockCount_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPLL_LockCountId                  = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPLL_LockCount_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPLL_LockCount_Register& setPLL_LockCount(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPLL_LockCount(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePLL_LockCount(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readPLL_LockCount(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPLL_LockCount_Register(const tPLL_LockCount_Register&);
      tPLL_LockCount_Register& operator=(const tPLL_LockCount_Register&);

   };

   //---------------------------------------------------------------------------
   // Sync100_Repeat_Count_Register
   //---------------------------------------------------------------------------
   class tSync100_Repeat_Count_Register : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tTriggers tRegisterMap;

      enum {
         kOffset = 0x106,
         kId     = 54
      };
      tSync100_Repeat_Count_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSync100_Repeat_CountId           = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tSync100_Repeat_Count_Register& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tSync100_Repeat_Count_Register& setSync100_Repeat_Count(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getSync100_Repeat_Count(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSync100_Repeat_Count(u8 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readSync100_Repeat_Count(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tSync100_Repeat_Count_Register(const tSync100_Repeat_Count_Register&);
      tSync100_Repeat_Count_Register& operator=(const tSync100_Repeat_Count_Register&);

   };

   //----------------------------------------
   // Register Array Sizes
   //----------------------------------------
   enum {
      kRTSI_OutputSelectRegister_iArraySize = 8,
      kPFI_OutputSelectRegister_iArraySize = 16,
      kIntTriggerA_OutputSelectRegister_iArraySize = 8
   };

   //---------------------------------------------------------------------------
   // AnalogTrigControlRegister
   //---------------------------------------------------------------------------
   tAnalogTrigControlRegister AnalogTrigControlRegister;

   //---------------------------------------------------------------------------
   // FOUT_Register
   //---------------------------------------------------------------------------
   tFOUT_Register FOUT_Register;

   //---------------------------------------------------------------------------
   // PFI_Direction_Register
   //---------------------------------------------------------------------------
   tPFI_Direction_Register PFI_Direction_Register;

   //---------------------------------------------------------------------------
   // RTSI_Trig_Direction_Register
   //---------------------------------------------------------------------------
   tRTSI_Trig_Direction_Register RTSI_Trig_Direction_Register;

   //---------------------------------------------------------------------------
   // RTSI_OutputSelectRegister_i
   //---------------------------------------------------------------------------
   tRTSI_OutputSelectRegister_t RTSI_OutputSelectRegister_i[kRTSI_OutputSelectRegister_iArraySize];

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_0
   //---------------------------------------------------------------------------
   tPFI_Filter_Register_0 PFI_Filter_Register_0;

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_1
   //---------------------------------------------------------------------------
   tPFI_Filter_Register_1 PFI_Filter_Register_1;

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_2
   //---------------------------------------------------------------------------
   tPFI_Filter_Register_2 PFI_Filter_Register_2;

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_3
   //---------------------------------------------------------------------------
   tPFI_Filter_Register_3 PFI_Filter_Register_3;

   //---------------------------------------------------------------------------
   // STAR_Trig_Register
   //---------------------------------------------------------------------------
   tSTAR_Trig_Register STAR_Trig_Register;

   //---------------------------------------------------------------------------
   // PFI_OutputSelectRegister_i
   //---------------------------------------------------------------------------
   tPFI_OutputSelectRegister_t PFI_OutputSelectRegister_i[kPFI_OutputSelectRegister_iArraySize];

   //---------------------------------------------------------------------------
   // DStarC_Trig_Register
   //---------------------------------------------------------------------------
   tDStarC_Trig_Register DStarC_Trig_Register;

   //---------------------------------------------------------------------------
   // Clock_And_Fout2_Register
   //---------------------------------------------------------------------------
   tClock_And_Fout2_Register Clock_And_Fout2_Register;

   //---------------------------------------------------------------------------
   // PLL_Control_Register
   //---------------------------------------------------------------------------
   tPLL_Control_Register PLL_Control_Register;

   //---------------------------------------------------------------------------
   // PLL_Status_Register
   //---------------------------------------------------------------------------
   tPLL_Status_Register PLL_Status_Register;

   //---------------------------------------------------------------------------
   // PFI_DI_Register
   //---------------------------------------------------------------------------
   tPFI_DI_Register PFI_DI_Register;

   //---------------------------------------------------------------------------
   // PFI_DO_Register
   //---------------------------------------------------------------------------
   tPFI_DO_Register PFI_DO_Register;

   //---------------------------------------------------------------------------
   // PFI_WDT_SafeStateRegister
   //---------------------------------------------------------------------------
   tPFI_WDT_SafeStateRegister PFI_WDT_SafeStateRegister;

   //---------------------------------------------------------------------------
   // PFI_WDT_ModeSelect_Register
   //---------------------------------------------------------------------------
   tPFI_WDT_ModeSelect_Register PFI_WDT_ModeSelect_Register;

   //---------------------------------------------------------------------------
   // IntTriggerA_OutputSelectRegister_i
   //---------------------------------------------------------------------------
   tIntTriggerA_OutputSelectRegister_t IntTriggerA_OutputSelectRegister_i[kIntTriggerA_OutputSelectRegister_iArraySize];

   //---------------------------------------------------------------------------
   // IntTrigA_Filter_Register_Lo
   //---------------------------------------------------------------------------
   tIntTrigA_Filter_Register_Lo IntTrigA_Filter_Register_Lo;

   //---------------------------------------------------------------------------
   // IntTrigA_Filter_Register_Hi
   //---------------------------------------------------------------------------
   tIntTrigA_Filter_Register_Hi IntTrigA_Filter_Register_Hi;

   //---------------------------------------------------------------------------
   // Trig_Filter_Settings1_Register
   //---------------------------------------------------------------------------
   tTrig_Filter_Settings1_Register Trig_Filter_Settings1_Register;

   //---------------------------------------------------------------------------
   // Trig_Filter_Settings2_Register
   //---------------------------------------------------------------------------
   tTrig_Filter_Settings2_Register Trig_Filter_Settings2_Register;

   //---------------------------------------------------------------------------
   // PLL_LockCount_Register
   //---------------------------------------------------------------------------
   tPLL_LockCount_Register PLL_LockCount_Register;

   //---------------------------------------------------------------------------
   // Sync100_Repeat_Count_Register
   //---------------------------------------------------------------------------
   tSync100_Repeat_Count_Register Sync100_Repeat_Count_Register;

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kAnalogTrigControlRegisterId      = 0,
      kAnalog_Trigger_ModeId            = nNIMXRegisterMap120_mBuildFieldId(tAnalogTrigControlRegister::kAnalog_Trigger_ModeId, kAnalogTrigControlRegisterId),
      kAnalog_Trigger_ResetId           = nNIMXRegisterMap120_mBuildFieldId(tAnalogTrigControlRegister::kAnalog_Trigger_ResetId, kAnalogTrigControlRegisterId),
      kAtrig_SelId                      = nNIMXRegisterMap120_mBuildFieldId(tAnalogTrigControlRegister::kAtrig_SelId, kAnalogTrigControlRegisterId),

      kFOUT_RegisterId                  = 1,
      kFOUT_DividerId                   = nNIMXRegisterMap120_mBuildFieldId(tFOUT_Register::kFOUT_DividerId, kFOUT_RegisterId),
      kFOUT_FastTB_DivideBy2Id          = nNIMXRegisterMap120_mBuildFieldId(tFOUT_Register::kFOUT_FastTB_DivideBy2Id, kFOUT_RegisterId),
      kFOUT_Timebase_SelectId           = nNIMXRegisterMap120_mBuildFieldId(tFOUT_Register::kFOUT_Timebase_SelectId, kFOUT_RegisterId),
      kFOUT_EnableId                    = nNIMXRegisterMap120_mBuildFieldId(tFOUT_Register::kFOUT_EnableId, kFOUT_RegisterId),

      kPFI_Direction_RegisterId         = 2,
      kPFI0_Pin_DirId                   = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI0_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI1_Pin_DirId                   = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI1_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI2_Pin_DirId                   = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI2_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI3_Pin_DirId                   = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI3_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI4_Pin_DirId                   = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI4_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI5_Pin_DirId                   = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI5_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI6_Pin_DirId                   = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI6_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI7_Pin_DirId                   = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI7_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI8_Pin_DirId                   = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI8_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI9_Pin_DirId                   = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI9_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI10_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI10_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI11_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI11_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI12_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI12_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI13_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI13_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI14_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI14_Pin_DirId, kPFI_Direction_RegisterId),
      kPFI15_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFI15_Pin_DirId, kPFI_Direction_RegisterId),

      kRTSI_Trig_Direction_RegisterId   = 3,
      kRTSI0_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tRTSI_Trig_Direction_Register::kRTSI0_Pin_DirId, kRTSI_Trig_Direction_RegisterId),
      kRTSI1_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tRTSI_Trig_Direction_Register::kRTSI1_Pin_DirId, kRTSI_Trig_Direction_RegisterId),
      kRTSI2_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tRTSI_Trig_Direction_Register::kRTSI2_Pin_DirId, kRTSI_Trig_Direction_RegisterId),
      kRTSI3_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tRTSI_Trig_Direction_Register::kRTSI3_Pin_DirId, kRTSI_Trig_Direction_RegisterId),
      kRTSI4_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tRTSI_Trig_Direction_Register::kRTSI4_Pin_DirId, kRTSI_Trig_Direction_RegisterId),
      kRTSI5_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tRTSI_Trig_Direction_Register::kRTSI5_Pin_DirId, kRTSI_Trig_Direction_RegisterId),
      kRTSI6_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tRTSI_Trig_Direction_Register::kRTSI6_Pin_DirId, kRTSI_Trig_Direction_RegisterId),
      kRTSI7_Pin_DirId                  = nNIMXRegisterMap120_mBuildFieldId(tRTSI_Trig_Direction_Register::kRTSI7_Pin_DirId, kRTSI_Trig_Direction_RegisterId),

      kRTSI_OutputSelectRegister_i0Id   = 4,
      kRTSI_OutSel0RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i0Id),

      kRTSI_OutputSelectRegister_i1Id   = 5,
      kRTSI_OutSel1RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i1Id),

      kRTSI_OutputSelectRegister_i2Id   = 6,
      kRTSI_OutSel2RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i2Id),

      kRTSI_OutputSelectRegister_i3Id   = 7,
      kRTSI_OutSel3RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i3Id),

      kRTSI_OutputSelectRegister_i4Id   = 8,
      kRTSI_OutSel4RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i4Id),

      kRTSI_OutputSelectRegister_i5Id   = 9,
      kRTSI_OutSel5RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i5Id),

      kRTSI_OutputSelectRegister_i6Id   = 10,
      kRTSI_OutSel6RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i6Id),

      kRTSI_OutputSelectRegister_i7Id   = 11,
      kRTSI_OutSel7RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i7Id),

      kPFI_Filter_Register_0Id          = 12,
      kPFI0_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_0::kPFI0_Filter_SelectId, kPFI_Filter_Register_0Id),
      kPFI1_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_0::kPFI1_Filter_SelectId, kPFI_Filter_Register_0Id),
      kPFI2_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_0::kPFI2_Filter_SelectId, kPFI_Filter_Register_0Id),
      kPFI3_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_0::kPFI3_Filter_SelectId, kPFI_Filter_Register_0Id),

      kPFI_Filter_Register_1Id          = 13,
      kPFI4_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_1::kPFI4_Filter_SelectId, kPFI_Filter_Register_1Id),
      kPFI5_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_1::kPFI5_Filter_SelectId, kPFI_Filter_Register_1Id),
      kPFI6_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_1::kPFI6_Filter_SelectId, kPFI_Filter_Register_1Id),
      kPFI7_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_1::kPFI7_Filter_SelectId, kPFI_Filter_Register_1Id),

      kPFI_Filter_Register_2Id          = 14,
      kPFI8_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_2::kPFI8_Filter_SelectId, kPFI_Filter_Register_2Id),
      kPFI9_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_2::kPFI9_Filter_SelectId, kPFI_Filter_Register_2Id),
      kPFI10_Filter_SelectId            = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_2::kPFI10_Filter_SelectId, kPFI_Filter_Register_2Id),
      kPFI11_Filter_SelectId            = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_2::kPFI11_Filter_SelectId, kPFI_Filter_Register_2Id),

      kPFI_Filter_Register_3Id          = 15,
      kPFI12_Filter_SelectId            = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_3::kPFI12_Filter_SelectId, kPFI_Filter_Register_3Id),
      kPFI13_Filter_SelectId            = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_3::kPFI13_Filter_SelectId, kPFI_Filter_Register_3Id),
      kPFI14_Filter_SelectId            = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_3::kPFI14_Filter_SelectId, kPFI_Filter_Register_3Id),
      kPFI15_Filter_SelectId            = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_3::kPFI15_Filter_SelectId, kPFI_Filter_Register_3Id),

      kSTAR_Trig_RegisterId             = 16,
      kStar_Trig_Output_SelectId        = nNIMXRegisterMap120_mBuildFieldId(tSTAR_Trig_Register::kStar_Trig_Output_SelectId, kSTAR_Trig_RegisterId),
      kStar_Trig_Pin_DirId              = nNIMXRegisterMap120_mBuildFieldId(tSTAR_Trig_Register::kStar_Trig_Pin_DirId, kSTAR_Trig_RegisterId),

      kPFI_OutputSelectRegister_i0Id    = 17,
      kPFI_OutSel0PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i0Id),

      kPFI_OutputSelectRegister_i1Id    = 18,
      kPFI_OutSel1PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i1Id),

      kPFI_OutputSelectRegister_i2Id    = 19,
      kPFI_OutSel2PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i2Id),

      kPFI_OutputSelectRegister_i3Id    = 20,
      kPFI_OutSel3PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i3Id),

      kPFI_OutputSelectRegister_i4Id    = 21,
      kPFI_OutSel4PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i4Id),

      kPFI_OutputSelectRegister_i5Id    = 22,
      kPFI_OutSel5PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i5Id),

      kPFI_OutputSelectRegister_i6Id    = 23,
      kPFI_OutSel6PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i6Id),

      kPFI_OutputSelectRegister_i7Id    = 24,
      kPFI_OutSel7PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i7Id),

      kPFI_OutputSelectRegister_i8Id    = 25,
      kPFI_OutSel8PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i8Id),

      kPFI_OutputSelectRegister_i9Id    = 26,
      kPFI_OutSel9PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i9Id),

      kPFI_OutputSelectRegister_i10Id   = 27,
      kPFI_OutSel10PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i10Id),

      kPFI_OutputSelectRegister_i11Id   = 28,
      kPFI_OutSel11PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i11Id),

      kPFI_OutputSelectRegister_i12Id   = 29,
      kPFI_OutSel12PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i12Id),

      kPFI_OutputSelectRegister_i13Id   = 30,
      kPFI_OutSel13PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i13Id),

      kPFI_OutputSelectRegister_i14Id   = 31,
      kPFI_OutSel14PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i14Id),

      kPFI_OutputSelectRegister_i15Id   = 32,
      kPFI_OutSel15PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i15Id),

      kDStarC_Trig_RegisterId           = 33,
      kDStarC_Output_SelectId           = nNIMXRegisterMap120_mBuildFieldId(tDStarC_Trig_Register::kDStarC_Output_SelectId, kDStarC_Trig_RegisterId),
      kDStarC_EnableId                  = nNIMXRegisterMap120_mBuildFieldId(tDStarC_Trig_Register::kDStarC_EnableId, kDStarC_Trig_RegisterId),

      kClock_And_Fout2_RegisterId       = 34,
      kPLL_In_Source_SelectId           = nNIMXRegisterMap120_mBuildFieldId(tClock_And_Fout2_Register::kPLL_In_Source_SelectId, kClock_And_Fout2_RegisterId),
      kTB3_SelectId                     = nNIMXRegisterMap120_mBuildFieldId(tClock_And_Fout2_Register::kTB3_SelectId, kClock_And_Fout2_RegisterId),

      kPLL_Control_RegisterId           = 35,
      kPLL_OutputDividerId              = nNIMXRegisterMap120_mBuildFieldId(tPLL_Control_Register::kPLL_OutputDividerId, kPLL_Control_RegisterId),
      kPLL_MultiplierId                 = nNIMXRegisterMap120_mBuildFieldId(tPLL_Control_Register::kPLL_MultiplierId, kPLL_Control_RegisterId),
      kPLL_RefDivisorId                 = nNIMXRegisterMap120_mBuildFieldId(tPLL_Control_Register::kPLL_RefDivisorId, kPLL_Control_RegisterId),
      kPLL_Filter_RangeId               = nNIMXRegisterMap120_mBuildFieldId(tPLL_Control_Register::kPLL_Filter_RangeId, kPLL_Control_RegisterId),
      kPLL_EnableId                     = nNIMXRegisterMap120_mBuildFieldId(tPLL_Control_Register::kPLL_EnableId, kPLL_Control_RegisterId),

      kPLL_Status_RegisterId            = 36,
      kPLL_TimerExpiredId               = nNIMXRegisterMap120_mBuildFieldId(tPLL_Status_Register::kPLL_TimerExpiredId, kPLL_Status_RegisterId),
      kHW_Pll_LockedId                  = nNIMXRegisterMap120_mBuildFieldId(tPLL_Status_Register::kHW_Pll_LockedId, kPLL_Status_RegisterId),

      kPFI_DI_RegisterId                = 37,
      kPFI_0_DI_BitfieldId              = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_0_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_1_DI_BitfieldId              = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_1_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_2_DI_BitfieldId              = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_2_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_3_DI_BitfieldId              = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_3_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_4_DI_BitfieldId              = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_4_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_5_DI_BitfieldId              = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_5_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_6_DI_BitfieldId              = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_6_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_7_DI_BitfieldId              = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_7_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_8_DI_BitfieldId              = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_8_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_9_DI_BitfieldId              = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_9_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_10_DI_BitfieldId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_10_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_11_DI_BitfieldId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_11_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_12_DI_BitfieldId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_12_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_13_DI_BitfieldId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_13_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_14_DI_BitfieldId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_14_DI_BitfieldId, kPFI_DI_RegisterId),
      kPFI_15_DI_BitfieldId             = nNIMXRegisterMap120_mBuildFieldId(tPFI_DI_Register::kPFI_15_DI_BitfieldId, kPFI_DI_RegisterId),

      kPFI_DO_RegisterId                = 38,
      kPFI_DO_BfId                      = nNIMXRegisterMap120_mBuildFieldId(tPFI_DO_Register::kPFI_DO_BfId, kPFI_DO_RegisterId),

      kPFI_WDT_SafeStateRegisterId      = 39,
      kPFI_WDT_SafeStateValueId         = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_SafeStateRegister::kPFI_WDT_SafeStateValueId, kPFI_WDT_SafeStateRegisterId),

      kPFI_WDT_ModeSelect_RegisterId    = 40,
      kPFI_WDT_ModeD0Id                 = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD0Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD1Id                 = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD1Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD2Id                 = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD2Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD3Id                 = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD3Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD4Id                 = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD4Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD5Id                 = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD5Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD6Id                 = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD6Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD7Id                 = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD7Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD8Id                 = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD8Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD9Id                 = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD9Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD10Id                = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD10Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD11Id                = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD11Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD12Id                = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD12Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD13Id                = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD13Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD14Id                = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD14Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModeD15Id                = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModeD15Id, kPFI_WDT_ModeSelect_RegisterId),

      kIntTriggerA_OutputSelectRegister_i0Id        = 41,
      kIntTriggerA_OutSel0IntTriggerA_i_Output_SelectId                   = nNIMXRegisterMap120_mBuildFieldId(tIntTriggerA_OutputSelectRegister_t::kIntTriggerA_i_Output_SelectId, kIntTriggerA_OutputSelectRegister_i0Id),

      kIntTriggerA_OutputSelectRegister_i1Id        = 42,
      kIntTriggerA_OutSel1IntTriggerA_i_Output_SelectId                   = nNIMXRegisterMap120_mBuildFieldId(tIntTriggerA_OutputSelectRegister_t::kIntTriggerA_i_Output_SelectId, kIntTriggerA_OutputSelectRegister_i1Id),

      kIntTriggerA_OutputSelectRegister_i2Id        = 43,
      kIntTriggerA_OutSel2IntTriggerA_i_Output_SelectId                   = nNIMXRegisterMap120_mBuildFieldId(tIntTriggerA_OutputSelectRegister_t::kIntTriggerA_i_Output_SelectId, kIntTriggerA_OutputSelectRegister_i2Id),

      kIntTriggerA_OutputSelectRegister_i3Id        = 44,
      kIntTriggerA_OutSel3IntTriggerA_i_Output_SelectId                   = nNIMXRegisterMap120_mBuildFieldId(tIntTriggerA_OutputSelectRegister_t::kIntTriggerA_i_Output_SelectId, kIntTriggerA_OutputSelectRegister_i3Id),

      kIntTriggerA_OutputSelectRegister_i4Id        = 45,
      kIntTriggerA_OutSel4IntTriggerA_i_Output_SelectId                   = nNIMXRegisterMap120_mBuildFieldId(tIntTriggerA_OutputSelectRegister_t::kIntTriggerA_i_Output_SelectId, kIntTriggerA_OutputSelectRegister_i4Id),

      kIntTriggerA_OutputSelectRegister_i5Id        = 46,
      kIntTriggerA_OutSel5IntTriggerA_i_Output_SelectId                   = nNIMXRegisterMap120_mBuildFieldId(tIntTriggerA_OutputSelectRegister_t::kIntTriggerA_i_Output_SelectId, kIntTriggerA_OutputSelectRegister_i5Id),

      kIntTriggerA_OutputSelectRegister_i6Id        = 47,
      kIntTriggerA_OutSel6IntTriggerA_i_Output_SelectId                   = nNIMXRegisterMap120_mBuildFieldId(tIntTriggerA_OutputSelectRegister_t::kIntTriggerA_i_Output_SelectId, kIntTriggerA_OutputSelectRegister_i6Id),

      kIntTriggerA_OutputSelectRegister_i7Id        = 48,
      kIntTriggerA_OutSel7IntTriggerA_i_Output_SelectId                   = nNIMXRegisterMap120_mBuildFieldId(tIntTriggerA_OutputSelectRegister_t::kIntTriggerA_i_Output_SelectId, kIntTriggerA_OutputSelectRegister_i7Id),

      kIntTrigA_Filter_Register_LoId    = 49,
      kITA0_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tIntTrigA_Filter_Register_Lo::kITA0_Filter_SelectId, kIntTrigA_Filter_Register_LoId),
      kITA1_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tIntTrigA_Filter_Register_Lo::kITA1_Filter_SelectId, kIntTrigA_Filter_Register_LoId),
      kITA2_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tIntTrigA_Filter_Register_Lo::kITA2_Filter_SelectId, kIntTrigA_Filter_Register_LoId),
      kITA3_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tIntTrigA_Filter_Register_Lo::kITA3_Filter_SelectId, kIntTrigA_Filter_Register_LoId),

      kIntTrigA_Filter_Register_HiId    = 50,
      kITA4_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tIntTrigA_Filter_Register_Hi::kITA4_Filter_SelectId, kIntTrigA_Filter_Register_HiId),
      kITA5_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tIntTrigA_Filter_Register_Hi::kITA5_Filter_SelectId, kIntTrigA_Filter_Register_HiId),
      kITA6_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tIntTrigA_Filter_Register_Hi::kITA6_Filter_SelectId, kIntTrigA_Filter_Register_HiId),
      kITA7_Filter_SelectId             = nNIMXRegisterMap120_mBuildFieldId(tIntTrigA_Filter_Register_Hi::kITA7_Filter_SelectId, kIntTrigA_Filter_Register_HiId),

      kTrig_Filter_Settings1_RegisterId   = 51,
      kTrig_Filter_Custom_Period_1Id    = nNIMXRegisterMap120_mBuildFieldId(tTrig_Filter_Settings1_Register::kTrig_Filter_Custom_Period_1Id, kTrig_Filter_Settings1_RegisterId),
      kTrig_Filter_Custom_Timebase_1Id  = nNIMXRegisterMap120_mBuildFieldId(tTrig_Filter_Settings1_Register::kTrig_Filter_Custom_Timebase_1Id, kTrig_Filter_Settings1_RegisterId),
      kTrig_Filter_Ext_Signal_SelectId  = nNIMXRegisterMap120_mBuildFieldId(tTrig_Filter_Settings1_Register::kTrig_Filter_Ext_Signal_SelectId, kTrig_Filter_Settings1_RegisterId),

      kTrig_Filter_Settings2_RegisterId   = 52,
      kTrig_Filter_Custom_Period_2Id    = nNIMXRegisterMap120_mBuildFieldId(tTrig_Filter_Settings2_Register::kTrig_Filter_Custom_Period_2Id, kTrig_Filter_Settings2_RegisterId),
      kTrig_Filter_Custom_Timebase_2Id  = nNIMXRegisterMap120_mBuildFieldId(tTrig_Filter_Settings2_Register::kTrig_Filter_Custom_Timebase_2Id, kTrig_Filter_Settings2_RegisterId),

      kPLL_LockCount_RegisterId         = 53,
      kPLL_LockCountId                  = nNIMXRegisterMap120_mBuildFieldId(tPLL_LockCount_Register::kPLL_LockCountId, kPLL_LockCount_RegisterId),

      kSync100_Repeat_Count_RegisterId  = 54,
      kSync100_Repeat_CountId           = nNIMXRegisterMap120_mBuildFieldId(tSync100_Repeat_Count_Register::kSync100_Repeat_CountId, kSync100_Repeat_Count_RegisterId),


      kMaxRegisterId = 54

   } tId;

   tTriggers(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   tTriggers();
   void initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tTriggers();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline tBoolean isDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(tId id, nMDBG::tStatus2* statusChain = NULL);

   inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(nMDBG::tStatus2* statusChain = NULL);

private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   u32 _addressOffset;
   u8 _dirtyVector[55];

};

#ifndef ___tTriggers_ipp___
#ifndef ___tTriggers_h_no_inline___
#include "tTriggers.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

