// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tTriggersValues_h___
#define ___tTriggersValues_h___

namespace nTriggers {
   typedef enum {
      kWdtMode_Disabled                  = 0,
      kWdtMode_Freeze                    = 1,
      kWdtMode_Tristate                  = 2,
      kWdtMode_SafeValue                 = 3,
   } tPFI_WDT_Mode_t;

   typedef enum {
      kPLL_NotLocked                     = 0,
      kPLL_Locked                        = 1,
   } tTrigPllLockedStatus_t;

   typedef enum {
      kATrigMode_Low_Window              = 0,
      kATrigMode_High_Window             = 1,
      kATrigMode_Middle_Window           = 2,
      kATrigMode_High_Hysteresis         = 4,
      kATrigMode_Low_Hysteresis          = 6,
   } tTrig_Analog_Trigger_Mode_t;

   typedef enum {
      kATrigSel_AI_Chan                  = 0,
      kATrigSel_APFI0                    = 1,
      kATrigSel_APFI1                    = 2,
      kATrigSel_Ground                   = 3,
   } tTrig_Atrig_Sel_t;

   typedef enum {
      kFOUT_Disabled                     = 0,
      kFOUT_Enabled                      = 1,
   } tTrig_FOUT_Enable_t;

   typedef enum {
      kFOUT_FastTB_isTB1                 = 0,
      kFOUT_FastTB_isTB1_DivBy2          = 1,
   } tTrig_FOUT_FastTB_DivideBy2_t;

   typedef enum {
      kFOUT_Src_IsFastTB                 = 0,
      kFOUT_Src_IsTB2                    = 1,
   } tTrig_FOUT_Timebase_Select_t;

   typedef enum {
      kFilter_Timebase_TB3               = 0,
      kFilter_Timebase_TB2               = 1,
      kExternal_Signal                   = 2,
   } tTrig_Filter_Custom_Timebase_t;

   typedef enum {
      kFilter_Ext_Signal_IntTriggerA0    = 0,
      kFilter_Ext_Signal_IntTriggerA1    = 1,
      kFilter_Ext_Signal_IntTriggerA2    = 2,
      kFilter_Ext_Signal_IntTriggerA3    = 3,
      kFilter_Ext_Signal_IntTriggerA4    = 4,
      kFilter_Ext_Signal_IntTriggerA5    = 5,
      kFilter_Ext_Signal_IntTriggerA6    = 6,
      kFilter_Ext_Signal_IntTriggerA7    = 7,
   } tTrig_Filter_Ext_Signal_Select_t;

   typedef enum {
      kNo_Filter                         = 0,
      kSync_To_TB3                       = 1,
      kSmall_Filter                      = 2,
      kMedium_Filter                     = 3,
      kLarge_Filter                      = 4,
      kCustom_Filter_1                   = 5,
      kCustom_Filter_2                   = 6,
   } tTrig_Filter_Select_t;

   typedef enum {
      kIntTriggerA_PFI0                  = 0,
      kIntTriggerA_PFI1                  = 1,
      kIntTriggerA_PFI2                  = 2,
      kIntTriggerA_PFI3                  = 3,
      kIntTriggerA_PFI4                  = 4,
      kIntTriggerA_PFI5                  = 5,
      kIntTriggerA_PFI6                  = 6,
      kIntTriggerA_PFI7                  = 7,
      kIntTriggerA_PFI8                  = 8,
      kIntTriggerA_PFI9                  = 9,
      kIntTriggerA_PFI10                 = 10,
      kIntTriggerA_PFI11                 = 11,
      kIntTriggerA_PFI12                 = 12,
      kIntTriggerA_PFI13                 = 13,
      kIntTriggerA_PFI14                 = 14,
      kIntTriggerA_PFI15                 = 15,
      kIntTriggerA_RTSI0                 = 16,
      kIntTriggerA_RTSI1                 = 17,
      kIntTriggerA_RTSI2                 = 18,
      kIntTriggerA_RTSI3                 = 19,
      kIntTriggerA_RTSI4                 = 20,
      kIntTriggerA_RTSI5                 = 21,
      kIntTriggerA_RTSI6                 = 22,
      kIntTriggerA_RTSI7                 = 23,
      kIntTriggerA_PXI_StarTrig          = 32,
      kIntTriggerA_PXIe_DStarA           = 33,
      kIntTriggerA_PXIe_DStarB           = 34,
      kIntTriggerA_ReferenceClock        = 35,
      kIntTriggerA_FOUT                  = 36,
      kIntTriggerA_ATrig                 = 37,
      kIntTriggerA_AI_CONVERT            = 38,
      kIntTriggerA_AI_START              = 39,
      kIntTriggerA_AI_START1             = 40,
      kIntTriggerA_AI_START2             = 41,
      kIntTriggerA_AI_Gate               = 42,
      kIntTriggerA_DI_Convert            = 43,
      kIntTriggerA_DI_Start1             = 44,
      kIntTriggerA_DI_Start2             = 45,
      kIntTriggerA_DI_Gate               = 46,
      kIntTriggerA_AO_UPDATE             = 55,
      kIntTriggerA_AO_START1             = 56,
      kIntTriggerA_AO_Gate               = 57,
      kIntTriggerA_DO_Update             = 58,
      kIntTriggerA_DO_Start1             = 59,
      kIntTriggerA_DO_Gate               = 60,
      kIntTriggerA_DIO_ChangeDetect      = 61,
      kIntTriggerA_G0_SRC                = 62,
      kIntTriggerA_G0_GATE               = 63,
      kIntTriggerA_G0_OUT                = 64,
      kIntTriggerA_G0_SampleClk          = 65,
      kIntTriggerA_G1_SRC                = 66,
      kIntTriggerA_G1_GATE               = 67,
      kIntTriggerA_G1_OUT                = 68,
      kIntTriggerA_G1_SampleClk          = 69,
      kIntTriggerA_G2_SRC                = 70,
      kIntTriggerA_G2_GATE               = 71,
      kIntTriggerA_G2_OUT                = 72,
      kIntTriggerA_G2_SampleClk          = 73,
      kIntTriggerA_G3_SRC                = 74,
      kIntTriggerA_G3_GATE               = 75,
      kIntTriggerA_G3_OUT                = 76,
      kIntTriggerA_G3_SampleClk          = 77,
      kIntTriggerA_WatchdogExpiredPulse  = 78,
      kIntTriggerA_G0_HwArm              = 103,
      kIntTriggerA_G1_HwArm              = 104,
      kIntTriggerA_G2_HwArm              = 105,
      kIntTriggerA_G3_HwArm              = 106,
   } tTrig_IntTriggerA_i_Output_Select_t;

   typedef enum {
      kPFI_WatchdogExpired               = 0,
      kPFI_AI_Start1                     = 1,
      kPFI_AI_Start2                     = 2,
      kPFI_AI_Convert                    = 3,
      kPFI_G1_SRC                        = 4,
      kPFI_G1_Gate                       = 5,
      kPFI_AO_Update                     = 6,
      kPFI_AO_Start1                     = 7,
      kPFI_AI_Start                      = 8,
      kPFI_G0_SRC                        = 9,
      kPFI_G0_Gate                       = 10,
      kPFI_SCXI_SpiClk                   = 11,
      kPFI_AI_ExternalMux_Clk            = 12,
      kPFI_G0_Out                        = 13,
      kPFI_G1_Out                        = 14,
      kPFI_Freq_Out                      = 15,
      kPFI_DO                            = 16,
      kPFI_Atrig                         = 17,
      kPFI_RTSI0                         = 18,
      kPFI_RTSI1                         = 19,
      kPFI_RTSI2                         = 20,
      kPFI_RTSI3                         = 21,
      kPFI_RTSI4                         = 22,
      kPFI_RTSI5                         = 23,
      kPFI_RTSI6                         = 24,
      kPFI_RTSI7                         = 25,
      kPFI_Star_Trig                     = 26,
      kPFI_SCXI_Trig1_in                 = 27,
      kPFI_DIO_Change_Detect             = 28,
      kPFI_DI_Convert                    = 29,
      kPFI_DO_Update                     = 30,
      kPFI_G2_SRC                        = 31,
      kPFI_G2_Gate                       = 32,
      kPFI_G2_Out                        = 33,
      kPFI_G3_SRC                        = 34,
      kPFI_G3_Gate                       = 35,
      kPFI_G3_Out                        = 36,
      kPFI_DO_Start1                     = 37,
      kPFI_DO_Gate                       = 38,
      kPFI_DI_Start1                     = 39,
      kPFI_DI_Start2                     = 40,
      kPFI_DI_Gate                       = 41,
      kPFI_PXIe_DStarA                   = 42,
      kPFI_PXIe_DStarB                   = 43,
      kPFI_G0_SampleClk                  = 44,
      kPFI_G1_SampleClk                  = 45,
      kPFI_G2_SampleClk                  = 46,
      kPFI_G3_SampleClk                  = 47,
      kPFI_AI_Gate                       = 56,
      kPFI_AO_Gate                       = 57,
      kPFI_IntTriggerA0                  = 66,
      kPFI_IntTriggerA1                  = 67,
      kPFI_IntTriggerA2                  = 68,
      kPFI_IntTriggerA3                  = 69,
      kPFI_IntTriggerA4                  = 70,
      kPFI_IntTriggerA5                  = 71,
      kPFI_IntTriggerA6                  = 72,
      kPFI_IntTriggerA7                  = 73,
      kPFI_G0_HwArm                      = 74,
      kPFI_G1_HwArm                      = 75,
      kPFI_G2_HwArm                      = 76,
      kPFI_G3_HwArm                      = 77,
   } tTrig_PFI_Output_Select_t;

   typedef enum {
      kPFI_Input                         = 0,
      kPFI_Output                        = 1,
   } tTrig_PFI_i_Pin_Dir_t;

   typedef enum {
      kPLL_100MHz                        = 6,
   } tTrig_PLL_Filter_Range_t;

   typedef enum {
      kRefClkSrc_PXIe_Clk100             = 1,
      kRefClkSrc_PXIe_DStarA             = 2,
      kRefClkSrc_PXIe_DStarB             = 3,
      kRefClkSrc_Star_Trigger            = 4,
      kRefClkSrc_RTSI0                   = 5,
      kRefClkSrc_RTSI1                   = 6,
      kRefClkSrc_RTSI2                   = 7,
      kRefClkSrc_RTSI3                   = 8,
      kRefClkSrc_RTSI4                   = 9,
      kRefClkSrc_RTSI5                   = 10,
      kRefClkSrc_RTSI6                   = 11,
      kRefClkSrc_RTSI7                   = 12,
      kRefClkSrc_PFI0                    = 13,
      kRefClkSrc_PFI1                    = 14,
      kRefClkSrc_PFI2                    = 15,
      kRefClkSrc_PFI3                    = 16,
      kRefClkSrc_PFI4                    = 17,
      kRefClkSrc_PFI5                    = 18,
      kRefClkSrc_PFI6                    = 19,
      kRefClkSrc_PFI7                    = 20,
      kRefClkSrc_PFI8                    = 21,
      kRefClkSrc_PFI9                    = 22,
      kRefClkSrc_PFI10                   = 23,
      kRefClkSrc_PFI11                   = 24,
      kRefClkSrc_PFI12                   = 25,
      kRefClkSrc_PFI13                   = 26,
      kRefClkSrc_PFI14                   = 27,
      kRefClkSrc_PFI15                   = 28,
   } tTrig_PLL_In_Source_Select_t;

   typedef enum {
      kRTSI_AI_START1                    = 0,
      kRTSI_AI_START2                    = 1,
      kRTSI_AI_CONVERT                   = 2,
      kRTSI_AO_UPDATE                    = 3,
      kRTSI_AO_START1                    = 4,
      kRTSI_G0_SRC                       = 5,
      kRTSI_G0_GATE                      = 6,
      kRTSI_G0_OUT                       = 7,
      kRTSI_G0_Z                         = 8,
      kRTSI_AO_Gate                      = 9,
      kRTSI_AI_Gate                      = 10,
      kRTSI_FOUT                         = 11,
      kRTSI_RefClkOut                    = 12,
      kRTSI_DIO_ChangeDetect             = 13,
      kRTSI_WatchdogExpiredPulse         = 14,
      kRTSI_PFI0                         = 15,
      kRTSI_PFI1                         = 16,
      kRTSI_PFI2                         = 17,
      kRTSI_PFI3                         = 18,
      kRTSI_PFI4                         = 19,
      kRTSI_PFI5                         = 20,
      kRTSI_G1_OUT                       = 21,
      kRTSI_G1_GATE                      = 22,
      kRTSI_G1_SRC                       = 23,
      kRTSI_G1_Z                         = 24,
      kRTSI_Atrig                        = 25,
      kRTSI_AI_START                     = 26,
      kRTSI_G2_OUT                       = 27,
      kRTSI_G2_GATE                      = 28,
      kRTSI_G2_SRC                       = 29,
      kRTSI_G2_Z                         = 30,
      kRTSI_G3_OUT                       = 31,
      kRTSI_G3_GATE                      = 32,
      kRTSI_G3_SRC                       = 33,
      kRTSI_G3_Z                         = 34,
      kRTSI_DI_Convert                   = 35,
      kRTSI_DI_Start1                    = 36,
      kRTSI_DI_Start2                    = 37,
      kRTSI_DI_Gate                      = 38,
      kRTSI_DO_Update                    = 39,
      kRTSI_DO_Start1                    = 40,
      kRTSI_DO_Gate                      = 41,
      kRTSI_PFI6                         = 42,
      kRTSI_PFI7                         = 43,
      kRTSI_PFI8                         = 44,
      kRTSI_PFI9                         = 45,
      kRTSI_PFI10                        = 46,
      kRTSI_PFI11                        = 47,
      kRTSI_PFI12                        = 48,
      kRTSI_PFI13                        = 49,
      kRTSI_PFI14                        = 50,
      kRTSI_PFI15                        = 51,
      kRTSI_PXIe_DStarA                  = 52,
      kRTSI_PXIe_DStarB                  = 53,
      kRTSI_G0_SampleClk                 = 54,
      kRTSI_G1_SampleClk                 = 55,
      kRTSI_G2_SampleClk                 = 56,
      kRTSI_G3_SampleClk                 = 57,
      kRTSI_IntTriggerA0                 = 72,
      kRTSI_IntTriggerA1                 = 73,
      kRTSI_IntTriggerA2                 = 74,
      kRTSI_IntTriggerA3                 = 75,
      kRTSI_IntTriggerA4                 = 76,
      kRTSI_IntTriggerA5                 = 77,
      kRTSI_IntTriggerA6                 = 78,
      kRTSI_IntTriggerA7                 = 79,
   } tTrig_RTSI_i_Output_Select_t;

   typedef enum {
      kRTSI_Input                        = 0,
      kRTSI_Output                       = 1,
   } tTrig_RTSI_i_Pin_Dir_t;

   typedef enum {
      kStar_IntTriggerA0                 = 8,
      kStar_IntTriggerA1                 = 9,
      kStar_IntTriggerA2                 = 10,
      kStar_IntTriggerA3                 = 11,
      kStar_IntTriggerA4                 = 12,
      kStar_IntTriggerA5                 = 13,
      kStar_IntTriggerA6                 = 14,
      kStar_IntTriggerA7                 = 15,
   } tTrig_StarTrig_Output_Select_t;

   typedef enum {
      kTB3_From_OSC                      = 0,
      kTB3_From_PLL                      = 1,
   } tTrig_TB3_Select_t;

   namespace nIntTriggerA_OutputSelectRegister_t {
      namespace nIntTriggerA_i_Output_Select {
         enum {
            kMask = 0x7f,
            kOffset = 0,
         };
      }

   }

   namespace nPFI_OutputSelectRegister_t {
      namespace nPFI_i_Output_Select {
         enum {
            kMask = 0x7f,
            kOffset = 0,
         };
      }

   }

   namespace nRTSI_OutputSelectRegister_t {
      namespace nRTSI_i_Output_Select {
         enum {
            kMask = 0x7f,
            kOffset = 0,
         };
      }

   }

   namespace nAnalogTrigControlRegister {
      namespace nAnalog_Trigger_Mode {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nAnalog_Trigger_Reset {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nAtrig_Sel {
         enum {
            kMask = 0x300,
            kOffset = 0x8,
         };
      }

   }

   namespace nFOUT_Register {
      namespace nFOUT_Divider {
         enum {
            kMask = 0xf,
            kOffset = 0,
         };
      }

      namespace nFOUT_FastTB_DivideBy2 {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nFOUT_Timebase_Select {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nFOUT_Enable {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nPFI_Direction_Register {
      namespace nPFI0_Pin_Dir {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nPFI1_Pin_Dir {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nPFI2_Pin_Dir {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nPFI3_Pin_Dir {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nPFI4_Pin_Dir {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nPFI5_Pin_Dir {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nPFI6_Pin_Dir {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nPFI7_Pin_Dir {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nPFI8_Pin_Dir {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nPFI9_Pin_Dir {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nPFI10_Pin_Dir {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nPFI11_Pin_Dir {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nPFI12_Pin_Dir {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nPFI13_Pin_Dir {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nPFI14_Pin_Dir {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nPFI15_Pin_Dir {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nRTSI_Trig_Direction_Register {
      namespace nRTSI0_Pin_Dir {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nRTSI1_Pin_Dir {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nRTSI2_Pin_Dir {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nRTSI3_Pin_Dir {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nRTSI4_Pin_Dir {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nRTSI5_Pin_Dir {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nRTSI6_Pin_Dir {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nRTSI7_Pin_Dir {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nPFI_Filter_Register_0 {
      namespace nPFI0_Filter_Select {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nPFI1_Filter_Select {
         enum {
            kMask = 0x70,
            kOffset = 0x4,
         };
      }

      namespace nPFI2_Filter_Select {
         enum {
            kMask = 0x700,
            kOffset = 0x8,
         };
      }

      namespace nPFI3_Filter_Select {
         enum {
            kMask = 0x7000,
            kOffset = 0xc,
         };
      }

   }

   namespace nPFI_Filter_Register_1 {
      namespace nPFI4_Filter_Select {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nPFI5_Filter_Select {
         enum {
            kMask = 0x70,
            kOffset = 0x4,
         };
      }

      namespace nPFI6_Filter_Select {
         enum {
            kMask = 0x700,
            kOffset = 0x8,
         };
      }

      namespace nPFI7_Filter_Select {
         enum {
            kMask = 0x7000,
            kOffset = 0xc,
         };
      }

   }

   namespace nPFI_Filter_Register_2 {
      namespace nPFI8_Filter_Select {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nPFI9_Filter_Select {
         enum {
            kMask = 0x70,
            kOffset = 0x4,
         };
      }

      namespace nPFI10_Filter_Select {
         enum {
            kMask = 0x700,
            kOffset = 0x8,
         };
      }

      namespace nPFI11_Filter_Select {
         enum {
            kMask = 0x7000,
            kOffset = 0xc,
         };
      }

   }

   namespace nPFI_Filter_Register_3 {
      namespace nPFI12_Filter_Select {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nPFI13_Filter_Select {
         enum {
            kMask = 0x70,
            kOffset = 0x4,
         };
      }

      namespace nPFI14_Filter_Select {
         enum {
            kMask = 0x700,
            kOffset = 0x8,
         };
      }

      namespace nPFI15_Filter_Select {
         enum {
            kMask = 0x7000,
            kOffset = 0xc,
         };
      }

   }

   namespace nSTAR_Trig_Register {
      namespace nStar_Trig_Output_Select {
         enum {
            kMask = 0xf,
            kOffset = 0,
         };
      }

      namespace nStar_Trig_Pin_Dir {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nDStarC_Trig_Register {
      namespace nDStarC_Output_Select {
         enum {
            kMask = 0xf,
            kOffset = 0,
         };
      }

      namespace nDStarC_Enable {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nClock_And_Fout2_Register {
      namespace nPLL_In_Source_Select {
         enum {
            kMask = 0x1f,
            kOffset = 0,
         };
      }

      namespace nTB3_Select {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

   }

   namespace nPLL_Control_Register {
      namespace nPLL_OutputDivider {
         enum {
            kMask = 0x3f00,
            kOffset = 0x8,
         };
      }

      namespace nPLL_Multiplier {
         enum {
            kMask = 0x1fc000,
            kOffset = 0xe,
         };
      }

      namespace nPLL_RefDivisor {
         enum {
            kMask = 0xfe00000,
            kOffset = 0x15,
         };
      }

      namespace nPLL_Filter_Range {
         enum {
            kMask = 0x70000000,
            kOffset = 0x1c,
         };
      }

      namespace nPLL_Enable {
         enum {
            kMask = 0x80000000,
            kOffset = 0x1f,
         };
      }

   }

   namespace nPLL_Status_Register {
      namespace nPLL_TimerExpired {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nHW_Pll_Locked {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

   }

   namespace nPFI_DI_Register {
      namespace nPFI_0_DI_Bitfield {
         enum {
            kMask = 0x1,
            kOffset = 0,
         };
      }

      namespace nPFI_1_DI_Bitfield {
         enum {
            kMask = 0x2,
            kOffset = 0x1,
         };
      }

      namespace nPFI_2_DI_Bitfield {
         enum {
            kMask = 0x4,
            kOffset = 0x2,
         };
      }

      namespace nPFI_3_DI_Bitfield {
         enum {
            kMask = 0x8,
            kOffset = 0x3,
         };
      }

      namespace nPFI_4_DI_Bitfield {
         enum {
            kMask = 0x10,
            kOffset = 0x4,
         };
      }

      namespace nPFI_5_DI_Bitfield {
         enum {
            kMask = 0x20,
            kOffset = 0x5,
         };
      }

      namespace nPFI_6_DI_Bitfield {
         enum {
            kMask = 0x40,
            kOffset = 0x6,
         };
      }

      namespace nPFI_7_DI_Bitfield {
         enum {
            kMask = 0x80,
            kOffset = 0x7,
         };
      }

      namespace nPFI_8_DI_Bitfield {
         enum {
            kMask = 0x100,
            kOffset = 0x8,
         };
      }

      namespace nPFI_9_DI_Bitfield {
         enum {
            kMask = 0x200,
            kOffset = 0x9,
         };
      }

      namespace nPFI_10_DI_Bitfield {
         enum {
            kMask = 0x400,
            kOffset = 0xa,
         };
      }

      namespace nPFI_11_DI_Bitfield {
         enum {
            kMask = 0x800,
            kOffset = 0xb,
         };
      }

      namespace nPFI_12_DI_Bitfield {
         enum {
            kMask = 0x1000,
            kOffset = 0xc,
         };
      }

      namespace nPFI_13_DI_Bitfield {
         enum {
            kMask = 0x2000,
            kOffset = 0xd,
         };
      }

      namespace nPFI_14_DI_Bitfield {
         enum {
            kMask = 0x4000,
            kOffset = 0xe,
         };
      }

      namespace nPFI_15_DI_Bitfield {
         enum {
            kMask = 0x8000,
            kOffset = 0xf,
         };
      }

   }

   namespace nPFI_DO_Register {
      namespace nPFI_DO_Bf {
         enum {
            kMask = 0xffff,
            kOffset = 0,
         };
      }

   }

   namespace nPFI_WDT_SafeStateRegister {
      namespace nPFI_WDT_SafeStateValue {
         enum {
            kMask = 0xffff,
            kOffset = 0,
         };
      }

   }

   namespace nPFI_WDT_ModeSelect_Register {
      namespace nPFI_WDT_ModeD0 {
         enum {
            kMask = 0x3,
            kOffset = 0,
         };
      }

      namespace nPFI_WDT_ModeD1 {
         enum {
            kMask = 0xc,
            kOffset = 0x2,
         };
      }

      namespace nPFI_WDT_ModeD2 {
         enum {
            kMask = 0x30,
            kOffset = 0x4,
         };
      }

      namespace nPFI_WDT_ModeD3 {
         enum {
            kMask = 0xc0,
            kOffset = 0x6,
         };
      }

      namespace nPFI_WDT_ModeD4 {
         enum {
            kMask = 0x300,
            kOffset = 0x8,
         };
      }

      namespace nPFI_WDT_ModeD5 {
         enum {
            kMask = 0xc00,
            kOffset = 0xa,
         };
      }

      namespace nPFI_WDT_ModeD6 {
         enum {
            kMask = 0x3000,
            kOffset = 0xc,
         };
      }

      namespace nPFI_WDT_ModeD7 {
         enum {
            kMask = 0xc000,
            kOffset = 0xe,
         };
      }

      namespace nPFI_WDT_ModeD8 {
         enum {
            kMask = 0x30000,
            kOffset = 0x10,
         };
      }

      namespace nPFI_WDT_ModeD9 {
         enum {
            kMask = 0xc0000,
            kOffset = 0x12,
         };
      }

      namespace nPFI_WDT_ModeD10 {
         enum {
            kMask = 0x300000,
            kOffset = 0x14,
         };
      }

      namespace nPFI_WDT_ModeD11 {
         enum {
            kMask = 0xc00000,
            kOffset = 0x16,
         };
      }

      namespace nPFI_WDT_ModeD12 {
         enum {
            kMask = 0x3000000,
            kOffset = 0x18,
         };
      }

      namespace nPFI_WDT_ModeD13 {
         enum {
            kMask = 0xc000000,
            kOffset = 0x1a,
         };
      }

      namespace nPFI_WDT_ModeD14 {
         enum {
            kMask = 0x30000000,
            kOffset = 0x1c,
         };
      }

      namespace nPFI_WDT_ModeD15 {
         enum {
            kMask = 0xc0000000,
            kOffset = 0x1e,
         };
      }

   }

   namespace nIntTrigA_Filter_Register_Lo {
      namespace nITA0_Filter_Select {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nITA1_Filter_Select {
         enum {
            kMask = 0x70,
            kOffset = 0x4,
         };
      }

      namespace nITA2_Filter_Select {
         enum {
            kMask = 0x700,
            kOffset = 0x8,
         };
      }

      namespace nITA3_Filter_Select {
         enum {
            kMask = 0x7000,
            kOffset = 0xc,
         };
      }

   }

   namespace nIntTrigA_Filter_Register_Hi {
      namespace nITA4_Filter_Select {
         enum {
            kMask = 0x7,
            kOffset = 0,
         };
      }

      namespace nITA5_Filter_Select {
         enum {
            kMask = 0x70,
            kOffset = 0x4,
         };
      }

      namespace nITA6_Filter_Select {
         enum {
            kMask = 0x700,
            kOffset = 0x8,
         };
      }

      namespace nITA7_Filter_Select {
         enum {
            kMask = 0x7000,
            kOffset = 0xc,
         };
      }

   }

   namespace nTrig_Filter_Settings1_Register {
      namespace nTrig_Filter_Custom_Period_1 {
         enum {
            kMask = 0x1ff,
            kOffset = 0,
         };
      }

      namespace nTrig_Filter_Custom_Timebase_1 {
         enum {
            kMask = 0xc00,
            kOffset = 0xa,
         };
      }

      namespace nTrig_Filter_Ext_Signal_Select {
         enum {
            kMask = 0xe000,
            kOffset = 0xd,
         };
      }

   }

   namespace nTrig_Filter_Settings2_Register {
      namespace nTrig_Filter_Custom_Period_2 {
         enum {
            kMask = 0x1ff,
            kOffset = 0,
         };
      }

      namespace nTrig_Filter_Custom_Timebase_2 {
         enum {
            kMask = 0xc00,
            kOffset = 0xa,
         };
      }

   }

   namespace nPLL_LockCount_Register {
      namespace nPLL_LockCount {
         enum {
            kMask = 0xffff,
            kOffset = 0,
         };
      }

   }

   namespace nSync100_Repeat_Count_Register {
      namespace nSync100_Repeat_Count {
         enum {
            kMask = 0xff,
            kOffset = 0,
         };
      }

   }

   using namespace nIntTriggerA_OutputSelectRegister_t;
   using namespace nPFI_OutputSelectRegister_t;
   using namespace nRTSI_OutputSelectRegister_t;
   using namespace nAnalogTrigControlRegister;
   using namespace nFOUT_Register;
   using namespace nPFI_Direction_Register;
   using namespace nRTSI_Trig_Direction_Register;
   using namespace nPFI_Filter_Register_0;
   using namespace nPFI_Filter_Register_1;
   using namespace nPFI_Filter_Register_2;
   using namespace nPFI_Filter_Register_3;
   using namespace nSTAR_Trig_Register;
   using namespace nDStarC_Trig_Register;
   using namespace nClock_And_Fout2_Register;
   using namespace nPLL_Control_Register;
   using namespace nPLL_Status_Register;
   using namespace nPFI_DI_Register;
   using namespace nPFI_DO_Register;
   using namespace nPFI_WDT_SafeStateRegister;
   using namespace nPFI_WDT_ModeSelect_Register;
   using namespace nIntTrigA_Filter_Register_Lo;
   using namespace nIntTrigA_Filter_Register_Hi;
   using namespace nTrig_Filter_Settings1_Register;
   using namespace nTrig_Filter_Settings2_Register;
   using namespace nPLL_LockCount_Register;
   using namespace nSync100_Repeat_Count_Register;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

